# File <build.ninja> is generated by <build-template.ninja>
# by using <scripts/build-ninja-gen> and <scripts/GenNinjaFile>.

# To rebuild <build.ninja>, do:
#     scripts/build-ninja-gen

# <https://ninja-build.org/manual.html>

builddir = target

milone_dotnet_debug = MiloneLang/bin/Debug/net5.0/MiloneLang

milone_dotnet_release = MiloneLang/bin/Release/net5.0/MiloneLang

# ------------------------------------------------
# dotnet restore
# ------------------------------------------------

# Restore packages after .fsproj changed.
# Also generate a file for timestamp to suppress re-execute.

rule dotnet_restore
  description = dotnet_restore
  command = dotnet restore

build target/timestamp.dotnet_restore: $
  dotnet_restore $
    {{ FS_PROJ_FILES }}

build dotnet_restore: $
  phony target/timestamp.dotnet_restore

# ------------------------------------------------
# milone-dotnet
# ------------------------------------------------

rule build_milone_dotnet
  description = build_milone_dotnet ($CONFIG)
  command = CONFIG=$CONFIG scripts/build-milone-dotnet

build $milone_dotnet_debug: $
  build_milone_dotnet $
    {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    | dotnet_restore
  CONFIG = Debug

build $milone_dotnet_release: $
  build_milone_dotnet $
    {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    | dotnet_restore
  CONFIG = Release

# ------------------------------------------------
# milone-native
# ------------------------------------------------

rule build_milone
  description = build_milone out=$out
  command = MILONE_HOME=$$PWD $milone compile $verbosity MiloneLang | scripts/write-if-change $out || { cat $out >&2 && false; }
  restat = 1

rule build_cc
  description = build_cc in=$in
  command = MILONE_HOME="$$PWD" CFLAGS='-O0' INPUTS="$in" OUTPUT="$out" scripts/build-with-cc

# .fs -> .c (with .NET)

build target/milone_gen2.c: $
  build_milone $
    | {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    $milone_dotnet_debug
  milone = $milone_dotnet_debug
  verbosity = -q

# .c -> .exe

build target/milone: $
  build_cc $
    target/milone_gen2.c $
    | runtime/milone.h $
      runtime/milone.c

# .fs -> .c (with native)

build target/milone_gen3.c: $
  build_milone $
    | {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    target/milone
  milone = target/milone
  verbosity = --profile
  pool = console

# .c -> .diff

rule diff
  description = diff out=$out
  command = diff $in | scripts/write-if-change $out
  restat = 1

build target/milone_gen3.diff: $
  diff $
    target/milone_gen2.c $
    target/milone_gen3.c

# Verify diff.
# About test command:
#   predicate `-f file` is true if the file exists,
#   predicate `! -s file` is true if the file (doesn't exist or) is empty,
#   so the conjunction (`-a`) means that the file exists and is empty.

rule verify_no_diff
  description = verify_no_diff in=$in
  command = $
    test -f $in -a ! -s $in && $
    echo '✔ OK' || $
    { echo '✘ FAILED'; exit 1; }

build target/test_self.timestamp: $
  verify_no_diff $
    target/milone_gen3.diff

build test_self: $
  phony target/test_self.timestamp

# ------------------------------------------------
# Snapshot testing
# ------------------------------------------------

# Build a test-case project.
# This always succeeds for some cases to test compile error.
rule take_snapshot
  description = take_snapshot $project
  command = $
    MILONE_HOME=$$PWD $milone compile -q $project | scripts/write-if-change $out || $
    echo 'milone-lang compile error.' | scripts/write-if-change $out_file
  restat = 1

# Print snapshot diff.
rule git_diff_snapshot_stats
  command = git diff --stat -- 'tests/**/*.c' | scripts/write-if-change $out
  restat = 1

build snapshot_diff: $
  git_diff_snapshot_stats $
    {{ TEST_C_FILES }}
  pool = console

# ------------------------------------------------
# Execution testing
# ------------------------------------------------

rule build_test
  description = build_test $in
  command = $
    test ! -z "$$(grep '#error' -- $in)" || $
    MILONE_HOME="$$PWD" INPUTS="$in" OUTPUT="$out" scripts/build-with-cc

rule execute_test
  description = execute_test $c_file
  command = $
    test ! -z "$$(grep '#error' -- $c_file)" && $
    echo 'milone-lang compile error.' | scripts/write-if-change $out || { $
      $in >$out.tmp ; $
      echo '$$? = '$$? >>$out.tmp ; $
      cat $out.tmp | scripts/write-if-change $out ; $
      rm -f $out.tmp ; $
    }
  restat = 1

rule diff_test_output
  description = diff_test_output $test
  command = $
    diff -q $in && $
      echo OK $test >$out || $
      echo FAILED $test >$out

# Verify outputs.
rule verify_test_output
  description = verify_test_output
  command = $
    OK_COUNT=$$(grep ^OK -- $in | wc -l); $
    FAIL_COUNT=$$(grep ^FAIL -- $in | wc -l); $
    TOTAL_COUNT=$$(cat $in | wc -l) $
    STATUS=$$(if test $$FAIL_COUNT -eq 0; then echo OK; else echo FAIL; fi); $
    grep ^FAIL -- $in; $
    echo "$$STATUS - ok $$OK_COUNT / fail $$FAIL_COUNT / total $$TOTAL_COUNT"

build target/integration_tests.timestamp: $
  verify_test_output $
    {{ TEST_DIFF_FILES }}
  pool = console

build integration_tests: $
  phony target/integration_tests.timestamp

# ------------------------------------------------
# Test Projects
# ------------------------------------------------

{{ TEST_BUILDS }}

# ------------------------------------------------
# Other tests
# ------------------------------------------------

rule test_project_reference
  command = PATH=$$PWD/target:$$PATH MILONE_HOME=$$PWD TARGET_DIR=$builddir scripts/project-reference-example/test

build test_project_reference: test_project_reference target/milone

# ------------------------------------------------
# Clean
# ------------------------------------------------

# Remove generated files.
rule clean
  command = scripts/clean

build clean: clean

# ------------------------------------------------
# Entrypoint
# ------------------------------------------------

rule just
  command = :
  restat = 1

build target/all.timestamp: $
  just $
  integration_tests $
  test_self $
  test_project_reference

build all: $
  phony target/all.timestamp

default all
