# File <build.ninja> is generated by <build-template.ninja>
# by using <scripts/build-ninja-gen> and <scripts/GenNinjaFile>.

# To rebuild <build.ninja>, do:
#     scripts/build-ninja-gen

# <https://ninja-build.org/manual.html>

builddir = target

milone_dotnet_debug = MiloneLang/bin/Debug/net5.0/MiloneLang

milone_dotnet_release = MiloneLang/bin/Release/net5.0/MiloneLang

warning_flags = $
  -Wall $
  -Wextra $
  -Wpedantic $
  -Wno-parentheses-equality $
  -Wno-pointer-to-int-cast $
  -Wno-unknown-warning-option $
  -Wno-unused-but-set-parameter $
  -Wno-unused-but-set-variable $
  -Wno-unused-const-variable $
  -Wno-unused-function $
  -Wno-unused-label $
  -Wno-unused-parameter $
  -Wno-unused-variable

rule subninja
  description = subninja $file
  command = ninja -f $file && touch $out

# ------------------------------------------------
# dotnet restore
# ------------------------------------------------

# Restore packages after .fsproj changed.
# Also generate a file for timestamp to suppress re-execute.

rule dotnet_restore
  description = dotnet_restore
  command = $
    dotnet restore && $
    touch $out

build target/timestamp.dotnet_restore: $
  dotnet_restore $
    {{ FS_PROJ_FILES }}

build dotnet_restore: $
  phony target/timestamp.dotnet_restore

# ------------------------------------------------
# milone-dotnet
# ------------------------------------------------

rule build_milone_dotnet
  description = build_milone_dotnet ($CONFIG)
  command = $
    CONFIG=$CONFIG scripts/build-milone-dotnet && $
    touch $out

build $milone_dotnet_debug: $
  build_milone_dotnet $
    {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    | dotnet_restore
  CONFIG = Debug

build $milone_dotnet_release: $
  build_milone_dotnet $
    {{ MILONE_CORE_SRC }} {{ MILONE_STD_SRC }} {{ MILONE_LANG_SRC }} $
    | dotnet_restore
  CONFIG = Release

# ------------------------------------------------
# milone-native
# ------------------------------------------------

# Rules for self compilation.

rule compile_milone_to_c
  description = compile_milone_to_c $name
  command = $
    MILONE_HOME=$$PWD MILONE=$milone TARGET_DIR=$target_dir scripts/milone-incremental $verbosity $project | $
      ID=$name EXE=$exe TARGET_DIR=$target_dir scripts/build-ninja-dyn >$out

rule compile_c_to_obj
  description = compile_c_to_obj $in
  command = $${CC:-gcc} -std=c11 $warning_flags -O1 -g -c -Iruntime $in -o $out

build runtime/milone.o: $
  compile_c_to_obj $
    runtime/milone.c $
    | runtime/milone.h

# ------------------------------------------------
# gen2 build
# ------------------------------------------------

# This statement doesn't need to have source files as input
# because $milone_dotnet_debug is updated on change.
build target/gen2.ninja: $
  compile_milone_to_c $
    | $milone_dotnet_debug $
      scripts/build-ninja-dyn $
      scripts/milone-incremental
  exe = target/milone
  milone = $milone_dotnet_debug
  name = gen2
  project = MiloneLang
  target_dir = target/gen2
  verbosity = --quiet

build target/milone: $
  subninja $
    | target/gen2.ninja $
      runtime/milone.o
  file = target/gen2.ninja
  pool = console

build gen2: phony target/milone

# ------------------------------------------------
# gen3 build
# ------------------------------------------------

build target/gen3.ninja: $
  compile_milone_to_c $
    | target/milone
  exe = target/milone_gen3
  milone = target/milone
  name = gen3
  project = MiloneLang
  target_dir = target/gen3
  verbosity = --profile
  pool = console

build gen3: $
  phony | target/gen3.ninja

# ------------------------------------------------
# gen3 verification
# ------------------------------------------------

rule diff_self
  description = diff_self
  command = $
    ls -1 target/gen2/*.c | xargs -I{} basename {} .c | sort >target/gen2_files.txt; $
    ls -1 target/gen3/*.c | xargs -I{} basename {} .c | sort >target/gen3_files.txt; $
    { $
      diff target/gen2_files.txt target/gen3_files.txt; $
      cat target/gen2_files.txt | $
        xargs -n1 basename | $
        xargs -I{} diff target/gen2/{}.c target/gen3/{}.c; $
    } >$out

build target/self.diff: $
  diff_self $
    | gen2 gen3

build self: phony target/self.diff
build test_self: phony target/self.diff

# ------------------------------------------------
# Snapshot testing
# ------------------------------------------------

# Build a test-case project.
# This always succeeds for some cases to test compile error.
rule take_snapshot
  description = take_snapshot $project
  command = $
    if test -z "$$(grep 'milone-lang compile error.' -- $expected_out_file)"; then $
      MILONE_HOME=$$PWD $milone compile --quiet --target-dir $project $project | $
        ID=$name EXE=$exe_file TARGET_DIR=$project scripts/build-ninja-dyn >$out; $
    else $
      if ! env MILONE_HOME=$$PWD $milone compile --quiet --target-dir $project $project >/dev/null; then $
        echo 'milone-lang compile error.' >$out_file; $
      else $
        echo 'Compile success (expected compile error.)' >$out_file; $
      fi; $
      echo "build $exe_file: phony" >$out; $
    fi

# Print snapshot diff.
rule git_diff_snapshot_stats
  command = git diff --stat -- 'tests/**/*.c' >$out

build snapshot_diff: $
  git_diff_snapshot_stats $
    {{ TEST_C_FILES }}
  pool = console

# ------------------------------------------------
# Execution testing
# ------------------------------------------------

rule build_test
  description = build_test $project
  command = $
    if test -z "$$(grep 'milone-lang compile error.' -- $expected_out_file)"; then $
      ninja -f $in; $
    else $
      : >$out; $
    fi

rule execute_test
  description = execute_test $project
  command = $
    if test -z "$$(grep 'milone-lang compile error.' -- $expected_out_file)"; then $
      $in >$out.tmp; $
      echo '$$? = '$$? >>$out.tmp; $
      cat $out.tmp >$out; $
      rm -f $out.tmp; $
    else $
      echo 'milone-lang compile error.' >$out; $
    fi

rule diff_test_output
  description = diff_test_output $name
  command = $
    diff -q $in && $
      echo OK $name >$out || $
      echo FAILED $name >$out

# Verify outputs.
rule verify_test_output
  description = verify_test_output
  command = $
    OK_COUNT=$$(grep ^OK -- $in | wc -l); $
    FAIL_COUNT=$$(grep ^FAIL -- $in | wc -l); $
    TOTAL_COUNT=$$(cat $in | wc -l) $
    STATUS=$$(if test $$FAIL_COUNT -eq 0; then echo OK; else echo FAIL; fi); $
    grep ^FAIL -- $in; $
    echo "$$STATUS - ok $$OK_COUNT / fail $$FAIL_COUNT / total $$TOTAL_COUNT"; $
    touch $out

build target/integration_tests.timestamp: $
  verify_test_output $
    {{ TEST_DIFF_FILES }}
  pool = console

build integration_tests: $
  phony target/integration_tests.timestamp

# ------------------------------------------------
# Test Projects
# ------------------------------------------------

{{ TEST_BUILDS }}

# ------------------------------------------------
# Other tests
# ------------------------------------------------

rule test_project_reference
  description = test_project_reference
  command = $
    PATH=$$PWD/target:$$PATH $
      MILONE_HOME=$$PWD $
      TARGET_DIR=$builddir $
      scripts/project-reference-example/test; $
    touch $out

build target/timestamp.test_project_reference: $
  test_project_reference target/milone

build test_project_reference: $
  phony target/timestamp.test_project_reference

# ------------------------------------------------
# Clean
# ------------------------------------------------

# Remove generated files.
rule clean
  command = scripts/clean

build clean: clean

# ------------------------------------------------
# Entrypoint
# ------------------------------------------------

build build: phony gen2

build test: $
  phony $
    test_self $
    integration_tests $
    test_project_reference

default test
