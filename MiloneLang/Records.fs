/// ## Records
///
/// Generated by scripts/RecordGen from `Records.yml`.
/// Run `./records` to regenerate.
///
/// Defines some types as synonym of tuple with getter/setter functions
/// because record types are unimplemented in milone-lang.
module rec MiloneLang.Records

open MiloneLang.Types

type CirCtx =
  | CirCtx
    of AssocMap<VarSerial, VarDef>
      * AssocMap<VarSerial, Ident>
      * AssocMap<Ty, CTyInstance * CTy>
      * AssocMap<TySerial, TyDef>
      * AssocMap<Ty, Ident>
      * CStmt list
      * CDecl list
      * (Log * Loc) list

let cirCtxGetVars (CirCtx (vars, _, _, _, _, _, _, _)) =
  vars

let cirCtxGetVarUniqueNames (CirCtx (_, varUniqueNames, _, _, _, _, _, _)) =
  varUniqueNames

let cirCtxGetTyEnv (CirCtx (_, _, tyEnv, _, _, _, _, _)) =
  tyEnv

let cirCtxGetTys (CirCtx (_, _, _, tys, _, _, _, _)) =
  tys

let cirCtxGetTyUniqueNames (CirCtx (_, _, _, _, tyUniqueNames, _, _, _)) =
  tyUniqueNames

let cirCtxGetStmts (CirCtx (_, _, _, _, _, stmts, _, _)) =
  stmts

let cirCtxGetDecls (CirCtx (_, _, _, _, _, _, decls, _)) =
  decls

let cirCtxGetLogs (CirCtx (_, _, _, _, _, _, _, logs)) =
  logs

let cirCtxWithVars vars (CirCtx (_, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithVarUniqueNames varUniqueNames (CirCtx (vars, _, tyEnv, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTyEnv tyEnv (CirCtx (vars, varUniqueNames, _, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTys tys (CirCtx (vars, varUniqueNames, tyEnv, _, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTyUniqueNames tyUniqueNames (CirCtx (vars, varUniqueNames, tyEnv, tys, _, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithStmts stmts (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, _, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithDecls decls (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, _, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithLogs logs (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, _)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

type CliHost =
  | CliHost
    of string list
      * string
      * (unit -> Profiler)
      * (string -> Profiler -> unit)
      * (string -> string option)

let cliHostGetArgs (CliHost (args, _, _, _, _)) =
  args

let cliHostGetMiloneHome (CliHost (_, miloneHome, _, _, _)) =
  miloneHome

let cliHostGetProfileInit (CliHost (_, _, profileInit, _, _)) =
  profileInit

let cliHostGetProfileLog (CliHost (_, _, _, profileLog, _)) =
  profileLog

let cliHostGetFileReadAllText (CliHost (_, _, _, _, fileReadAllText)) =
  fileReadAllText

let cliHostWithArgs args (CliHost (_, miloneHome, profileInit, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithMiloneHome miloneHome (CliHost (args, _, profileInit, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithProfileInit profileInit (CliHost (args, miloneHome, _, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithProfileLog profileLog (CliHost (args, miloneHome, profileInit, _, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithFileReadAllText fileReadAllText (CliHost (args, miloneHome, profileInit, profileLog, _)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)
