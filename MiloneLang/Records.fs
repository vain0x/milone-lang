/// ## Records
///
/// Generated by scripts/RecordGen from `Records.yml`.
/// Run `./records` to regenerate.
///
/// Defines some types as synonym of tuple with getter/setter functions
/// because record types are unimplemented in milone-lang.
module rec MiloneLang.Records

open MiloneLang.Types

type KirToMirCtx =
  | KirToMirCtx
    of Serial
      * AssocMap<VarSerial, VarDef>
      * AssocMap<TySerial, TyDef>
      * FunSerial option
      * Serial
      * AssocMap<JointSerial, Label * VarSerial list>
      * MStmt list list
      * int
      * MStmt list
      * (Log * Loc) list

let kirToMirCtxGetSerial (KirToMirCtx (serial, _, _, _, _, _, _, _, _, _)) =
  serial

let kirToMirCtxGetVars (KirToMirCtx (_, vars, _, _, _, _, _, _, _, _)) =
  vars

let kirToMirCtxGetTys (KirToMirCtx (_, _, tys, _, _, _, _, _, _, _)) =
  tys

let kirToMirCtxGetMainFunSerial (KirToMirCtx (_, _, _, mainFunSerial, _, _, _, _, _, _)) =
  mainFunSerial

let kirToMirCtxGetLabelSerial (KirToMirCtx (_, _, _, _, labelSerial, _, _, _, _, _)) =
  labelSerial

let kirToMirCtxGetJointMap (KirToMirCtx (_, _, _, _, _, jointMap, _, _, _, _)) =
  jointMap

let kirToMirCtxGetLabels (KirToMirCtx (_, _, _, _, _, _, labels, _, _, _)) =
  labels

let kirToMirCtxGetLabelCount (KirToMirCtx (_, _, _, _, _, _, _, labelCount, _, _)) =
  labelCount

let kirToMirCtxGetStmts (KirToMirCtx (_, _, _, _, _, _, _, _, stmts, _)) =
  stmts

let kirToMirCtxGetLogs (KirToMirCtx (_, _, _, _, _, _, _, _, _, logs)) =
  logs

let kirToMirCtxWithSerial serial (KirToMirCtx (_, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithVars vars (KirToMirCtx (serial, _, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithTys tys (KirToMirCtx (serial, vars, _, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithMainFunSerial mainFunSerial (KirToMirCtx (serial, vars, tys, _, labelSerial, jointMap, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithLabelSerial labelSerial (KirToMirCtx (serial, vars, tys, mainFunSerial, _, jointMap, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithJointMap jointMap (KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, _, labels, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithLabels labels (KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, _, labelCount, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithLabelCount labelCount (KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, _, stmts, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithStmts stmts (KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, _, logs)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

let kirToMirCtxWithLogs logs (KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, _)): KirToMirCtx =
  KirToMirCtx (serial, vars, tys, mainFunSerial, labelSerial, jointMap, labels, labelCount, stmts, logs)

type MirCtx =
  | MirCtx
    of Serial
      * AssocMap<VarSerial, VarDef>
      * AssocMap<TySerial, TyDef>
      * Serial
      * (Label * VarSerial list) option
      * MStmt list
      * (Log * Loc) list

let mirCtxGetSerial (MirCtx (serial, _, _, _, _, _, _)) =
  serial

let mirCtxGetVars (MirCtx (_, vars, _, _, _, _, _)) =
  vars

let mirCtxGetTys (MirCtx (_, _, tys, _, _, _, _)) =
  tys

let mirCtxGetLabelSerial (MirCtx (_, _, _, labelSerial, _, _, _)) =
  labelSerial

let mirCtxGetCurrentFun (MirCtx (_, _, _, _, currentFun, _, _)) =
  currentFun

let mirCtxGetStmts (MirCtx (_, _, _, _, _, stmts, _)) =
  stmts

let mirCtxGetLogs (MirCtx (_, _, _, _, _, _, logs)) =
  logs

let mirCtxWithSerial serial (MirCtx (_, vars, tys, labelSerial, currentFun, stmts, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithVars vars (MirCtx (serial, _, tys, labelSerial, currentFun, stmts, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithTys tys (MirCtx (serial, vars, _, labelSerial, currentFun, stmts, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithLabelSerial labelSerial (MirCtx (serial, vars, tys, _, currentFun, stmts, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithCurrentFun currentFun (MirCtx (serial, vars, tys, labelSerial, _, stmts, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithStmts stmts (MirCtx (serial, vars, tys, labelSerial, currentFun, _, logs)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

let mirCtxWithLogs logs (MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, _)): MirCtx =
  MirCtx (serial, vars, tys, labelSerial, currentFun, stmts, logs)

type CirCtx =
  | CirCtx
    of AssocMap<VarSerial, VarDef>
      * AssocMap<VarSerial, Ident>
      * AssocMap<Ty, CTyInstance * CTy>
      * AssocMap<TySerial, TyDef>
      * AssocMap<Ty, Ident>
      * CStmt list
      * CDecl list
      * (Log * Loc) list

let cirCtxGetVars (CirCtx (vars, _, _, _, _, _, _, _)) =
  vars

let cirCtxGetVarUniqueNames (CirCtx (_, varUniqueNames, _, _, _, _, _, _)) =
  varUniqueNames

let cirCtxGetTyEnv (CirCtx (_, _, tyEnv, _, _, _, _, _)) =
  tyEnv

let cirCtxGetTys (CirCtx (_, _, _, tys, _, _, _, _)) =
  tys

let cirCtxGetTyUniqueNames (CirCtx (_, _, _, _, tyUniqueNames, _, _, _)) =
  tyUniqueNames

let cirCtxGetStmts (CirCtx (_, _, _, _, _, stmts, _, _)) =
  stmts

let cirCtxGetDecls (CirCtx (_, _, _, _, _, _, decls, _)) =
  decls

let cirCtxGetLogs (CirCtx (_, _, _, _, _, _, _, logs)) =
  logs

let cirCtxWithVars vars (CirCtx (_, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithVarUniqueNames varUniqueNames (CirCtx (vars, _, tyEnv, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTyEnv tyEnv (CirCtx (vars, varUniqueNames, _, tys, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTys tys (CirCtx (vars, varUniqueNames, tyEnv, _, tyUniqueNames, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithTyUniqueNames tyUniqueNames (CirCtx (vars, varUniqueNames, tyEnv, tys, _, stmts, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithStmts stmts (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, _, decls, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithDecls decls (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, _, logs)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

let cirCtxWithLogs logs (CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, _)): CirCtx =
  CirCtx (vars, varUniqueNames, tyEnv, tys, tyUniqueNames, stmts, decls, logs)

type CliHost =
  | CliHost
    of string list
      * string
      * (unit -> Profiler)
      * (string -> Profiler -> unit)
      * (string -> string option)

let cliHostGetArgs (CliHost (args, _, _, _, _)) =
  args

let cliHostGetMiloneHome (CliHost (_, miloneHome, _, _, _)) =
  miloneHome

let cliHostGetProfileInit (CliHost (_, _, profileInit, _, _)) =
  profileInit

let cliHostGetProfileLog (CliHost (_, _, _, profileLog, _)) =
  profileLog

let cliHostGetFileReadAllText (CliHost (_, _, _, _, fileReadAllText)) =
  fileReadAllText

let cliHostWithArgs args (CliHost (_, miloneHome, profileInit, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithMiloneHome miloneHome (CliHost (args, _, profileInit, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithProfileInit profileInit (CliHost (args, miloneHome, _, profileLog, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithProfileLog profileLog (CliHost (args, miloneHome, profileInit, _, fileReadAllText)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)

let cliHostWithFileReadAllText fileReadAllText (CliHost (args, miloneHome, profileInit, profileLog, _)): CliHost =
  CliHost (args, miloneHome, profileInit, profileLog, fileReadAllText)
