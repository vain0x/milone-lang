// This file describes a form of syntax tree of milone-lang source code in ungrammar.
// See <https://github.com/rust-analyzer/ungrammar> for ungrammar.
// (Not validated yet.)

// -----------------------------------------------
// Fragments
// -----------------------------------------------

Attr = '[<' Expr '>]'

Vis =
  'private'
| 'public'

Literal =
  'int_literal'
| 'float_literal'
| 'false' | 'true'
| 'char_literal'
| 'string_literal'

TyParamList = '<' ('ty_var' ',')* 'ty_var' '>'
TyArgList = '<' (Ty ',')* Ty '>'

ModulePath = ('ident' '.')* 'ident'

// -----------------------------------------------
// Type
// -----------------------------------------------

NameTy = ('ident' '.')* 'ident' TyArgList?
VarTy = 'ty_var'
ParenTy = '(' Ty ')'
SuffixTy = Ty 'ident'
TupleTy = (Ty '*')+ Ty
FunTy = Ty '->' Ty

// Term of type.
Ty =
  NameTy
| VarTy
| ParenTy
| SuffixTy
| TupleTy
| FunTy

// -----------------------------------------------
// Pattern
// -----------------------------------------------

LiteralPat = Literal
WildcardPat = '_'
VarPat = Vis? 'ident'
PathPat = Pat '.' 'ident' TyArgList?

UnitPat = '(' ')'
ParenPat = '(' Pat ')'
ListPat = '[' ((Pat ';'?)* Pat)? ']'
WrapPat = Pat Pat
ConsPat = Pat '::' Pat
AscribePat = Pat ':' Ty
TuplePat = (Pat ',')+ Pat
AsPat = Pat 'as' Pat
OrPat = Pat '|' Pat

// Term of pattern.
Pat =
  LiteralPat
| WildcardPat
| VarPat
| PathPat
| UnitPat
| ParenPat
| ListPat
| WrapPat
| ConsPat
| AscribePat
| TuplePat
| AsPat
| OrPat

// -----------------------------------------------
// Expression
// -----------------------------------------------

Unary = '-' | '&&'

Binary =
  '+'
| '-'
| '*'
| '/'
| '%'
| '**'
| '&&&'
| '|||'
| '^^^'
| '<<<'
| '>>>'
| '='
| '<>'
| '<'
| '<='
| '>'
| '>='
| '&&'
| '||'
| '|>'

LiteralExpr = Literal
NameExpr = 'ident' TyArgList?
PathExpr = Expr '.' 'ident' TyArgList?

UnitExpr = '(' ')'
ParenExpr = '(' Expr ')'
ListExpr = '[' ((Expr ';'?)* Expr)? ']'

WithClause = Expr 'with'
FieldInit = 'ident' '=' Expr
RecordExpr =
  '{'
    WithClause?
    (FieldInit ';'?)* FieldInit
  '}'

ElseClause = 'else' Expr
IfExpr = 'if' Expr 'then' Expr ElseClause?

GuardClause = 'when' Expr
Arm = '|'? Pat GuardClause? '->' Expr
MatchExpr = 'match' Expr 'with' Arm+

FunExpr = 'fun' Pat+ '->' Expr

IndexExpr = Expr '.' '[' Expr ']'
UnaryExpr = Unary Expr
AppExpr = Expr Expr
BinaryExpr = Expr Binary Expr
RangeExpr = Expr '..' Expr
TupleExpr = (Expr ',')+ Expr
AscribeExpr = Expr ':' Ty
BlockExpr = (Expr ';'?)+ Expr

LetValExpr = 'let' Pat '=' Expr 'in'? Expr

LetFunExpr =
    'let' 'rec'?
    Vis? 'ident' TyParamList? Pat+
    '=' Expr
    'in'? Expr



Expr =
  LiteralExpr
| NameExpr
| PathExpr
| UnitExpr
| ParenExpr
| ListExpr
| RecordExpr
| IfExpr
| MatchExpr
| FunExpr
| UnaryExpr
| IndexExpr
| SliceExpr
| AppExpr
| BinaryExpr
| AscribeExpr
| TupleExpr
| BlockExpr
| LetValExpr
| LetFunExpr

// -----------------------------------------------
// Declarations
// -----------------------------------------------

ExprDecl = Expr

LetValDecl = 'let' Pat '=' Expr

LetFunDecl =
  Attr? 'let' 'rec'?
  Vis? 'ident' TyParamList? Pat+
  '=' Expr



TySynonymDecl =
  'type' Vis? 'ident' TyParamList? '='
  Ty



LabeledTy = ('ident' ':')? Ty
VariantDecl = '|'? 'ident' ('of' (LabeledTy '*')* LabeledTy)?
UnionTyDecl =
  'type' Vis? 'ident' TyParamList? '='
  VariantDecl+



FieldDecl = 'ident' ':' Ty
RecordTyDecl =
  Attr?
  'type' Vis? 'ident' TyParamList? '='
  '{' (FieldDecl ';'?)* FieldDecl '}'



OpenDecl = 'open' ModulePath
ModuleSynonymDecl = 'module' 'ident' '=' ModulePath
ModuleDecl = 'module' 'rec'? Vis? 'ident' '=' Decl*



Decl =
  ExprDecl
| LetValDecl
| LetFunDecl
| TySynonymDecl
| UnionTyDecl
| RecordTyDecl
| OpenDecl
| ModuleSynonymDecl
| ModuleDecl



ModuleHead = 'module' 'rec'? ModulePath
Root = ModuleHead? Decl*
