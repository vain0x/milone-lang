# This file describes a form of syntax tree of milone-lang source code in ungrammar.
# See <https://github.com/rust-analyzer/ungrammar> for ungrammar.
# (Not validated yet.)

# ------------------------------------------------
# Misc
# ------------------------------------------------

# Visibility.
Vis =
| "public"
| "private"

# Path to symbol (value or type).
# IDENT is bare identifier tokens (such as `x`) or identifier tokens quoted by 2 backticks.
Path = (Path ".")? IDENT TyArgList?

# Path to module.
ModulePath = (ModulePath ".")? IDENT

# Attribute.
Attr = "[<" Expr ">]"

# Literal.
# NUMBER_LIT is any kind of integer or float literals, e.g. 0, 0xff, 6.02e+23.
# CHAR_LIT is single-quoted tokens, e.g. 'x'.
# STRING_LIT is double-quoted or triple-quoted tokens, e.g. "x", """...""".
Lit =
| NUMBER_LIT
| CHAR_LIT
| STRING_LIT
| "false"
| "true"

# ------------------------------------------------
# Type
# ------------------------------------------------

TyParamList = "<" (TY_IDENT ("," TY_IDENT)*)? ">"

TyArgList = "<" (Ty ("," Ty)*)? ">"

# Term of type.
Ty =
| Path
| "(" Ty ")"
| Ty "[]"
| Ty IDENT
| Ty ("*" Ty)+
| Ty "->" Ty



LabeledTy = (IDENT ":")? Ty

VariantDecl = IDENT ("of" LabeledTy ("*" LabeledTy)*)?

FieldDecl = IDENT ":" Ty

# Body of type declaration.
TyDeclBody =
| Ty
| "|"? VariantDecl ("|" VariantDecl)*
| "{" FieldDecl (";"? FieldDecl)* "}"

# ------------------------------------------------
# Pattern
# ------------------------------------------------

LitPat = Lit

VarPat = Vis? IDENT

# At least one dot is required to be distinct from VarPat.
PathPat = Path "." IDENT TyArgList?

UnitPat = "(" ")"
GroupPat = "(" Pat ")"
ListPat = "[" (Pat (";"? Pat)*)? "]"
AppPat = Pat Pat
TuplePat = Pat ("," Pat)+
ConsPat = Pat "::" Pat
AnnotatePat = Pat ":" Ty
AsPat = Pat "as" Vis? IDENT
OrPat = Pat "|" Pat

# Term of pattern.
Pat =
| LitPat
| VarPat
| PathPat
| UnitPat
| GroupPat
| ListPat
| AppPat
| TuplePat
| ConsPat
| AnnotatePat
| AsPat
| OrPat

# ------------------------------------------------
# Expression
# ------------------------------------------------

Unary =
| "-"

Binary =
| "+"
| "-"
| "*"
| "/"
| "%"
| "**"
| "&&&"
| "|||"
| "^^^"
| "<<<"
| ">>>"
| "="
| "<>"
| "<"
| "<="
| ">"
| ">="
| "&&"
| "||"
| "|>"

LitExpr = Lit
PathExpr = Path
UnitExpr = "(" ")"
GroupExpr = "(" Expr ")"
ListExpr = "[" (Expr (";"? Expr)*)? "]"

RecordExpr =
    "{"
        (Expr "with")?
        IDENT "=" Expr (";"? IDENT "=" Expr)*
    "}"

IfExpr = "if" Expr "then" Expr ("else" Expr)?

MatchArm = Pat ("when" Expr)? "->" Expr

MatchExpr = "match" Expr "with" "|"? MatchArm ("|" MatchArm)*

FunExpr = "fun" Pat+ "->" Expr

# Arithmetic expressions:

UnaryExpr = Unary Expr

FieldExpr = Expr "." IDENT

IndexExpr = Expr "." "[" Expr "]"

AppExpr = Expr Expr

RangeExpr = Expr (".." Expr)+

BinaryExpr = Expr Binary Expr

AnnotateExpr = Expr ":" Ty

TupleExpr = Expr ("," Expr)+

BlockExpr = Expr (";"? Expr)+

# Bindings:

LetValExpr = "let" Pat "=" Expr "in"? Expr

LetFunExpr =
    "let" "rec"?
    Vis? IDENT TyParamList? Pat+
    "=" Expr
    "in"? Expr

Expr =
| LitExpr
| PathExpr
| UnitExpr
| GroupExpr
| ListExpr
| RecordExpr
| IfExpr
| MatchExpr
| FunExpr
| UnaryExpr
| FieldExpr
| IndexExpr
| AppExpr
| RangeExpr
| BinaryExpr
| AnnotateExpr
| TupleExpr
| BlockExpr
| LetValExpr
| LetFunExpr

# ------------------------------------------------
# Declarations
# ------------------------------------------------

ExprDecl = Expr

LetValDecl = "let" Pat "=" Expr

LetFunDecl =
    "let" "rec"?
    Vis? IDENT TyParamList? Pat+
    "=" Expr

TyDecl = "type" Vis? IDENT TyParamList? "=" TyDeclBody

OpenDecl = "open" ModulePath

ModuleSynonymDecl = "module" IDENT "=" ModulePath

Decl =
| ExprDecl
| LetValDecl
| LetFunDecl
| TyDecl
| OpenDecl
| ModuleSynonymDecl



Header = "module" "rec" ModulePath

Program = Header? Decl*
