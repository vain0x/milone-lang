/// ## Records
///
/// Generated by scripts/RecordGen from `Records.yml`.
/// Run `./records` to regenerate.
///
/// Defines some types as synonym of tuple with getter/setter functions
/// because record types are unimplemented in milone-lang.
module rec MiloneLang.Records

open MiloneLang.Types

type ScopeCtx =
  (
    Serial
    * AssocMap<Serial, Ident>
    * AssocMap<VarSerial, VarDef>
    * AssocMap<VarSerial, LetDepth>
    * AssocMap<TySerial, TyDef>
    * AssocMap<TySerial, LetDepth>
    * ScopeSerial
    * Scope
    * LetDepth
  )

let scopeCtxGetSerial ((serial, _, _, _, _, _, _, _, _): ScopeCtx) =
  serial

let scopeCtxGetNameMap ((_, nameMap, _, _, _, _, _, _, _): ScopeCtx) =
  nameMap

let scopeCtxGetVars ((_, _, vars, _, _, _, _, _, _): ScopeCtx) =
  vars

let scopeCtxGetVarDepths ((_, _, _, varDepths, _, _, _, _, _): ScopeCtx) =
  varDepths

let scopeCtxGetTys ((_, _, _, _, tys, _, _, _, _): ScopeCtx) =
  tys

let scopeCtxGetTyDepths ((_, _, _, _, _, tyDepths, _, _, _): ScopeCtx) =
  tyDepths

let scopeCtxGetLocalSerial ((_, _, _, _, _, _, localSerial, _, _): ScopeCtx) =
  localSerial

let scopeCtxGetLocal ((_, _, _, _, _, _, _, local, _): ScopeCtx) =
  local

let scopeCtxGetLetDepth ((_, _, _, _, _, _, _, _, letDepth): ScopeCtx) =
  letDepth

let scopeCtxWithSerial serial ((_, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithNameMap nameMap ((serial, _, vars, varDepths, tys, tyDepths, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithVars vars ((serial, nameMap, _, varDepths, tys, tyDepths, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithVarDepths varDepths ((serial, nameMap, vars, _, tys, tyDepths, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithTys tys ((serial, nameMap, vars, varDepths, _, tyDepths, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithTyDepths tyDepths ((serial, nameMap, vars, varDepths, tys, _, localSerial, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithLocalSerial localSerial ((serial, nameMap, vars, varDepths, tys, tyDepths, _, local, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithLocal local ((serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, _, letDepth): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

let scopeCtxWithLetDepth letDepth ((serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, _): ScopeCtx): ScopeCtx =
  serial, nameMap, vars, varDepths, tys, tyDepths, localSerial, local, letDepth

type TyContext =
  (
    Serial
    * AssocMap<TySerial, TyDef>
    * AssocMap<TySerial, LetDepth>
  )

let tyContextGetSerial ((serial, _, _): TyContext) =
  serial

let tyContextGetTys ((_, tys, _): TyContext) =
  tys

let tyContextGetTyDepths ((_, _, tyDepths): TyContext) =
  tyDepths

let tyContextWithSerial serial ((_, tys, tyDepths): TyContext): TyContext =
  serial, tys, tyDepths

let tyContextWithTys tys ((serial, _, tyDepths): TyContext): TyContext =
  serial, tys, tyDepths

let tyContextWithTyDepths tyDepths ((serial, tys, _): TyContext): TyContext =
  serial, tys, tyDepths

type TyCtx =
  (
    Serial
    * AssocMap<VarSerial, VarDef>
    * AssocMap<TySerial, TyDef>
    * AssocMap<TySerial, LetDepth>
    * LetDepth
    * (Trait * Loc) list
    * (Log * Loc) list
  )

let tyCtxGetSerial ((serial, _, _, _, _, _, _): TyCtx) =
  serial

let tyCtxGetVars ((_, vars, _, _, _, _, _): TyCtx) =
  vars

let tyCtxGetTys ((_, _, tys, _, _, _, _): TyCtx) =
  tys

let tyCtxGetTyDepths ((_, _, _, tyDepths, _, _, _): TyCtx) =
  tyDepths

let tyCtxGetLetDepth ((_, _, _, _, letDepth, _, _): TyCtx) =
  letDepth

let tyCtxGetTraitBounds ((_, _, _, _, _, traitBounds, _): TyCtx) =
  traitBounds

let tyCtxGetLogs ((_, _, _, _, _, _, logs): TyCtx) =
  logs

let tyCtxWithSerial serial ((_, vars, tys, tyDepths, letDepth, traitBounds, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithVars vars ((serial, _, tys, tyDepths, letDepth, traitBounds, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithTys tys ((serial, vars, _, tyDepths, letDepth, traitBounds, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithTyDepths tyDepths ((serial, vars, tys, _, letDepth, traitBounds, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithLetDepth letDepth ((serial, vars, tys, tyDepths, _, traitBounds, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithTraitBounds traitBounds ((serial, vars, tys, tyDepths, letDepth, _, logs): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs

let tyCtxWithLogs logs ((serial, vars, tys, tyDepths, letDepth, traitBounds, _): TyCtx): TyCtx =
  serial, vars, tys, tyDepths, letDepth, traitBounds, logs
