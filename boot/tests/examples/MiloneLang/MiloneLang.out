FILE MiloneLang/Lexing.fs
module (29, 0)
rec (29, 7)
MiloneLang (29, 11)
. (29, 21)
Lexing (29, 22)
open (31, 0)
MiloneLang (31, 5)
. (31, 15)
Types (31, 16)
open (32, 0)
MiloneLang (32, 5)
. (32, 15)
Helpers (32, 16)
type (35, 0)
TokenizeCtx (35, 5)
= (35, 17)
string (35, 19)
* (35, 26)
int (35, 28)
* (35, 32)
Loc (35, 34)
* (35, 38)
( (35, 40)
Token (35, 41)
* (35, 47)
Loc (35, 49)
) (35, 52)
list (35, 54)
let (39, 0)
locShift (39, 4)
( (39, 13)
text (39, 14)
: (39, 18)
string (39, 20)
) (39, 26)
( (39, 28)
l (39, 29)
: (39, 30)
int (39, 32)
) (39, 35)
( (39, 37)
r (39, 38)
: (39, 39)
int (39, 41)
) (39, 44)
( (39, 46)
( (39, 47)
y (39, 48)
, (39, 49)
x (39, 51)
) (39, 52)
: (39, 53)
Loc (39, 55)
) (39, 58)
= (39, 60)
assert (40, 2)
( (40, 9)
0 (40, 10)
<= (40, 12)
l (40, 15)
&& (40, 17)
l (40, 20)
<= (40, 22)
r (40, 25)
&& (40, 27)
r (40, 30)
<= (40, 32)
text (40, 35)
. (40, 39)
Length (40, 40)
) (40, 46)
let (41, 2)
rec (41, 6)
go (41, 10)
y (41, 13)
x (41, 15)
i (41, 17)
= (41, 19)
if (42, 4)
i (42, 7)
= (42, 9)
r (42, 11)
then (42, 13)
y (43, 6)
, (43, 7)
x (43, 9)
else (44, 4)
if (44, 9)
text (44, 12)
. (44, 16)
[ (44, 17)
i (44, 18)
] (44, 19)
= (44, 21)
'\n' (44, 23)
then (44, 28)
go (45, 6)
( (45, 9)
y (45, 10)
+ (45, 12)
1 (45, 14)
) (45, 15)
0 (45, 17)
( (45, 19)
i (45, 20)
+ (45, 22)
1 (45, 24)
) (45, 25)
else (46, 4)
go (47, 6)
y (47, 9)
( (47, 11)
x (47, 12)
+ (47, 14)
1 (47, 16)
) (47, 17)
( (47, 19)
i (47, 20)
+ (47, 22)
1 (47, 24)
) (47, 25)
go (48, 2)
y (48, 5)
x (48, 7)
l (48, 9)
let (54, 0)
charNull (54, 4)
: (54, 12)
char (54, 14)
= (54, 19)
char (54, 21)
0 (54, 26)
let (56, 0)
charIsIdent (56, 4)
( (56, 16)
c (56, 17)
: (56, 18)
char (56, 20)
) (56, 24)
: (56, 25)
bool (56, 27)
= (56, 32)
c (57, 2)
= (57, 4)
'_' (57, 6)
|| (57, 10)
charIsDigit (57, 13)
c (57, 25)
|| (57, 27)
charIsAlpha (57, 30)
c (57, 42)
let (59, 0)
charIsOp (59, 4)
( (59, 13)
c (59, 14)
: (59, 15)
char (59, 17)
) (59, 21)
: (59, 22)
bool (59, 24)
= (59, 29)
c (60, 2)
= (60, 4)
'+' (60, 6)
|| (60, 10)
c (60, 13)
= (60, 15)
'-' (60, 17)
|| (60, 21)
c (60, 24)
= (60, 26)
'*' (60, 28)
|| (60, 32)
c (60, 35)
= (60, 37)
'/' (60, 39)
|| (60, 43)
c (60, 46)
= (60, 48)
'%' (60, 50)
|| (60, 54)
c (61, 2)
= (61, 4)
'=' (61, 6)
|| (61, 10)
c (61, 13)
= (61, 15)
'<' (61, 17)
|| (61, 21)
c (61, 24)
= (61, 26)
'>' (61, 28)
|| (61, 32)
c (61, 35)
= (61, 37)
'^' (61, 39)
|| (61, 43)
c (61, 46)
= (61, 48)
'&' (61, 50)
|| (61, 54)
c (62, 2)
= (62, 4)
'|' (62, 6)
|| (62, 10)
c (62, 13)
= (62, 15)
':' (62, 17)
|| (62, 21)
c (62, 24)
= (62, 26)
'@' (62, 28)
|| (62, 32)
c (62, 35)
= (62, 37)
';' (62, 39)
|| (62, 43)
c (62, 46)
= (62, 48)
'.' (62, 50)
let (64, 0)
charIsPun (64, 4)
( (64, 14)
c (64, 15)
: (64, 16)
char (64, 18)
) (64, 22)
: (64, 23)
bool (64, 25)
= (64, 30)
c (65, 2)
= (65, 4)
',' (65, 6)
|| (65, 10)
c (65, 13)
= (65, 15)
'(' (65, 17)
|| (65, 21)
c (65, 24)
= (65, 26)
')' (65, 28)
|| (65, 32)
c (65, 35)
= (65, 37)
'[' (65, 39)
|| (65, 43)
c (65, 46)
= (65, 48)
']' (65, 50)
let (72, 0)
strIsFollowedBy (72, 4)
( (72, 20)
i (72, 21)
: (72, 22)
int (72, 24)
) (72, 27)
( (72, 29)
prefix (72, 30)
: (72, 36)
string (72, 38)
) (72, 44)
( (72, 46)
s (72, 47)
: (72, 48)
string (72, 50)
) (72, 56)
: (72, 57)
bool (72, 59)
= (72, 64)
let (74, 2)
rec (74, 6)
go (74, 10)
pi (74, 13)
si (74, 16)
= (74, 19)
pi (75, 4)
= (75, 7)
prefix (75, 9)
. (75, 15)
Length (75, 16)
|| (75, 23)
( (75, 26)
si (76, 6)
< (76, 9)
s (76, 11)
. (76, 12)
Length (76, 13)
&& (77, 6)
prefix (77, 9)
. (77, 15)
[ (77, 16)
pi (77, 17)
] (77, 19)
= (77, 21)
s (77, 23)
. (77, 24)
[ (77, 25)
si (77, 26)
] (77, 28)
&& (78, 6)
go (78, 9)
( (78, 12)
pi (78, 13)
+ (78, 16)
1 (78, 18)
) (78, 19)
( (78, 21)
si (78, 22)
+ (78, 25)
1 (78, 27)
) (78, 28)
) (79, 4)
i (80, 2)
+ (80, 4)
prefix (80, 6)
. (80, 12)
Length (80, 13)
<= (80, 20)
s (80, 23)
. (80, 24)
Length (80, 25)
&& (80, 32)
go (80, 35)
0 (80, 38)
i (80, 40)
let (83, 0)
strIsFollowedByRawQuotes (83, 4)
( (83, 29)
i (83, 30)
: (83, 31)
int (83, 33)
) (83, 36)
( (83, 38)
s (83, 39)
: (83, 40)
string (83, 42)
) (83, 48)
: (83, 49)
bool (83, 51)
= (83, 56)
strIsFollowedBy (84, 2)
i (84, 18)
"\"\"\"" (84, 20)
s (84, 29)
let (90, 0)
scanError (90, 4)
( (90, 14)
_ (90, 15)
: (90, 16)
string (90, 18)
) (90, 24)
( (90, 26)
i (90, 27)
: (90, 28)
int (90, 30)
) (90, 33)
= (90, 35)
i (92, 2)
+ (92, 4)
1 (92, 6)
let (94, 0)
lookEof (94, 4)
( (94, 12)
text (94, 13)
: (94, 17)
string (94, 19)
) (94, 25)
( (94, 27)
i (94, 28)
: (94, 29)
int (94, 31)
) (94, 34)
= (94, 36)
i (95, 2)
>= (95, 4)
text (95, 7)
. (95, 11)
Length (95, 12)
let (98, 0)
lookSpace (98, 4)
( (98, 14)
text (98, 15)
: (98, 19)
string (98, 21)
) (98, 27)
( (98, 29)
i (98, 30)
: (98, 31)
int (98, 33)
) (98, 36)
= (98, 38)
text (99, 2)
. (99, 6)
[ (99, 7)
i (99, 8)
] (99, 9)
|> (99, 11)
charIsSpace (99, 14)
let (102, 0)
scanSpace (102, 4)
( (102, 14)
text (102, 15)
: (102, 19)
string (102, 21)
) (102, 27)
( (102, 29)
i (102, 30)
: (102, 31)
int (102, 33)
) (102, 36)
= (102, 38)
assert (103, 2)
( (103, 9)
lookSpace (103, 10)
text (103, 20)
i (103, 25)
) (103, 26)
let (104, 2)
rec (104, 6)
go (104, 10)
i (104, 13)
= (104, 15)
if (105, 4)
i (105, 7)
< (105, 9)
text (105, 11)
. (105, 15)
Length (105, 16)
&& (105, 23)
text (105, 26)
. (105, 30)
[ (105, 31)
i (105, 32)
] (105, 33)
|> (105, 35)
charIsSpace (105, 38)
then (105, 50)
go (106, 6)
( (106, 9)
i (106, 10)
+ (106, 12)
1 (106, 14)
) (106, 15)
else (107, 4)
i (108, 6)
go (109, 2)
i (109, 5)
let (111, 0)
lookComment (111, 4)
( (111, 16)
text (111, 17)
: (111, 21)
string (111, 23)
) (111, 29)
( (111, 31)
i (111, 32)
: (111, 33)
int (111, 35)
) (111, 38)
= (111, 40)
text (113, 2)
|> (113, 7)
strIsFollowedBy (113, 10)
i (113, 26)
"//" (113, 28)
|| (114, 2)
text (114, 5)
|> (114, 10)
strIsFollowedBy (114, 13)
i (114, 29)
"[<" (114, 31)
let (116, 0)
scanLine (116, 4)
( (116, 13)
text (116, 14)
: (116, 18)
string (116, 20)
) (116, 26)
( (116, 28)
i (116, 29)
: (116, 30)
int (116, 32)
) (116, 35)
= (116, 37)
assert (117, 2)
( (117, 9)
lookComment (117, 10)
text (117, 22)
i (117, 27)
) (117, 28)
let (118, 2)
rec (118, 6)
go (118, 10)
i (118, 13)
= (118, 15)
if (119, 4)
i (119, 7)
= (119, 9)
text (119, 11)
. (119, 15)
Length (119, 16)
then (119, 23)
i (120, 6)
else (121, 4)
if (121, 9)
text (121, 12)
. (121, 16)
[ (121, 17)
i (121, 18)
] (121, 19)
= (121, 21)
'\n' (121, 23)
then (121, 28)
i (122, 6)
+ (122, 8)
1 (122, 10)
else (123, 4)
go (124, 6)
( (124, 9)
i (124, 10)
+ (124, 12)
1 (124, 14)
) (124, 15)
go (125, 2)
i (125, 5)
let (127, 0)
lookPun (127, 4)
( (127, 12)
text (127, 13)
: (127, 17)
string (127, 19)
) (127, 25)
( (127, 27)
i (127, 28)
: (127, 29)
int (127, 31)
) (127, 34)
= (127, 36)
text (128, 2)
. (128, 6)
[ (128, 7)
i (128, 8)
] (128, 9)
|> (128, 11)
charIsPun (128, 14)
let (130, 0)
scanPun (130, 4)
( (130, 12)
text (130, 13)
: (130, 17)
string (130, 19)
) (130, 25)
( (130, 27)
i (130, 28)
: (130, 29)
int (130, 31)
) (130, 34)
= (130, 36)
assert (131, 2)
( (131, 9)
lookPun (131, 10)
text (131, 18)
i (131, 23)
) (131, 24)
i (132, 2)
+ (132, 4)
1 (132, 6)
let (134, 0)
lookOp (134, 4)
( (134, 11)
text (134, 12)
: (134, 16)
string (134, 18)
) (134, 24)
( (134, 26)
i (134, 27)
: (134, 28)
int (134, 30)
) (134, 33)
= (134, 35)
text (135, 2)
. (135, 6)
[ (135, 7)
i (135, 8)
] (135, 9)
|> (135, 11)
charIsOp (135, 14)
let (137, 0)
scanOp (137, 4)
( (137, 11)
text (137, 12)
: (137, 16)
string (137, 18)
) (137, 24)
( (137, 26)
i (137, 27)
: (137, 28)
int (137, 30)
) (137, 33)
= (137, 35)
assert (138, 2)
( (138, 9)
lookOp (138, 10)
text (138, 17)
i (138, 22)
) (138, 23)
let (139, 2)
rec (139, 6)
go (139, 10)
i (139, 13)
= (139, 15)
if (140, 4)
i (140, 7)
< (140, 9)
text (140, 11)
. (140, 15)
Length (140, 16)
&& (140, 23)
text (140, 26)
. (140, 30)
[ (140, 31)
i (140, 32)
] (140, 33)
|> (140, 35)
charIsOp (140, 38)
then (140, 47)
go (141, 6)
( (141, 9)
i (141, 10)
+ (141, 12)
1 (141, 14)
) (141, 15)
else (142, 4)
i (143, 6)
go (144, 2)
i (144, 5)
let (146, 0)
lookIdent (146, 4)
( (146, 14)
text (146, 15)
: (146, 19)
string (146, 21)
) (146, 27)
( (146, 29)
i (146, 30)
: (146, 31)
int (146, 33)
) (146, 36)
= (146, 38)
text (147, 2)
. (147, 6)
[ (147, 7)
i (147, 8)
] (147, 9)
|> (147, 11)
charIsIdent (147, 14)
&& (148, 2)
text (148, 5)
. (148, 9)
[ (148, 10)
i (148, 11)
] (148, 12)
|> (148, 14)
charIsDigit (148, 17)
|> (148, 29)
not (148, 32)
let (150, 0)
scanIdent (150, 4)
( (150, 14)
text (150, 15)
: (150, 19)
string (150, 21)
) (150, 27)
( (150, 29)
i (150, 30)
: (150, 31)
int (150, 33)
) (150, 36)
= (150, 38)
assert (151, 2)
( (151, 9)
lookIdent (151, 10)
text (151, 20)
i (151, 25)
) (151, 26)
let (152, 2)
rec (152, 6)
go (152, 10)
i (152, 13)
= (152, 15)
if (153, 4)
i (153, 7)
< (153, 9)
text (153, 11)
. (153, 15)
Length (153, 16)
&& (153, 23)
text (153, 26)
. (153, 30)
[ (153, 31)
i (153, 32)
] (153, 33)
|> (153, 35)
charIsIdent (153, 38)
then (153, 50)
go (154, 6)
( (154, 9)
i (154, 10)
+ (154, 12)
1 (154, 14)
) (154, 15)
else (155, 4)
i (156, 6)
go (157, 2)
i (157, 5)
let (159, 0)
lookIntLit (159, 4)
( (159, 15)
text (159, 16)
: (159, 20)
string (159, 22)
) (159, 28)
( (159, 30)
i (159, 31)
: (159, 32)
int (159, 34)
) (159, 37)
= (159, 39)
text (160, 2)
. (160, 6)
[ (160, 7)
i (160, 8)
] (160, 9)
|> (160, 11)
charIsDigit (160, 14)
let (162, 0)
scanIntLit (162, 4)
( (162, 15)
text (162, 16)
: (162, 20)
string (162, 22)
) (162, 28)
( (162, 30)
i (162, 31)
: (162, 32)
int (162, 34)
) (162, 37)
= (162, 39)
assert (163, 2)
( (163, 9)
lookIntLit (163, 10)
text (163, 21)
i (163, 26)
) (163, 27)
let (164, 2)
rec (164, 6)
go (164, 10)
i (164, 13)
= (164, 15)
if (165, 4)
i (165, 7)
< (165, 9)
text (165, 11)
. (165, 15)
Length (165, 16)
&& (165, 23)
text (165, 26)
. (165, 30)
[ (165, 31)
i (165, 32)
] (165, 33)
|> (165, 35)
charIsDigit (165, 38)
then (165, 50)
go (166, 6)
( (166, 9)
i (166, 10)
+ (166, 12)
1 (166, 14)
) (166, 15)
else (167, 4)
i (168, 6)
go (169, 2)
i (169, 5)
let (171, 0)
lookCharLit (171, 4)
( (171, 16)
text (171, 17)
: (171, 21)
string (171, 23)
) (171, 29)
( (171, 31)
i (171, 32)
: (171, 33)
int (171, 35)
) (171, 38)
= (171, 40)
text (172, 2)
. (172, 6)
[ (172, 7)
i (172, 8)
] (172, 9)
= (172, 11)
'\'' (172, 13)
let (174, 0)
scanCharLit (174, 4)
( (174, 16)
text (174, 17)
: (174, 21)
string (174, 23)
) (174, 29)
( (174, 31)
i (174, 32)
: (174, 33)
int (174, 35)
) (174, 38)
= (174, 40)
assert (175, 2)
( (175, 9)
lookCharLit (175, 10)
text (175, 22)
i (175, 27)
) (175, 28)
let (176, 2)
rec (176, 6)
go (176, 10)
i (176, 13)
= (176, 15)
if (177, 4)
i (177, 7)
+ (177, 9)
1 (177, 11)
< (177, 13)
text (177, 15)
. (177, 19)
Length (177, 20)
&& (177, 27)
text (177, 30)
. (177, 34)
[ (177, 35)
i (177, 36)
] (177, 37)
= (177, 39)
'\\' (177, 41)
then (177, 46)
go (179, 6)
( (179, 9)
i (179, 10)
+ (179, 12)
2 (179, 14)
) (179, 15)
else (180, 4)
if (180, 9)
i (180, 12)
< (180, 14)
text (180, 16)
. (180, 20)
Length (180, 21)
&& (180, 28)
text (180, 31)
. (180, 35)
[ (180, 36)
i (180, 37)
] (180, 38)
= (180, 40)
'\'' (180, 42)
then (180, 47)
true (182, 6)
, (182, 10)
i (182, 12)
+ (182, 14)
1 (182, 16)
else (183, 4)
if (183, 9)
i (183, 12)
< (183, 14)
text (183, 16)
. (183, 20)
Length (183, 21)
&& (183, 28)
text (183, 31)
. (183, 35)
[ (183, 36)
i (183, 37)
] (183, 38)
<> (183, 40)
'\n' (183, 43)
then (183, 48)
go (185, 6)
( (185, 9)
i (185, 10)
+ (185, 12)
1 (185, 14)
) (185, 15)
else (186, 4)
assert (188, 6)
( (188, 13)
i (188, 14)
= (188, 16)
text (188, 18)
. (188, 22)
Length (188, 23)
|| (188, 30)
text (188, 33)
. (188, 37)
[ (188, 38)
i (188, 39)
] (188, 40)
= (188, 42)
'\n' (188, 44)
) (188, 48)
false (189, 6)
, (189, 11)
i (189, 13)
go (190, 2)
( (190, 5)
i (190, 6)
+ (190, 8)
1 (190, 10)
) (190, 11)
let (192, 0)
lookStrLit (192, 4)
( (192, 15)
text (192, 16)
: (192, 20)
string (192, 22)
) (192, 28)
( (192, 30)
i (192, 31)
: (192, 32)
int (192, 34)
) (192, 37)
= (192, 39)
text (193, 2)
. (193, 6)
[ (193, 7)
i (193, 8)
] (193, 9)
= (193, 11)
'\"' (193, 13)
let (195, 0)
scanStrLit (195, 4)
( (195, 15)
text (195, 16)
: (195, 20)
string (195, 22)
) (195, 28)
( (195, 30)
i (195, 31)
: (195, 32)
int (195, 34)
) (195, 37)
= (195, 39)
assert (196, 2)
( (196, 9)
lookStrLit (196, 10)
text (196, 21)
i (196, 26)
) (196, 27)
let (197, 2)
rec (197, 6)
go (197, 10)
i (197, 13)
= (197, 15)
if (198, 4)
i (198, 7)
+ (198, 9)
1 (198, 11)
< (198, 13)
text (198, 15)
. (198, 19)
Length (198, 20)
&& (198, 27)
text (198, 30)
. (198, 34)
[ (198, 35)
i (198, 36)
] (198, 37)
= (198, 39)
'\\' (198, 41)
then (198, 46)
go (200, 6)
( (200, 9)
i (200, 10)
+ (200, 12)
2 (200, 14)
) (200, 15)
else (201, 4)
if (201, 9)
i (201, 12)
< (201, 14)
text (201, 16)
. (201, 20)
Length (201, 21)
&& (201, 28)
text (201, 31)
. (201, 35)
[ (201, 36)
i (201, 37)
] (201, 38)
= (201, 40)
'\"' (201, 42)
then (201, 46)
true (203, 6)
, (203, 10)
i (203, 12)
+ (203, 14)
1 (203, 16)
else (204, 4)
if (204, 9)
i (204, 12)
< (204, 14)
text (204, 16)
. (204, 20)
Length (204, 21)
&& (204, 28)
text (204, 31)
. (204, 35)
[ (204, 36)
i (204, 37)
] (204, 38)
<> (204, 40)
'\n' (204, 43)
then (204, 48)
go (206, 6)
( (206, 9)
i (206, 10)
+ (206, 12)
1 (206, 14)
) (206, 15)
else (207, 4)
assert (209, 6)
( (209, 13)
i (209, 14)
= (209, 16)
text (209, 18)
. (209, 22)
Length (209, 23)
|| (209, 30)
text (209, 33)
. (209, 37)
[ (209, 38)
i (209, 39)
] (209, 40)
= (209, 42)
'\n' (209, 44)
) (209, 48)
false (210, 6)
, (210, 11)
i (210, 13)
go (211, 2)
( (211, 5)
i (211, 6)
+ (211, 8)
1 (211, 10)
) (211, 11)
let (213, 0)
lookStrLitRaw (213, 4)
( (213, 18)
text (213, 19)
: (213, 23)
string (213, 25)
) (213, 31)
( (213, 33)
i (213, 34)
: (213, 35)
int (213, 37)
) (213, 40)
= (213, 42)
text (214, 2)
|> (214, 7)
strIsFollowedByRawQuotes (214, 10)
i (214, 35)
let (216, 0)
scanStrLitRaw (216, 4)
( (216, 18)
text (216, 19)
: (216, 23)
string (216, 25)
) (216, 31)
( (216, 33)
i (216, 34)
: (216, 35)
int (216, 37)
) (216, 40)
= (216, 42)
assert (217, 2)
( (217, 9)
lookStrLitRaw (217, 10)
text (217, 24)
i (217, 29)
) (217, 30)
let (218, 2)
rec (218, 6)
go (218, 10)
i (218, 13)
= (218, 15)
if (219, 4)
text (219, 7)
|> (219, 12)
strIsFollowedByRawQuotes (219, 15)
i (219, 40)
then (219, 42)
true (220, 6)
, (220, 10)
i (220, 12)
+ (220, 14)
3 (220, 16)
else (221, 4)
if (221, 9)
i (221, 12)
+ (221, 14)
1 (221, 16)
< (221, 18)
text (221, 20)
. (221, 24)
Length (221, 25)
then (221, 32)
go (222, 6)
( (222, 9)
i (222, 10)
+ (222, 12)
1 (222, 14)
) (222, 15)
else (223, 4)
assert (224, 6)
( (224, 13)
i (224, 14)
= (224, 16)
text (224, 18)
. (224, 22)
Length (224, 23)
) (224, 29)
false (225, 6)
, (225, 11)
i (225, 13)
go (226, 2)
( (226, 5)
i (226, 6)
+ (226, 8)
3 (226, 10)
) (226, 11)
let (232, 0)
tokenFromIdent (232, 4)
( (232, 19)
text (232, 20)
: (232, 24)
string (232, 26)
) (232, 32)
l (232, 34)
r (232, 36)
: (232, 37)
Token (232, 39)
= (232, 45)
match (233, 2)
text (233, 8)
|> (233, 13)
strSlice (233, 16)
l (233, 25)
r (233, 27)
with (233, 29)
| (234, 2)
"true" (234, 4)
-> (234, 11)
Token (235, 4)
. (235, 9)
Bool (235, 10)
true (235, 15)
| (236, 2)
"false" (236, 4)
-> (236, 12)
Token (237, 4)
. (237, 9)
Bool (237, 10)
false (237, 15)
| (238, 2)
"do" (238, 4)
-> (238, 9)
Token (239, 4)
. (239, 9)
Do (239, 10)
| (240, 2)
"let" (240, 4)
-> (240, 10)
Token (241, 4)
. (241, 9)
Let (241, 10)
| (242, 2)
"if" (242, 4)
-> (242, 9)
Token (243, 4)
. (243, 9)
If (243, 10)
| (244, 2)
"then" (244, 4)
-> (244, 11)
Token (245, 4)
. (245, 9)
Then (245, 10)
| (246, 2)
"else" (246, 4)
-> (246, 11)
Token (247, 4)
. (247, 9)
Else (247, 10)
| (248, 2)
"match" (248, 4)
-> (248, 12)
Token (249, 4)
. (249, 9)
Match (249, 10)
| (250, 2)
"with" (250, 4)
-> (250, 11)
Token (251, 4)
. (251, 9)
With (251, 10)
| (252, 2)
"as" (252, 4)
-> (252, 9)
Token (253, 4)
. (253, 9)
As (253, 10)
| (254, 2)
"when" (254, 4)
-> (254, 11)
Token (255, 4)
. (255, 9)
When (255, 10)
| (256, 2)
"rec" (256, 4)
-> (256, 10)
Token (257, 4)
. (257, 9)
Rec (257, 10)
| (258, 2)
"private" (258, 4)
-> (258, 14)
Token (259, 4)
. (259, 9)
Private (259, 10)
| (260, 2)
"internal" (260, 4)
-> (260, 15)
Token (261, 4)
. (261, 9)
Internal (261, 10)
| (262, 2)
"public" (262, 4)
-> (262, 13)
Token (263, 4)
. (263, 9)
Public (263, 10)
| (264, 2)
"module" (264, 4)
-> (264, 13)
Token (265, 4)
. (265, 9)
Module (265, 10)
| (266, 2)
"namespace" (266, 4)
-> (266, 16)
Token (267, 4)
. (267, 9)
Namespace (267, 10)
| (268, 2)
"open" (268, 4)
-> (268, 11)
Token (269, 4)
. (269, 9)
Open (269, 10)
| (270, 2)
"type" (270, 4)
-> (270, 11)
Token (271, 4)
. (271, 9)
Type (271, 10)
| (272, 2)
"of" (272, 4)
-> (272, 9)
Token (273, 4)
. (273, 9)
Of (273, 10)
| (274, 2)
"fun" (274, 4)
-> (274, 10)
Token (275, 4)
. (275, 9)
Fun (275, 10)
| (276, 2)
"in" (276, 4)
-> (276, 9)
Token (277, 4)
. (277, 9)
In (277, 10)
| (278, 2)
s (278, 4)
-> (278, 6)
Token (279, 4)
. (279, 9)
Ident (279, 10)
s (279, 16)
let (281, 0)
tokenFromOp (281, 4)
( (281, 16)
text (281, 17)
: (281, 21)
string (281, 23)
) (281, 29)
l (281, 31)
r (281, 33)
: (281, 34)
Token (281, 36)
= (281, 42)
match (282, 2)
text (282, 8)
|> (282, 13)
strSlice (282, 16)
l (282, 25)
r (282, 27)
with (282, 29)
| (283, 2)
"&" (283, 4)
-> (283, 8)
Token (284, 4)
. (284, 9)
Amp (284, 10)
| (285, 2)
"&&" (285, 4)
-> (285, 9)
Token (286, 4)
. (286, 9)
AmpAmp (286, 10)
| (287, 2)
"->" (287, 4)
-> (287, 9)
Token (288, 4)
. (288, 9)
Arrow (288, 10)
| (289, 2)
":" (289, 4)
-> (289, 8)
Token (290, 4)
. (290, 9)
Colon (290, 10)
| (291, 2)
"::" (291, 4)
-> (291, 9)
Token (292, 4)
. (292, 9)
ColonColon (292, 10)
| (293, 2)
"." (293, 4)
-> (293, 8)
Token (294, 4)
. (294, 9)
Dot (294, 10)
| (295, 2)
".." (295, 4)
-> (295, 9)
Token (296, 4)
. (296, 9)
DotDot (296, 10)
| (297, 2)
"=" (297, 4)
-> (297, 8)
Token (298, 4)
. (298, 9)
Eq (298, 10)
| (299, 2)
">" (299, 4)
-> (299, 8)
Token (300, 4)
. (300, 9)
Gt (300, 10)
| (301, 2)
">=" (301, 4)
-> (301, 9)
Token (302, 4)
. (302, 9)
GtEq (302, 10)
| (303, 2)
"<" (303, 4)
-> (303, 8)
Token (304, 4)
. (304, 9)
Lt (304, 10)
| (305, 2)
"<=" (305, 4)
-> (305, 9)
Token (306, 4)
. (306, 9)
LtEq (306, 10)
| (307, 2)
"<>" (307, 4)
-> (307, 9)
Token (308, 4)
. (308, 9)
LtGt (308, 10)
| (309, 2)
"-" (309, 4)
-> (309, 8)
Token (310, 4)
. (310, 9)
Minus (310, 10)
| (311, 2)
"%" (311, 4)
-> (311, 8)
Token (312, 4)
. (312, 9)
Percent (312, 10)
| (313, 2)
"|" (313, 4)
-> (313, 8)
Token (314, 4)
. (314, 9)
Pipe (314, 10)
| (315, 2)
"|>" (315, 4)
-> (315, 9)
Token (316, 4)
. (316, 9)
PipeGt (316, 10)
| (317, 2)
"||" (317, 4)
-> (317, 9)
Token (318, 4)
. (318, 9)
PipePipe (318, 10)
| (319, 2)
"+" (319, 4)
-> (319, 8)
Token (320, 4)
. (320, 9)
Plus (320, 10)
| (321, 2)
";" (321, 4)
-> (321, 8)
Token (322, 4)
. (322, 9)
Semi (322, 10)
| (323, 2)
"*" (323, 4)
-> (323, 8)
Token (324, 4)
. (324, 9)
Star (324, 10)
| (325, 2)
"/" (325, 4)
-> (325, 8)
Token (326, 4)
. (326, 9)
Slash (326, 10)
| (327, 2)
_ (327, 4)
-> (327, 6)
Token (328, 4)
. (328, 9)
Error (328, 10)
let (330, 0)
tokenFromPun (330, 4)
( (330, 17)
text (330, 18)
: (330, 22)
string (330, 24)
) (330, 30)
( (330, 32)
l (330, 33)
: (330, 34)
int (330, 36)
) (330, 39)
r (330, 41)
= (330, 43)
assert (331, 2)
( (331, 9)
r (331, 10)
- (331, 12)
l (331, 14)
= (331, 16)
1 (331, 18)
) (331, 19)
match (332, 2)
text (332, 8)
. (332, 12)
[ (332, 13)
l (332, 14)
] (332, 15)
with (332, 17)
| (333, 2)
',' (333, 4)
-> (333, 8)
Token (334, 4)
. (334, 9)
Comma (334, 10)
| (335, 2)
'(' (335, 4)
-> (335, 8)
Token (336, 4)
. (336, 9)
ParenL (336, 10)
| (337, 2)
')' (337, 4)
-> (337, 8)
Token (338, 4)
. (338, 9)
ParenR (338, 10)
| (339, 2)
'[' (339, 4)
-> (339, 8)
Token (340, 4)
. (340, 9)
BracketL (340, 10)
| (341, 2)
']' (341, 4)
-> (341, 8)
Token (342, 4)
. (342, 9)
BracketR (342, 10)
| (343, 2)
_ (343, 4)
-> (343, 6)
failwith (344, 4)
"NEVER! charIsPun is broken" (344, 13)
let (346, 0)
tokenFromIntLit (346, 4)
( (346, 20)
text (346, 21)
: (346, 25)
string (346, 27)
) (346, 33)
l (346, 35)
r (346, 37)
: (346, 38)
Token (346, 40)
= (346, 46)
let (347, 2)
value (347, 6)
= (347, 12)
text (347, 14)
|> (347, 19)
strSlice (347, 22)
l (347, 31)
r (347, 33)
|> (347, 35)
int (347, 38)
Token (348, 2)
. (348, 7)
Int (348, 8)
value (348, 12)
let (350, 0)
tokenFromCharLit (350, 4)
( (350, 21)
text (350, 22)
: (350, 26)
string (350, 28)
) (350, 34)
l (350, 36)
r (350, 38)
: (350, 39)
Token (350, 41)
= (350, 47)
assert (351, 2)
( (351, 9)
l (351, 10)
+ (351, 12)
2 (351, 14)
<= (351, 16)
r (351, 19)
&& (351, 21)
text (351, 24)
. (351, 28)
[ (351, 29)
l (351, 30)
] (351, 31)
= (351, 33)
'\'' (351, 35)
&& (351, 40)
text (351, 43)
. (351, 47)
[ (351, 48)
r (351, 49)
- (351, 51)
1 (351, 53)
] (351, 54)
= (351, 56)
'\'' (351, 58)
) (351, 62)
let (354, 2)
i (354, 6)
= (354, 8)
l (354, 10)
+ (354, 12)
1 (354, 14)
let (355, 2)
value (355, 6)
= (355, 12)
match (356, 4)
text (356, 10)
. (356, 14)
[ (356, 15)
i (356, 16)
] (356, 17)
with (356, 19)
| (357, 4)
'\\' (357, 6)
-> (357, 11)
match (358, 6)
text (358, 12)
. (358, 16)
[ (358, 17)
i (358, 18)
+ (358, 20)
1 (358, 22)
] (358, 23)
with (358, 25)
| (359, 6)
'x' (359, 8)
-> (359, 12)
charNull (360, 8)
| (361, 6)
't' (361, 8)
-> (361, 12)
'\t' (362, 8)
| (363, 6)
'r' (363, 8)
-> (363, 12)
'\r' (364, 8)
| (365, 6)
'n' (365, 8)
-> (365, 12)
'\n' (366, 8)
| (367, 6)
c (367, 8)
-> (367, 10)
c (368, 8)
| (369, 4)
c (369, 6)
-> (369, 8)
c (370, 6)
Token (372, 2)
. (372, 7)
Char (372, 8)
value (372, 13)
let (374, 0)
tokenFromStrLit (374, 4)
( (374, 20)
text (374, 21)
: (374, 25)
string (374, 27)
) (374, 33)
l (374, 35)
r (374, 37)
: (374, 38)
Token (374, 40)
= (374, 46)
assert (375, 2)
( (375, 9)
l (375, 10)
+ (375, 12)
2 (375, 14)
<= (375, 16)
r (375, 19)
&& (375, 21)
text (375, 24)
. (375, 28)
[ (375, 29)
l (375, 30)
] (375, 31)
= (375, 33)
'\"' (375, 35)
&& (375, 39)
text (375, 42)
. (375, 46)
[ (375, 47)
r (375, 48)
- (375, 50)
1 (375, 52)
] (375, 53)
= (375, 55)
'\"' (375, 57)
) (375, 60)
let (379, 2)
rec (379, 6)
go (379, 10)
acc (379, 13)
i (379, 17)
= (379, 19)
let (381, 4)
rec (381, 8)
next (381, 12)
i (381, 17)
= (381, 19)
if (382, 6)
i (382, 9)
= (382, 11)
r (382, 13)
- (382, 15)
1 (382, 17)
|| (382, 19)
text (382, 22)
. (382, 26)
[ (382, 27)
i (382, 28)
] (382, 29)
= (382, 31)
'\\' (382, 33)
then (382, 38)
i (383, 8)
else (384, 6)
next (385, 8)
( (385, 13)
i (385, 14)
+ (385, 16)
1 (385, 18)
) (385, 19)
let (386, 4)
endIndex (386, 8)
= (386, 17)
next (386, 19)
i (386, 24)
let (387, 4)
acc (387, 8)
= (387, 12)
( (387, 14)
text (387, 15)
|> (387, 20)
strSlice (387, 23)
i (387, 32)
endIndex (387, 34)
) (387, 42)
:: (387, 44)
acc (387, 47)
let (388, 4)
i (388, 8)
= (388, 10)
endIndex (388, 12)
if (391, 4)
i (391, 7)
= (391, 9)
r (391, 11)
- (391, 13)
1 (391, 15)
then (391, 17)
acc (392, 6)
|> (392, 10)
listRev (392, 13)
|> (392, 21)
strConcat (392, 24)
else (393, 4)
assert (394, 6)
( (394, 13)
text (394, 14)
. (394, 18)
[ (394, 19)
i (394, 20)
] (394, 21)
= (394, 23)
'\\' (394, 25)
) (394, 29)
match (395, 6)
text (395, 12)
. (395, 16)
[ (395, 17)
i (395, 18)
+ (395, 20)
1 (395, 22)
] (395, 23)
with (395, 25)
| (396, 6)
'x' (396, 8)
-> (396, 12)
go (397, 8)
( (397, 11)
"\0" (397, 12)
:: (397, 19)
acc (397, 22)
) (397, 25)
( (397, 27)
i (397, 28)
+ (397, 30)
4 (397, 32)
) (397, 33)
| (398, 6)
't' (398, 8)
-> (398, 12)
go (399, 8)
( (399, 11)
"\t" (399, 12)
:: (399, 17)
acc (399, 20)
) (399, 23)
( (399, 25)
i (399, 26)
+ (399, 28)
2 (399, 30)
) (399, 31)
| (400, 6)
'r' (400, 8)
-> (400, 12)
go (401, 8)
( (401, 11)
"\r" (401, 12)
:: (401, 17)
acc (401, 20)
) (401, 23)
( (401, 25)
i (401, 26)
+ (401, 28)
2 (401, 30)
) (401, 31)
| (402, 6)
'n' (402, 8)
-> (402, 12)
go (403, 8)
( (403, 11)
"\n" (403, 12)
:: (403, 17)
acc (403, 20)
) (403, 23)
( (403, 25)
i (403, 26)
+ (403, 28)
2 (403, 30)
) (403, 31)
| (404, 6)
_ (404, 8)
-> (404, 10)
go (405, 8)
( (405, 11)
( (405, 12)
text (405, 13)
|> (405, 18)
strSlice (405, 21)
( (405, 30)
i (405, 31)
+ (405, 33)
1 (405, 35)
) (405, 36)
( (405, 38)
i (405, 39)
+ (405, 41)
2 (405, 43)
) (405, 44)
) (405, 45)
:: (405, 47)
acc (405, 50)
) (405, 53)
( (405, 55)
i (405, 56)
+ (405, 58)
2 (405, 60)
) (405, 61)
let (406, 2)
value (406, 6)
= (406, 12)
go (406, 14)
[ (406, 17)
] (406, 18)
( (406, 20)
l (406, 21)
+ (406, 23)
1 (406, 25)
) (406, 26)
Token (408, 2)
. (408, 7)
Str (408, 8)
value (408, 12)
let (410, 0)
tokenFromStrLitRaw (410, 4)
( (410, 23)
text (410, 24)
: (410, 28)
string (410, 30)
) (410, 36)
l (410, 38)
r (410, 40)
= (410, 42)
assert (411, 2)
( (411, 9)
l (411, 10)
+ (411, 12)
6 (411, 14)
<= (411, 16)
r (411, 19)
&& (411, 21)
text (411, 24)
|> (411, 29)
strIsFollowedByRawQuotes (411, 32)
l (411, 57)
&& (411, 59)
text (411, 62)
|> (411, 67)
strIsFollowedByRawQuotes (411, 70)
( (411, 95)
r (411, 96)
- (411, 98)
3 (411, 100)
) (411, 101)
) (411, 102)
Token (412, 2)
. (412, 7)
Str (412, 8)
( (412, 12)
text (412, 13)
|> (412, 18)
strSlice (412, 21)
( (412, 30)
l (412, 31)
+ (412, 33)
3 (412, 35)
) (412, 36)
( (412, 38)
r (412, 39)
- (412, 41)
3 (412, 43)
) (412, 44)
) (412, 45)
let (418, 0)
tokCtxToTextIndex (418, 4)
( (418, 22)
( (418, 23)
text (418, 24)
, (418, 28)
i (418, 30)
, (418, 31)
_ (418, 33)
, (418, 34)
_ (418, 36)
) (418, 37)
: (418, 38)
TokenizeCtx (418, 40)
) (418, 51)
= (418, 53)
text (419, 2)
, (419, 6)
i (419, 8)
let (423, 0)
tokCtxSkip (423, 4)
r (423, 15)
( (423, 17)
( (423, 18)
text (423, 19)
, (423, 23)
i (423, 25)
, (423, 26)
loc (423, 28)
, (423, 31)
acc (423, 33)
) (423, 36)
: (423, 37)
TokenizeCtx (423, 39)
) (423, 50)
: (423, 51)
TokenizeCtx (423, 53)
= (423, 65)
assert (424, 2)
( (424, 9)
0 (424, 10)
<= (424, 12)
i (424, 15)
&& (424, 17)
i (424, 20)
<= (424, 22)
r (424, 25)
&& (424, 27)
r (424, 30)
<= (424, 32)
text (424, 35)
. (424, 39)
Length (424, 40)
) (424, 46)
let (425, 2)
newLoc (425, 6)
= (425, 13)
loc (425, 15)
|> (425, 19)
locShift (425, 22)
text (425, 31)
i (425, 36)
r (425, 38)
text (426, 2)
, (426, 6)
r (426, 8)
, (426, 9)
newLoc (426, 11)
, (426, 17)
acc (426, 19)
let (430, 0)
tokCtxPush (430, 4)
kind (430, 15)
r (430, 20)
( (430, 22)
( (430, 23)
text (430, 24)
, (430, 28)
i (430, 30)
, (430, 31)
loc (430, 33)
, (430, 36)
acc (430, 38)
) (430, 41)
: (430, 42)
TokenizeCtx (430, 44)
) (430, 55)
: (430, 56)
TokenizeCtx (430, 58)
= (430, 70)
assert (431, 2)
( (431, 9)
0 (431, 10)
<= (431, 12)
i (431, 15)
&& (431, 17)
i (431, 20)
<= (431, 22)
r (431, 25)
&& (431, 27)
r (431, 30)
<= (431, 32)
text (431, 35)
. (431, 39)
Length (431, 40)
) (431, 46)
let (432, 2)
newAcc (432, 6)
= (432, 13)
( (432, 15)
kind (432, 16)
, (432, 20)
loc (432, 22)
) (432, 25)
:: (432, 27)
acc (432, 30)
let (433, 2)
newLoc (433, 6)
= (433, 13)
loc (433, 15)
|> (433, 19)
locShift (433, 22)
text (433, 31)
i (433, 36)
r (433, 38)
text (434, 2)
, (434, 6)
r (434, 8)
, (434, 9)
newLoc (434, 11)
, (434, 17)
newAcc (434, 19)
let (436, 0)
tokEof (436, 4)
( (436, 11)
( (436, 12)
text (436, 13)
, (436, 17)
i (436, 19)
, (436, 20)
_ (436, 22)
, (436, 23)
acc (436, 25)
) (436, 28)
: (436, 29)
TokenizeCtx (436, 31)
) (436, 42)
= (436, 44)
assert (437, 2)
( (437, 9)
lookEof (437, 10)
text (437, 18)
i (437, 23)
) (437, 24)
acc (438, 2)
|> (438, 6)
listRev (438, 9)
let (440, 0)
tokError (440, 4)
t (440, 13)
= (440, 15)
let (441, 2)
text (441, 6)
, (441, 10)
i (441, 12)
= (441, 14)
t (441, 16)
|> (441, 18)
tokCtxToTextIndex (441, 21)
let (442, 2)
r (442, 6)
= (442, 8)
scanError (442, 10)
text (442, 20)
i (442, 25)
t (443, 2)
|> (443, 4)
tokCtxSkip (443, 7)
r (443, 18)
let (445, 0)
tokComment (445, 4)
( (445, 15)
t (445, 16)
: (445, 17)
TokenizeCtx (445, 19)
) (445, 30)
= (445, 32)
let (446, 2)
text (446, 6)
, (446, 10)
i (446, 12)
= (446, 14)
t (446, 16)
|> (446, 18)
tokCtxToTextIndex (446, 21)
let (447, 2)
r (447, 6)
= (447, 8)
scanLine (447, 10)
text (447, 19)
i (447, 24)
t (448, 2)
|> (448, 4)
tokCtxSkip (448, 7)
r (448, 18)
let (450, 0)
tokSpace (450, 4)
( (450, 13)
t (450, 14)
: (450, 15)
TokenizeCtx (450, 17)
) (450, 28)
= (450, 30)
let (451, 2)
text (451, 6)
, (451, 10)
i (451, 12)
= (451, 14)
t (451, 16)
|> (451, 18)
tokCtxToTextIndex (451, 21)
let (452, 2)
r (452, 6)
= (452, 8)
scanSpace (452, 10)
text (452, 20)
i (452, 25)
t (453, 2)
|> (453, 4)
tokCtxSkip (453, 7)
r (453, 18)
let (455, 0)
tokPun (455, 4)
t (455, 11)
= (455, 13)
let (456, 2)
text (456, 6)
, (456, 10)
i (456, 12)
= (456, 14)
t (456, 16)
|> (456, 18)
tokCtxToTextIndex (456, 21)
let (457, 2)
r (457, 6)
= (457, 8)
scanPun (457, 10)
text (457, 18)
i (457, 23)
let (458, 2)
token (458, 6)
= (458, 12)
tokenFromPun (458, 14)
text (458, 27)
i (458, 32)
r (458, 34)
t (459, 2)
|> (459, 4)
tokCtxPush (459, 7)
token (459, 18)
r (459, 24)
let (461, 0)
tokOp (461, 4)
t (461, 10)
= (461, 12)
let (462, 2)
text (462, 6)
, (462, 10)
i (462, 12)
= (462, 14)
t (462, 16)
|> (462, 18)
tokCtxToTextIndex (462, 21)
let (463, 2)
r (463, 6)
= (463, 8)
scanOp (463, 10)
text (463, 17)
i (463, 22)
let (464, 2)
token (464, 6)
= (464, 12)
tokenFromOp (464, 14)
text (464, 26)
i (464, 31)
r (464, 33)
t (465, 2)
|> (465, 4)
tokCtxPush (465, 7)
token (465, 18)
r (465, 24)
let (467, 0)
tokIdent (467, 4)
t (467, 13)
= (467, 15)
let (468, 2)
text (468, 6)
, (468, 10)
i (468, 12)
= (468, 14)
t (468, 16)
|> (468, 18)
tokCtxToTextIndex (468, 21)
let (469, 2)
r (469, 6)
= (469, 8)
scanIdent (469, 10)
text (469, 20)
i (469, 25)
let (470, 2)
token (470, 6)
= (470, 12)
tokenFromIdent (470, 14)
text (470, 29)
i (470, 34)
r (470, 36)
t (471, 2)
|> (471, 4)
tokCtxPush (471, 7)
token (471, 18)
r (471, 24)
let (473, 0)
tokIntLit (473, 4)
t (473, 14)
= (473, 16)
let (474, 2)
text (474, 6)
, (474, 10)
i (474, 12)
= (474, 14)
t (474, 16)
|> (474, 18)
tokCtxToTextIndex (474, 21)
let (475, 2)
r (475, 6)
= (475, 8)
scanIntLit (475, 10)
text (475, 21)
i (475, 26)
let (476, 2)
token (476, 6)
= (476, 12)
tokenFromIntLit (476, 14)
text (476, 30)
i (476, 35)
r (476, 37)
t (477, 2)
|> (477, 4)
tokCtxPush (477, 7)
token (477, 18)
r (477, 24)
let (479, 0)
tokCharLit (479, 4)
t (479, 15)
= (479, 17)
let (480, 2)
text (480, 6)
, (480, 10)
i (480, 12)
= (480, 14)
t (480, 16)
|> (480, 18)
tokCtxToTextIndex (480, 21)
let (481, 2)
ok (481, 6)
, (481, 8)
r (481, 10)
= (481, 12)
scanCharLit (481, 14)
text (481, 26)
i (481, 31)
let (482, 2)
token (482, 6)
= (482, 12)
if (482, 14)
ok (482, 17)
then (482, 20)
tokenFromCharLit (482, 25)
text (482, 42)
i (482, 47)
r (482, 49)
else (482, 51)
Token (482, 56)
. (482, 61)
Error (482, 62)
t (483, 2)
|> (483, 4)
tokCtxPush (483, 7)
token (483, 18)
r (483, 24)
let (485, 0)
tokStrLit (485, 4)
t (485, 14)
= (485, 16)
let (486, 2)
text (486, 6)
, (486, 10)
i (486, 12)
= (486, 14)
t (486, 16)
|> (486, 18)
tokCtxToTextIndex (486, 21)
let (487, 2)
ok (487, 6)
, (487, 8)
r (487, 10)
= (487, 12)
scanStrLit (487, 14)
text (487, 25)
i (487, 30)
let (488, 2)
token (488, 6)
= (488, 12)
if (488, 14)
ok (488, 17)
then (488, 20)
tokenFromStrLit (488, 25)
text (488, 41)
i (488, 46)
r (488, 48)
else (488, 50)
Token (488, 55)
. (488, 60)
Error (488, 61)
t (489, 2)
|> (489, 4)
tokCtxPush (489, 7)
token (489, 18)
r (489, 24)
let (491, 0)
tokStrLitRaw (491, 4)
t (491, 17)
= (491, 19)
let (492, 2)
text (492, 6)
, (492, 10)
i (492, 12)
= (492, 14)
t (492, 16)
|> (492, 18)
tokCtxToTextIndex (492, 21)
let (493, 2)
ok (493, 6)
, (493, 8)
r (493, 10)
= (493, 12)
scanStrLitRaw (493, 14)
text (493, 28)
i (493, 33)
let (494, 2)
token (494, 6)
= (494, 12)
if (494, 14)
ok (494, 17)
then (494, 20)
tokenFromStrLitRaw (494, 25)
text (494, 44)
i (494, 49)
r (494, 51)
else (494, 53)
Token (494, 58)
. (494, 63)
Error (494, 64)
t (495, 2)
|> (495, 4)
tokCtxPush (495, 7)
token (495, 18)
r (495, 24)
let (497, 0)
tokenize (497, 4)
( (497, 13)
text (497, 14)
: (497, 18)
string (497, 20)
) (497, 26)
: (497, 27)
( (497, 29)
Token (497, 30)
* (497, 36)
Loc (497, 38)
) (497, 41)
list (497, 43)
= (497, 48)
let (498, 2)
rec (498, 6)
go (498, 10)
t (498, 13)
= (498, 15)
let (499, 4)
text (499, 8)
, (499, 12)
i (499, 14)
= (499, 16)
t (499, 18)
|> (499, 20)
tokCtxToTextIndex (499, 23)
if (501, 4)
lookEof (501, 7)
text (501, 15)
i (501, 20)
then (501, 22)
t (502, 6)
|> (502, 8)
tokEof (502, 11)
else (504, 4)
if (504, 9)
lookComment (504, 12)
text (504, 24)
i (504, 29)
then (504, 31)
t (505, 6)
|> (505, 8)
tokComment (505, 11)
|> (505, 22)
go (505, 25)
else (507, 4)
if (507, 9)
lookSpace (507, 12)
text (507, 22)
i (507, 27)
then (507, 29)
t (508, 6)
|> (508, 8)
tokSpace (508, 11)
|> (508, 20)
go (508, 23)
else (510, 4)
if (510, 9)
lookOp (510, 12)
text (510, 19)
i (510, 24)
then (510, 26)
t (511, 6)
|> (511, 8)
tokOp (511, 11)
|> (511, 17)
go (511, 20)
else (513, 4)
if (513, 9)
lookIntLit (513, 12)
text (513, 23)
i (513, 28)
then (513, 30)
t (514, 6)
|> (514, 8)
tokIntLit (514, 11)
|> (514, 21)
go (514, 24)
else (516, 4)
if (516, 9)
lookIdent (516, 12)
text (516, 22)
i (516, 27)
then (516, 29)
t (517, 6)
|> (517, 8)
tokIdent (517, 11)
|> (517, 20)
go (517, 23)
else (519, 4)
if (519, 9)
lookCharLit (519, 12)
text (519, 24)
i (519, 29)
then (519, 31)
t (520, 6)
|> (520, 8)
tokCharLit (520, 11)
|> (520, 22)
go (520, 25)
else (522, 4)
if (522, 9)
lookStrLitRaw (522, 12)
text (522, 26)
i (522, 31)
then (522, 33)
t (523, 6)
|> (523, 8)
tokStrLitRaw (523, 11)
|> (523, 24)
go (523, 27)
else (525, 4)
if (525, 9)
lookStrLit (525, 12)
text (525, 23)
i (525, 28)
then (525, 30)
t (526, 6)
|> (526, 8)
tokStrLit (526, 11)
|> (526, 21)
go (526, 24)
else (528, 4)
if (528, 9)
lookPun (528, 12)
text (528, 20)
i (528, 25)
then (528, 27)
t (529, 6)
|> (529, 8)
tokPun (529, 11)
|> (529, 18)
go (529, 21)
else (531, 4)
t (532, 6)
|> (532, 8)
tokError (532, 11)
|> (532, 20)
go (532, 23)
go (534, 2)
( (534, 5)
text (534, 6)
, (534, 10)
0 (534, 12)
, (534, 13)
( (534, 15)
0 (534, 16)
, (534, 17)
0 (534, 19)
) (534, 20)
, (534, 21)
[ (534, 23)
] (534, 24)
) (534, 25)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- synonym: TokenizeCtx
  tuple:
  - string
  - int
  - Loc
  - list:
    - tuple:
      - Token
      - Loc
- let:
  - fun:
    - locShift
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - anno:
      - r
      - int
    - anno:
      - tuple:
        - y
        - x
      - Loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - l
          - bin:
            - l
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - fun:
        - go
        - y
        - x
        - i
      - if:
        - bin:
          - i
          - r
        - tuple:
          - y
          - x
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - bin:
              - bin:
                - go
                - bin:
                  - y
                  - 1
              - 0
            - bin:
              - i
              - 1
          - bin:
            - bin:
              - bin:
                - go
                - y
              - bin:
                - x
                - 1
            - bin:
              - i
              - 1
      bin:
      - bin:
        - bin:
          - go
          - y
        - x
      - l
  let:
  - anno:
    - charNull
    - char
  - bin:
    - char
    - 0
  let:
  - anno:
    - fun:
      - charIsIdent
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - c
        - \'_\'
      - bin:
        - charIsDigit
        - c
    - bin:
      - charIsAlpha
      - c
  let:
  - anno:
    - fun:
      - charIsOp
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - bin:
                          - bin:
                            - bin:
                              - bin:
                                - c
                                - \'+\'
                              - bin:
                                - c
                                - \'-\'
                            - bin:
                              - c
                              - \'*\'
                          - bin:
                            - c
                            - \'/\'
                        - bin:
                          - c
                          - \'%\'
                      - bin:
                        - c
                        - \'=\'
                    - bin:
                      - c
                      - \'<\'
                  - bin:
                    - c
                    - \'>\'
                - bin:
                  - c
                  - \'^\'
              - bin:
                - c
                - \'&\'
            - bin:
              - c
              - \'|\'
          - bin:
            - c
            - \':\'
        - bin:
          - c
          - \'@\'
      - bin:
        - c
        - \';\'
    - bin:
      - c
      - \'.\'
  let:
  - anno:
    - fun:
      - charIsPun
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - c
            - \',\'
          - bin:
            - c
            - \'(\'
        - bin:
          - c
          - \')\'
      - bin:
        - c
        - \'[\'
    - bin:
      - c
      - \']\'
  let:
  - anno:
    - fun:
      - strIsFollowedBy
      - anno:
        - i
        - int
      - anno:
        - prefix
        - string
      - anno:
        - s
        - string
    - bool
  - let:
    - fun:
      - go
      - pi
      - si
    - bin:
      - bin:
        - pi
        - .Length: prefix
      - bin:
        - bin:
          - bin:
            - si
            - .Length: s
          - bin:
            - index: prefix
            - index: s
        - bin:
          - bin:
            - go
            - bin:
              - pi
              - 1
          - bin:
            - si
            - 1
    bin:
    - bin:
      - bin:
        - i
        - .Length: prefix
      - .Length: s
    - bin:
      - bin:
        - go
        - 0
      - i
  let:
  - anno:
    - fun:
      - strIsFollowedByRawQuotes
      - anno:
        - i
        - int
      - anno:
        - s
        - string
    - bool
  - bin:
    - bin:
      - bin:
        - strIsFollowedBy
        - i
      - \"\\\"\\\"\\\"\"
    - s
  let:
  - fun:
    - scanError
    - anno:
      - _
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - 1
  let:
  - fun:
    - lookEof
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - .Length: text
  let:
  - fun:
    - lookSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsSpace
  let:
  - fun:
    - scanSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookSpace
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsSpace
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookComment
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"//\"
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"[<\"
  let:
  - fun:
    - scanLine
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookComment
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - i
          - .Length: text
        - i
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - i
            - 1
          - bin:
            - go
            - bin:
              - i
              - 1
      bin:
      - go
      - i
  let:
  - fun:
    - lookPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsPun
  let:
  - fun:
    - scanPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookPun
          - text
        - i
    - bin:
      - i
      - 1
  let:
  - fun:
    - lookOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsOp
  let:
  - fun:
    - scanOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookOp
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsOp
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - index: text
      - charIsIdent
    - bin:
      - bin:
        - index: text
        - charIsDigit
      - not
  let:
  - fun:
    - scanIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIdent
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsIdent
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsDigit
  let:
  - fun:
    - scanIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIntLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsDigit
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\'\'
  let:
  - fun:
    - scanCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookCharLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\'\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\"\'
  let:
  - fun:
    - scanStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\"\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - text
    - bin:
      - strIsFollowedByRawQuotes
      - i
  let:
  - fun:
    - scanStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLitRaw
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - i
        - tuple:
          - true
          - bin:
            - i
            - 3
        - if:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - go
            - bin:
              - i
              - 1
          - semi:
            - bin:
              - assert
              - bin:
                - i
                - .Length: text
            - tuple:
              - false
              - i
      bin:
      - go
      - bin:
        - i
        - 3
  let:
  - anno:
    - fun:
      - tokenFromIdent
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"true\"
      - ERROR:
        - missing
        - (235:12)
      bin:
      - .Bool: Token
      - true
    - arm:
      - \"false\"
      - ERROR:
        - missing
        - (237:13)
      bin:
      - .Bool: Token
      - false
    - arm:
      - \"do\"
      - ERROR:
        - missing
        - (239:10)
      .Do: Token
    - arm:
      - \"let\"
      - ERROR:
        - missing
        - (241:11)
      .Let: Token
    - arm:
      - \"if\"
      - ERROR:
        - missing
        - (243:10)
      .If: Token
    - arm:
      - \"then\"
      - ERROR:
        - missing
        - (245:12)
      .Then: Token
    - arm:
      - \"else\"
      - ERROR:
        - missing
        - (247:12)
      .Else: Token
    - arm:
      - \"match\"
      - ERROR:
        - missing
        - (249:13)
      .Match: Token
    - arm:
      - \"with\"
      - ERROR:
        - missing
        - (251:12)
      .With: Token
    - arm:
      - \"as\"
      - ERROR:
        - missing
        - (253:10)
      .As: Token
    - arm:
      - \"when\"
      - ERROR:
        - missing
        - (255:12)
      .When: Token
    - arm:
      - \"rec\"
      - ERROR:
        - missing
        - (257:11)
      .Rec: Token
    - arm:
      - \"private\"
      - ERROR:
        - missing
        - (259:15)
      .Private: Token
    - arm:
      - \"internal\"
      - ERROR:
        - missing
        - (261:16)
      .Internal: Token
    - arm:
      - \"public\"
      - ERROR:
        - missing
        - (263:14)
      .Public: Token
    - arm:
      - \"module\"
      - ERROR:
        - missing
        - (265:14)
      .Module: Token
    - arm:
      - \"namespace\"
      - ERROR:
        - missing
        - (267:17)
      .Namespace: Token
    - arm:
      - \"open\"
      - ERROR:
        - missing
        - (269:12)
      .Open: Token
    - arm:
      - \"type\"
      - ERROR:
        - missing
        - (271:12)
      .Type: Token
    - arm:
      - \"of\"
      - ERROR:
        - missing
        - (273:10)
      .Of: Token
    - arm:
      - \"fun\"
      - ERROR:
        - missing
        - (275:11)
      .Fun: Token
    - arm:
      - \"in\"
      - ERROR:
        - missing
        - (277:10)
      .In: Token
    - arm:
      - s
      - ERROR:
        - missing
        - (279:7)
      bin:
      - .Ident: Token
      - s
  let:
  - anno:
    - fun:
      - tokenFromOp
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"&\"
      - ERROR:
        - missing
        - (284:9)
      .Amp: Token
    - arm:
      - \"&&\"
      - ERROR:
        - missing
        - (286:10)
      .AmpAmp: Token
    - arm:
      - \"->\"
      - ERROR:
        - missing
        - (288:10)
      .Arrow: Token
    - arm:
      - \":\"
      - ERROR:
        - missing
        - (290:9)
      .Colon: Token
    - arm:
      - \"::\"
      - ERROR:
        - missing
        - (292:10)
      .ColonColon: Token
    - arm:
      - \".\"
      - ERROR:
        - missing
        - (294:9)
      .Dot: Token
    - arm:
      - \"..\"
      - ERROR:
        - missing
        - (296:10)
      .DotDot: Token
    - arm:
      - \"=\"
      - ERROR:
        - missing
        - (298:9)
      .Eq: Token
    - arm:
      - \">\"
      - ERROR:
        - missing
        - (300:9)
      .Gt: Token
    - arm:
      - \">=\"
      - ERROR:
        - missing
        - (302:10)
      .GtEq: Token
    - arm:
      - \"<\"
      - ERROR:
        - missing
        - (304:9)
      .Lt: Token
    - arm:
      - \"<=\"
      - ERROR:
        - missing
        - (306:10)
      .LtEq: Token
    - arm:
      - \"<>\"
      - ERROR:
        - missing
        - (308:10)
      .LtGt: Token
    - arm:
      - \"-\"
      - ERROR:
        - missing
        - (310:9)
      .Minus: Token
    - arm:
      - \"%\"
      - ERROR:
        - missing
        - (312:9)
      .Percent: Token
    - arm:
      - \"|\"
      - ERROR:
        - missing
        - (314:9)
      .Pipe: Token
    - arm:
      - \"|>\"
      - ERROR:
        - missing
        - (316:10)
      .PipeGt: Token
    - arm:
      - \"||\"
      - ERROR:
        - missing
        - (318:10)
      .PipePipe: Token
    - arm:
      - \"+\"
      - ERROR:
        - missing
        - (320:9)
      .Plus: Token
    - arm:
      - \";\"
      - ERROR:
        - missing
        - (322:9)
      .Semi: Token
    - arm:
      - \"*\"
      - ERROR:
        - missing
        - (324:9)
      .Star: Token
    - arm:
      - \"/\"
      - ERROR:
        - missing
        - (326:9)
      .Slash: Token
    - arm:
      - _
      - ERROR:
        - missing
        - (328:7)
      .Error: Token
  let:
  - fun:
    - tokenFromPun
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - r
          - l
        - 1
    - match:
      - index: text
      - arm:
        - \',\'
        - ERROR:
          - missing
          - (334:9)
        .Comma: Token
      - arm:
        - \'(\'
        - ERROR:
          - missing
          - (336:9)
        .ParenL: Token
      - arm:
        - \')\'
        - ERROR:
          - missing
          - (338:9)
        .ParenR: Token
      - arm:
        - \'[\'
        - ERROR:
          - missing
          - (340:9)
        .BracketL: Token
      - arm:
        - \']\'
        - ERROR:
          - missing
          - (342:9)
        .BracketR: Token
      - arm:
        - _
        - ERROR:
          - missing
          - (344:7)
        bin:
        - failwith
        - \"NEVER! charIsPun is broken\"
  let:
  - anno:
    - fun:
      - tokenFromIntLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - let:
    - value
    - bin:
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - l
          - r
      - int
    bin:
    - .Int: Token
    - value
  let:
  - anno:
    - fun:
      - tokenFromCharLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\'\'
        - bin:
          - index: text
          - \'\\\'\'
    - let:
      - i
      - bin:
        - l
        - 1
      let:
      - value
      - match:
        - index: text
        - arm:
          - \'\\\\\'
          - ERROR:
            - missing
            - (358:12)
          match:
          - index: text
          - arm:
            - \'x\'
            - ERROR:
              - missing
              - (360:13)
            charNull
          - arm:
            - \'t\'
            - ERROR:
              - missing
              - (362:13)
            \'\\t\'
          - arm:
            - \'r\'
            - ERROR:
              - missing
              - (364:13)
            \'\\r\'
          - arm:
            - \'n\'
            - ERROR:
              - missing
              - (366:13)
            \'\\n\'
          - arm:
            - c
            - ERROR:
              - missing
              - (368:11)
            c
        - arm:
          - c
          - ERROR:
            - missing
            - (370:9)
          c
      bin:
      - .Char: Token
      - value
  let:
  - anno:
    - fun:
      - tokenFromStrLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\"\'
        - bin:
          - index: text
          - \'\\\"\'
    - let:
      - fun:
        - go
        - acc
        - i
      - let:
        - fun:
          - next
          - i
        - if:
          - bin:
            - bin:
              - i
              - bin:
                - r
                - 1
            - bin:
              - index: text
              - \'\\\\\'
          - i
          - bin:
            - next
            - bin:
              - i
              - 1
        let:
        - endIndex
        - bin:
          - next
          - i
        let:
        - acc
        - bin:
          - bin:
            - text
            - bin:
              - bin:
                - strSlice
                - i
              - endIndex
          - acc
        let:
        - i
        - endIndex
        if:
        - bin:
          - i
          - bin:
            - r
            - 1
        - bin:
          - bin:
            - acc
            - listRev
          - strConcat
        - semi:
          - bin:
            - assert
            - bin:
              - index: text
              - \'\\\\\'
          - match:
            - index: text
            - arm:
              - \'x\'
              - ERROR:
                - missing
                - (397:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\0\"
                  - acc
              - bin:
                - i
                - 4
            - arm:
              - \'t\'
              - ERROR:
                - missing
                - (399:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\t\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'r\'
              - ERROR:
                - missing
                - (401:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\r\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'n\'
              - ERROR:
                - missing
                - (403:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\n\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - _
              - ERROR:
                - missing
                - (405:11)
              bin:
              - bin:
                - go
                - bin:
                  - bin:
                    - text
                    - bin:
                      - bin:
                        - strSlice
                        - bin:
                          - i
                          - 1
                      - bin:
                        - i
                        - 2
                  - acc
              - bin:
                - i
                - 2
      let:
      - value
      - bin:
        - bin:
          - go
          - list
        - bin:
          - l
          - 1
      bin:
      - .Str: Token
      - value
  let:
  - fun:
    - tokenFromStrLitRaw
    - anno:
      - text
      - string
    - l
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 6
            - r
          - bin:
            - text
            - bin:
              - strIsFollowedByRawQuotes
              - l
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - bin:
              - r
              - 3
    - bin:
      - .Str: Token
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - bin:
              - l
              - 3
          - bin:
            - r
            - 3
  let:
  - fun:
    - tokCtxToTextIndex
    - anno:
      - tuple:
        - text
        - i
        - _
        - _
      - TokenizeCtx
  - tuple:
    - text
    - i
  let:
  - anno:
    - fun:
      - tokCtxSkip
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - acc
  let:
  - anno:
    - fun:
      - tokCtxPush
      - kind
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newAcc
      - bin:
        - tuple:
          - kind
          - loc
        - acc
      let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - newAcc
  let:
  - fun:
    - tokEof
    - anno:
      - tuple:
        - text
        - i
        - _
        - acc
      - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookEof
          - text
        - i
    - bin:
      - acc
      - listRev
  let:
  - fun:
    - tokError
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanError
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokComment
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanLine
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokSpace
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanSpace
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokPun
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanPun
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromPun
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokOp
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanOp
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromOp
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIdent
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIdent
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIdent
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIntLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIntLit
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIntLit
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokCharLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanCharLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromCharLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLitRaw
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLitRaw
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLitRaw
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - anno:
    - fun:
      - tokenize
      - anno:
        - text
        - string
    - list:
      - tuple:
        - Token
        - Loc
  - let:
    - fun:
      - go
      - t
    - let:
      - tuple:
        - text
        - i
      - bin:
        - t
        - tokCtxToTextIndex
      if:
      - bin:
        - bin:
          - lookEof
          - text
        - i
      - bin:
        - t
        - tokEof
      - if:
        - bin:
          - bin:
            - lookComment
            - text
          - i
        - bin:
          - bin:
            - t
            - tokComment
          - go
        - if:
          - bin:
            - bin:
              - lookSpace
              - text
            - i
          - bin:
            - bin:
              - t
              - tokSpace
            - go
          - if:
            - bin:
              - bin:
                - lookOp
                - text
              - i
            - bin:
              - bin:
                - t
                - tokOp
              - go
            - if:
              - bin:
                - bin:
                  - lookIntLit
                  - text
                - i
              - bin:
                - bin:
                  - t
                  - tokIntLit
                - go
              - if:
                - bin:
                  - bin:
                    - lookIdent
                    - text
                  - i
                - bin:
                  - bin:
                    - t
                    - tokIdent
                  - go
                - if:
                  - bin:
                    - bin:
                      - lookCharLit
                      - text
                    - i
                  - bin:
                    - bin:
                      - t
                      - tokCharLit
                    - go
                  - if:
                    - bin:
                      - bin:
                        - lookStrLitRaw
                        - text
                      - i
                    - bin:
                      - bin:
                        - t
                        - tokStrLitRaw
                      - go
                    - if:
                      - bin:
                        - bin:
                          - lookStrLit
                          - text
                        - i
                      - bin:
                        - bin:
                          - t
                          - tokStrLit
                        - go
                      - if:
                        - bin:
                          - bin:
                            - lookPun
                            - text
                          - i
                        - bin:
                          - bin:
                            - t
                            - tokPun
                          - go
                        - bin:
                          - bin:
                            - t
                            - tokError
                          - go
    bin:
    - go
    - tuple:
      - text
      - 0
      - tuple:
        - 0
        - 0
      - list
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- synonym
- let-fun:
  - locShift
  - inf:
    - inf:
      - assert
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - l
                - 0
            - false
    - let-fun:
      - go
      - match:
        - inf:
          - inf:
            - prim
            - i
          - r
      inf:
      - inf:
        - inf:
          - go
          - y
        - x
      - l
  let-val:
  - inf:
    - inf:
      - char
      - 0
  let-fun:
  - charIsIdent
  - inf:
    - match:
      - match:
        - inf:
          - inf:
            - prim
            - c
          - \'_\'
  let-fun:
  - charIsOp
  - inf:
    - match:
      - match:
        - match:
          - match:
            - match:
              - match:
                - match:
                  - match:
                    - match:
                      - match:
                        - match:
                          - match:
                            - match:
                              - match:
                                - inf:
                                  - inf:
                                    - prim
                                    - c
                                  - \'+\'
  let-fun:
  - charIsPun
  - inf:
    - match:
      - match:
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - c
              - \',\'
  let-fun:
  - strIsFollowedBy
  - inf:
    - let-fun:
      - go
      - match:
        - inf:
          - inf:
            - prim
            - pi
          - .Length: prefix
      match:
      - inf:
        - inf:
          - prim
          - inf:
            - inf:
              - prim
              - .Length: s
            - inf:
              - inf:
                - prim
                - i
              - .Length: prefix
        - false
  let-fun:
  - strIsFollowedByRawQuotes
  - inf:
    - inf:
      - inf:
        - inf:
          - strIsFollowedBy
          - i
        - \"\\\"\\\"\\\"\"
      - s
  let-fun:
  - scanError
  - inf:
    - inf:
      - prim
      - i
    - 1
  let-fun:
  - lookEof
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - i
        - .Length: text
    - false
  let-fun:
  - lookSpace
  - inf:
    - charIsSpace
    - inf:
      - inf:
        - prim
        - text
      - i
  let-fun:
  - scanSpace
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookSpace
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - i
            - .Length: text
      inf:
      - go
      - i
  let-fun:
  - lookComment
  - match:
    - inf:
      - inf:
        - inf:
          - strIsFollowedBy
          - i
        - \"//\"
      - text
  let-fun:
  - scanLine
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookComment
          - text
        - i
    - let-fun:
      - go
      - match:
        - inf:
          - inf:
            - prim
            - i
          - .Length: text
      inf:
      - go
      - i
  let-fun:
  - lookPun
  - inf:
    - charIsPun
    - inf:
      - inf:
        - prim
        - text
      - i
  let-fun:
  - scanPun
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookPun
          - text
        - i
    - inf:
      - inf:
        - prim
        - i
      - 1
  let-fun:
  - lookOp
  - inf:
    - charIsOp
    - inf:
      - inf:
        - prim
        - text
      - i
  let-fun:
  - scanOp
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookOp
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - i
            - .Length: text
      inf:
      - go
      - i
  let-fun:
  - lookIdent
  - match:
    - inf:
      - charIsIdent
      - inf:
        - inf:
          - prim
          - text
        - i
  let-fun:
  - scanIdent
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookIdent
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - i
            - .Length: text
      inf:
      - go
      - i
  let-fun:
  - lookIntLit
  - inf:
    - charIsDigit
    - inf:
      - inf:
        - prim
        - text
      - i
  let-fun:
  - scanIntLit
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookIntLit
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - i
            - .Length: text
      inf:
      - go
      - i
  let-fun:
  - lookCharLit
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - text
        - i
    - \'\\\'\'
  let-fun:
  - scanCharLit
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookCharLit
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - i
                - 1
            - .Length: text
      inf:
      - go
      - inf:
        - inf:
          - prim
          - i
        - 1
  let-fun:
  - lookStrLit
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - text
        - i
    - \'\\\"\'
  let-fun:
  - scanStrLit
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookStrLit
          - text
        - i
    - let-fun:
      - go
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - i
                - 1
            - .Length: text
      inf:
      - go
      - inf:
        - inf:
          - prim
          - i
        - 1
  let-fun:
  - lookStrLitRaw
  - inf:
    - inf:
      - strIsFollowedByRawQuotes
      - i
    - text
  let-fun:
  - scanStrLitRaw
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookStrLitRaw
          - text
        - i
    - let-fun:
      - go
      - match:
        - inf:
          - inf:
            - strIsFollowedByRawQuotes
            - i
          - text
      inf:
      - go
      - inf:
        - inf:
          - prim
          - i
        - 3
  let-fun:
  - tokenFromIdent
  - inf:
    - match:
      - inf:
        - inf:
          - inf:
            - strSlice
            - l
          - r
        - text
  let-fun:
  - tokenFromOp
  - inf:
    - match:
      - inf:
        - inf:
          - inf:
            - strSlice
            - l
          - r
        - text
  let-fun:
  - tokenFromPun
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - prim
          - inf:
            - inf:
              - prim
              - r
            - l
        - 1
    - match:
      - inf:
        - inf:
          - prim
          - text
        - l
  let-fun:
  - tokenFromIntLit
  - inf:
    - let-val:
      - inf:
        - int
        - inf:
          - inf:
            - inf:
              - strSlice
              - l
            - r
          - text
      inf:
      - .Int: Token
      - value
  let-fun:
  - tokenFromCharLit
  - inf:
    - inf:
      - inf:
        - assert
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - r
                  - inf:
                    - inf:
                      - prim
                      - l
                    - 2
              - false
      - let-val:
        - inf:
          - inf:
            - prim
            - l
          - 1
        let-val:
        - match:
          - inf:
            - inf:
              - prim
              - text
            - i
        inf:
        - .Char: Token
        - value
  let-fun:
  - tokenFromStrLit
  - inf:
    - inf:
      - inf:
        - assert
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - r
                  - inf:
                    - inf:
                      - prim
                      - l
                    - 2
              - false
      - let-fun:
        - go
        - let-fun:
          - next
          - match:
            - match:
              - inf:
                - inf:
                  - prim
                  - i
                - inf:
                  - inf:
                    - prim
                    - r
                  - 1
          let-val:
          - inf:
            - next
            - i
          let-val:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - inf:
                    - strSlice
                    - i
                  - endIndex
                - text
            - acc
          let-val: endIndex
          match:
          - inf:
            - inf:
              - prim
              - i
            - inf:
              - inf:
                - prim
                - r
              - 1
        let-val:
        - inf:
          - inf:
            - go
            - prim
          - inf:
            - inf:
              - prim
              - l
            - 1
        inf:
        - .Str: Token
        - value
  let-fun:
  - tokenFromStrLitRaw
  - inf:
    - inf:
      - assert
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - r
                - inf:
                  - inf:
                    - prim
                    - l
                  - 6
            - false
    - inf:
      - .Str: Token
      - inf:
        - inf:
          - inf:
            - strSlice
            - inf:
              - inf:
                - prim
                - l
              - 3
          - inf:
            - inf:
              - prim
              - r
            - 3
        - text
  let-fun:
  - tokCtxToTextIndex
  - inf:
    - text
    - i
  let-fun:
  - tokCtxSkip
  - inf:
    - inf:
      - inf:
        - assert
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - i
                  - 0
              - false
      - let-val:
        - inf:
          - inf:
            - inf:
              - inf:
                - locShift
                - text
              - i
            - r
          - loc
        inf:
        - text
        - r
        - newLoc
        - acc
  let-fun:
  - tokCtxPush
  - inf:
    - inf:
      - inf:
        - assert
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - i
                  - 0
              - false
      - let-val:
        - inf:
          - inf:
            - prim
            - inf:
              - kind
              - loc
          - acc
        let-val:
        - inf:
          - inf:
            - inf:
              - inf:
                - locShift
                - text
              - i
            - r
          - loc
        inf:
        - text
        - r
        - newLoc
        - newAcc
  let-fun:
  - tokEof
  - inf:
    - inf:
      - assert
      - inf:
        - inf:
          - lookEof
          - text
        - i
    - inf:
      - listRev
      - acc
  let-fun:
  - tokError
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanError
        - text
      - i
    inf:
    - inf:
      - tokCtxSkip
      - r
    - t
  let-fun:
  - tokComment
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanLine
        - text
      - i
    inf:
    - inf:
      - tokCtxSkip
      - r
    - t
  let-fun:
  - tokSpace
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanSpace
        - text
      - i
    inf:
    - inf:
      - tokCtxSkip
      - r
    - t
  let-fun:
  - tokPun
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanPun
        - text
      - i
    let-val:
    - inf:
      - inf:
        - inf:
          - tokenFromPun
          - text
        - i
      - r
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokOp
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanOp
        - text
      - i
    let-val:
    - inf:
      - inf:
        - inf:
          - tokenFromOp
          - text
        - i
      - r
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokIdent
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanIdent
        - text
      - i
    let-val:
    - inf:
      - inf:
        - inf:
          - tokenFromIdent
          - text
        - i
      - r
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokIntLit
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanIntLit
        - text
      - i
    let-val:
    - inf:
      - inf:
        - inf:
          - tokenFromIntLit
          - text
        - i
      - r
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokCharLit
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanCharLit
        - text
      - i
    let-val:
    - match: ok
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokStrLit
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanStrLit
        - text
      - i
    let-val:
    - match: ok
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokStrLitRaw
  - let-val:
    - inf:
      - tokCtxToTextIndex
      - t
    let-val:
    - inf:
      - inf:
        - scanStrLitRaw
        - text
      - i
    let-val:
    - match: ok
    inf:
    - inf:
      - inf:
        - tokCtxPush
        - token
      - r
    - t
  let-fun:
  - tokenize
  - inf:
    - let-fun:
      - go
      - let-val:
        - inf:
          - tokCtxToTextIndex
          - t
        match:
        - inf:
          - inf:
            - lookEof
            - text
          - i
      inf:
      - go
      - inf:
        - text
        - 0
        - inf:
          - 0
          - 0
        - prim
  inf
FILE MiloneLang/Parsing.fs
module (76, 0)
rec (76, 7)
MiloneLang (76, 11)
. (76, 21)
Parsing (76, 22)
open (78, 0)
MiloneLang (78, 5)
. (78, 15)
Types (78, 16)
open (79, 0)
MiloneLang (79, 5)
. (79, 15)
Helpers (79, 16)
let (85, 0)
leadsExpr (85, 4)
tokens (85, 14)
= (85, 21)
match (86, 2)
tokens (86, 8)
with (86, 15)
| (87, 2)
( (87, 4)
token (87, 5)
, (87, 10)
_ (87, 12)
) (87, 13)
:: (87, 15)
_ (87, 18)
-> (87, 20)
tokenIsExprFirst (88, 4)
token (88, 21)
| (90, 2)
_ (90, 4)
-> (90, 6)
false (91, 4)
let (93, 0)
leadsArg (93, 4)
tokens (93, 13)
= (93, 20)
match (94, 2)
tokens (94, 8)
with (94, 15)
| (95, 2)
( (95, 4)
token (95, 5)
, (95, 10)
_ (95, 12)
) (95, 13)
:: (95, 15)
_ (95, 18)
-> (95, 20)
tokenIsArgFirst (96, 4)
token (96, 20)
| (98, 2)
_ (98, 4)
-> (98, 6)
false (99, 4)
let (101, 0)
leadsPat (101, 4)
tokens (101, 13)
= (101, 20)
match (102, 2)
tokens (102, 8)
with (102, 15)
| (103, 2)
( (103, 4)
token (103, 5)
, (103, 10)
_ (103, 12)
) (103, 13)
:: (103, 15)
_ (103, 18)
-> (103, 20)
tokenIsPatFirst (104, 4)
token (104, 20)
| (106, 2)
_ (106, 4)
-> (106, 6)
false (107, 4)
let (110, 0)
private (110, 4)
nextLoc (110, 12)
tokens (110, 20)
: (110, 26)
Loc (110, 28)
= (110, 32)
match (111, 2)
tokens (111, 8)
with (111, 15)
| (112, 2)
[ (112, 4)
] (112, 5)
-> (112, 7)
( (113, 4)
- (113, 5)
1 (113, 6)
, (113, 7)
0 (113, 9)
) (113, 10)
| (115, 2)
( (115, 4)
_ (115, 5)
, (115, 6)
loc (115, 8)
) (115, 11)
:: (115, 13)
_ (115, 16)
-> (115, 18)
loc (116, 4)
let (119, 0)
private (119, 4)
nextInside (119, 12)
baseLoc (119, 23)
tokens (119, 31)
: (119, 37)
bool (119, 39)
= (119, 44)
match (120, 2)
tokens (120, 8)
with (120, 15)
| (121, 2)
[ (121, 4)
] (121, 5)
-> (121, 7)
false (122, 4)
| (125, 2)
( (125, 4)
_ (125, 5)
, (125, 6)
loc (125, 8)
) (125, 11)
:: (125, 13)
_ (125, 16)
when (126, 4)
locInside (126, 9)
baseLoc (126, 19)
loc (126, 27)
-> (126, 31)
true (127, 4)
| (129, 2)
_ (129, 4)
-> (129, 6)
false (130, 4)
let (136, 0)
parseErrorCore (136, 4)
msg (136, 19)
loc (136, 23)
errors (136, 27)
= (136, 34)
let (137, 2)
msg (137, 6)
= (137, 10)
"PARSE ERROR: " (137, 12)
+ (137, 28)
msg (137, 30)
+ (137, 34)
" (" (137, 36)
+ (137, 41)
locToString (137, 43)
loc (137, 55)
+ (137, 59)
")" (137, 61)
( (138, 2)
msg (138, 3)
, (138, 6)
loc (138, 8)
) (138, 11)
:: (138, 13)
errors (138, 16)
let (140, 0)
parseTyError (140, 4)
msg (140, 17)
( (140, 21)
tokens (140, 22)
, (140, 28)
errors (140, 30)
) (140, 36)
= (140, 38)
let (141, 2)
loc (141, 6)
= (141, 10)
nextLoc (141, 12)
tokens (141, 20)
let (142, 2)
errors (142, 6)
= (142, 13)
parseErrorCore (142, 15)
msg (142, 30)
loc (142, 34)
errors (142, 38)
ATy (143, 2)
. (143, 5)
Missing (143, 6)
loc (143, 14)
, (143, 17)
tokens (143, 19)
, (143, 25)
errors (143, 27)
let (145, 0)
parsePatError (145, 4)
msg (145, 18)
( (145, 22)
tokens (145, 23)
, (145, 29)
errors (145, 31)
) (145, 37)
= (145, 39)
let (146, 2)
loc (146, 6)
= (146, 10)
nextLoc (146, 12)
tokens (146, 20)
let (147, 2)
errors (147, 6)
= (147, 13)
parseErrorCore (147, 15)
msg (147, 30)
loc (147, 34)
errors (147, 38)
APat (148, 2)
. (148, 6)
Missing (148, 7)
loc (148, 15)
, (148, 18)
tokens (148, 20)
, (148, 26)
errors (148, 28)
let (150, 0)
parseExprError (150, 4)
msg (150, 19)
( (150, 23)
tokens (150, 24)
, (150, 30)
errors (150, 32)
) (150, 38)
= (150, 40)
let (151, 2)
loc (151, 6)
= (151, 10)
nextLoc (151, 12)
tokens (151, 20)
let (152, 2)
errors (152, 6)
= (152, 13)
parseErrorCore (152, 15)
msg (152, 30)
loc (152, 34)
errors (152, 38)
AExpr (153, 2)
. (153, 7)
Missing (153, 8)
loc (153, 16)
, (153, 19)
tokens (153, 21)
, (153, 27)
errors (153, 29)
let (155, 0)
parseNewError (155, 4)
msg (155, 18)
( (155, 22)
tokens (155, 23)
, (155, 29)
errors (155, 31)
) (155, 37)
= (155, 39)
let (156, 2)
loc (156, 6)
= (156, 10)
nextLoc (156, 12)
tokens (156, 20)
parseErrorCore (157, 2)
msg (157, 17)
loc (157, 21)
errors (157, 25)
let (164, 0)
parseTyArgs (164, 4)
baseLoc (164, 16)
( (164, 24)
tokens (164, 25)
, (164, 31)
errors (164, 33)
) (164, 39)
= (164, 41)
match (165, 2)
tokens (165, 8)
with (165, 15)
| (166, 2)
( (166, 4)
Token (166, 5)
. (166, 10)
Lt (166, 11)
, (166, 13)
ltLoc (166, 15)
) (166, 20)
:: (166, 22)
tokens (166, 25)
when (166, 32)
locInside (166, 37)
baseLoc (166, 47)
ltLoc (166, 55)
-> (166, 61)
let (167, 4)
rec (167, 8)
go (167, 12)
acc (167, 15)
( (167, 19)
tokens (167, 20)
, (167, 26)
errors (167, 28)
) (167, 34)
= (167, 36)
match (168, 6)
tokens (168, 12)
with (168, 19)
| (169, 6)
( (169, 8)
Token (169, 9)
. (169, 14)
Comma (169, 15)
, (169, 20)
_ (169, 22)
) (169, 23)
:: (169, 25)
tokens (169, 28)
-> (169, 35)
let (170, 8)
argTy (170, 12)
, (170, 17)
tokens (170, 19)
, (170, 25)
errors (170, 27)
= (170, 34)
parseTy (170, 36)
baseLoc (170, 44)
( (170, 52)
tokens (170, 53)
, (170, 59)
errors (170, 61)
) (170, 67)
go (171, 8)
( (171, 11)
argTy (171, 12)
:: (171, 18)
acc (171, 21)
) (171, 24)
( (171, 26)
tokens (171, 27)
, (171, 33)
errors (171, 35)
) (171, 41)
| (173, 6)
_ (173, 8)
-> (173, 10)
listRev (174, 8)
acc (174, 16)
, (174, 19)
tokens (174, 21)
, (174, 27)
errors (174, 29)
let (176, 4)
argTy (176, 8)
, (176, 13)
tokens (176, 15)
, (176, 21)
errors (176, 23)
= (176, 30)
parseTy (176, 32)
baseLoc (176, 40)
( (176, 48)
tokens (176, 49)
, (176, 55)
errors (176, 57)
) (176, 63)
let (177, 4)
argTys (177, 8)
, (177, 14)
tokens (177, 16)
, (177, 22)
errors (177, 24)
= (177, 31)
go (177, 33)
[ (177, 36)
argTy (177, 37)
] (177, 42)
( (177, 44)
tokens (177, 45)
, (177, 51)
errors (177, 53)
) (177, 59)
let (179, 4)
tokens (179, 8)
, (179, 14)
errors (179, 16)
= (179, 23)
match (180, 6)
tokens (180, 12)
with (180, 19)
| (181, 6)
( (181, 8)
Token (181, 9)
. (181, 14)
Gt (181, 15)
, (181, 17)
_ (181, 19)
) (181, 20)
:: (181, 22)
tokens (181, 25)
-> (181, 32)
tokens (182, 8)
, (182, 14)
errors (182, 16)
| (184, 6)
_ (184, 8)
-> (184, 10)
let (185, 8)
errors (185, 12)
= (185, 19)
parseNewError (185, 21)
"Expected \'>\'" (185, 35)
( (185, 50)
tokens (185, 51)
, (185, 57)
errors (185, 59)
) (185, 65)
tokens (186, 8)
, (186, 14)
errors (186, 16)
argTys (188, 4)
, (188, 10)
tokens (188, 12)
, (188, 18)
errors (188, 20)
| (190, 2)
_ (190, 4)
-> (190, 6)
[ (191, 4)
] (191, 5)
, (191, 6)
tokens (191, 8)
, (191, 14)
errors (191, 16)
let (193, 0)
parseTyAtom (193, 4)
baseLoc (193, 16)
( (193, 24)
tokens (193, 25)
, (193, 31)
errors (193, 33)
) (193, 39)
= (193, 41)
match (194, 2)
tokens (194, 8)
with (194, 15)
| (195, 2)
_ (195, 4)
when (195, 6)
nextInside (195, 11)
baseLoc (195, 22)
tokens (195, 30)
|> (195, 37)
not (195, 40)
-> (195, 44)
parseTyError (196, 4)
"Expected a type atom" (196, 17)
( (196, 40)
tokens (196, 41)
, (196, 47)
errors (196, 49)
) (196, 55)
| (198, 2)
( (198, 4)
Token (198, 5)
. (198, 10)
Ident (198, 11)
ident (198, 17)
, (198, 22)
loc (198, 24)
) (198, 27)
:: (198, 29)
tokens (198, 32)
-> (198, 39)
let (199, 4)
argTys (199, 8)
, (199, 14)
tokens (199, 16)
, (199, 22)
errors (199, 24)
= (199, 31)
parseTyArgs (199, 33)
baseLoc (199, 45)
( (199, 53)
tokens (199, 54)
, (199, 60)
errors (199, 62)
) (199, 68)
ATy (200, 4)
. (200, 7)
App (200, 8)
( (200, 12)
ident (200, 13)
, (200, 18)
argTys (200, 20)
, (200, 26)
loc (200, 28)
) (200, 31)
, (200, 32)
tokens (200, 34)
, (200, 40)
errors (200, 42)
| (202, 2)
( (202, 4)
Token (202, 5)
. (202, 10)
ParenL (202, 11)
, (202, 17)
_ (202, 19)
) (202, 20)
:: (202, 22)
tokens (202, 25)
-> (202, 32)
let (203, 4)
ty (203, 8)
, (203, 10)
tokens (203, 12)
, (203, 18)
errors (203, 20)
= (203, 27)
parseTy (203, 29)
baseLoc (203, 37)
( (203, 45)
tokens (203, 46)
, (203, 52)
errors (203, 54)
) (203, 60)
match (205, 4)
tokens (205, 10)
with (205, 17)
| (206, 4)
( (206, 6)
Token (206, 7)
. (206, 12)
ParenR (206, 13)
, (206, 19)
_ (206, 21)
) (206, 22)
:: (206, 24)
tokens (206, 27)
-> (206, 34)
ty (207, 6)
, (207, 8)
tokens (207, 10)
, (207, 16)
errors (207, 18)
| (209, 4)
_ (209, 6)
-> (209, 8)
let (210, 6)
errors (210, 10)
= (210, 17)
parseNewError (210, 19)
"Expected \')\'" (210, 33)
( (210, 48)
tokens (210, 49)
, (210, 55)
errors (210, 57)
) (210, 63)
ty (211, 6)
, (211, 8)
tokens (211, 10)
, (211, 16)
errors (211, 18)
| (213, 2)
_ (213, 4)
-> (213, 6)
parseTyError (214, 4)
"Expected a type atom" (214, 17)
( (214, 40)
tokens (214, 41)
, (214, 47)
errors (214, 49)
) (214, 55)
let (217, 0)
parseTySuffix (217, 4)
baseLoc (217, 18)
( (217, 26)
tokens (217, 27)
, (217, 33)
errors (217, 35)
) (217, 41)
= (217, 43)
let (218, 2)
rec (218, 6)
go (218, 10)
( (218, 13)
ty (218, 14)
, (218, 16)
tokens (218, 18)
, (218, 24)
errors (218, 26)
) (218, 32)
= (218, 34)
let (219, 4)
inside (219, 8)
= (219, 15)
nextInside (219, 17)
baseLoc (219, 28)
tokens (219, 36)
match (220, 4)
tokens (220, 10)
with (220, 17)
| (221, 4)
( (221, 6)
Token (221, 7)
. (221, 12)
Ident (221, 13)
ident (221, 19)
, (221, 24)
loc (221, 26)
) (221, 29)
:: (221, 31)
tokens (221, 34)
when (221, 41)
inside (221, 46)
-> (221, 53)
go (222, 6)
( (222, 9)
ATy (222, 10)
. (222, 13)
Suffix (222, 14)
( (222, 21)
ty (222, 22)
, (222, 24)
ident (222, 26)
, (222, 31)
loc (222, 33)
) (222, 36)
, (222, 37)
tokens (222, 39)
, (222, 45)
errors (222, 47)
) (222, 53)
| (224, 4)
_ (224, 6)
-> (224, 8)
ty (225, 6)
, (225, 8)
tokens (225, 10)
, (225, 16)
errors (225, 18)
parseTyAtom (227, 2)
baseLoc (227, 14)
( (227, 22)
tokens (227, 23)
, (227, 29)
errors (227, 31)
) (227, 37)
|> (227, 39)
go (227, 42)
let (231, 0)
parseTyPrefix (231, 4)
baseLoc (231, 18)
( (231, 26)
tokens (231, 27)
, (231, 33)
errors (231, 35)
) (231, 41)
= (231, 43)
match (232, 2)
tokens (232, 8)
with (232, 15)
| (233, 2)
( (233, 4)
Token (233, 5)
. (233, 10)
Ident (233, 11)
_ (233, 17)
, (233, 18)
_ (233, 20)
) (233, 21)
:: (233, 23)
( (233, 26)
Token (233, 27)
. (233, 32)
Colon (233, 33)
, (233, 38)
_ (233, 40)
) (233, 41)
:: (233, 43)
tokens (233, 46)
-> (233, 53)
parseTySuffix (234, 4)
baseLoc (234, 18)
( (234, 26)
tokens (234, 27)
, (234, 33)
errors (234, 35)
) (234, 41)
| (236, 2)
_ (236, 4)
-> (236, 6)
parseTySuffix (237, 4)
baseLoc (237, 18)
( (237, 26)
tokens (237, 27)
, (237, 33)
errors (237, 35)
) (237, 41)
let (240, 0)
parseTyTuple (240, 4)
baseLoc (240, 17)
( (240, 25)
tokens (240, 26)
, (240, 32)
errors (240, 34)
) (240, 40)
= (240, 42)
let (241, 2)
rec (241, 6)
go (241, 10)
acc (241, 13)
( (241, 17)
tokens (241, 18)
, (241, 24)
errors (241, 26)
) (241, 32)
= (241, 34)
match (242, 4)
tokens (242, 10)
with (242, 17)
| (243, 4)
( (243, 6)
Token (243, 7)
. (243, 12)
Star (243, 13)
, (243, 17)
_ (243, 19)
) (243, 20)
:: (243, 22)
tokens (243, 25)
-> (243, 32)
let (244, 6)
itemTy (244, 10)
, (244, 16)
tokens (244, 18)
, (244, 24)
errors (244, 26)
= (244, 33)
parseTyPrefix (244, 35)
baseLoc (244, 49)
( (244, 57)
tokens (244, 58)
, (244, 64)
errors (244, 66)
) (244, 72)
go (245, 6)
( (245, 9)
itemTy (245, 10)
:: (245, 17)
acc (245, 20)
) (245, 23)
( (245, 25)
tokens (245, 26)
, (245, 32)
errors (245, 34)
) (245, 40)
| (247, 4)
_ (247, 6)
-> (247, 8)
listRev (248, 6)
acc (248, 14)
, (248, 17)
tokens (248, 19)
, (248, 25)
errors (248, 27)
let (250, 2)
itemTy (250, 6)
, (250, 12)
tokens (250, 14)
, (250, 20)
errors (250, 22)
= (250, 29)
parseTyPrefix (250, 31)
baseLoc (250, 45)
( (250, 53)
tokens (250, 54)
, (250, 60)
errors (250, 62)
) (250, 68)
match (252, 2)
tokens (252, 8)
with (252, 15)
| (253, 2)
( (253, 4)
Token (253, 5)
. (253, 10)
Star (253, 11)
, (253, 15)
opLoc (253, 17)
) (253, 22)
:: (253, 24)
_ (253, 27)
-> (253, 29)
let (254, 4)
itemTys (254, 8)
, (254, 15)
tokens (254, 17)
, (254, 23)
errors (254, 25)
= (254, 32)
go (254, 34)
[ (254, 37)
] (254, 38)
( (254, 40)
tokens (254, 41)
, (254, 47)
errors (254, 49)
) (254, 55)
ATy (255, 4)
. (255, 7)
Tuple (255, 8)
( (255, 14)
itemTy (255, 15)
:: (255, 22)
itemTys (255, 25)
, (255, 32)
opLoc (255, 34)
) (255, 39)
, (255, 40)
tokens (255, 42)
, (255, 48)
errors (255, 50)
| (257, 2)
_ (257, 4)
-> (257, 6)
itemTy (258, 4)
, (258, 10)
tokens (258, 12)
, (258, 18)
errors (258, 20)
let (262, 0)
parseTyFun (262, 4)
baseLoc (262, 15)
( (262, 23)
tokens (262, 24)
, (262, 30)
errors (262, 32)
) (262, 38)
= (262, 40)
let (263, 2)
sTy (263, 6)
, (263, 9)
tokens (263, 11)
, (263, 17)
errors (263, 19)
= (263, 26)
parseTyTuple (263, 28)
baseLoc (263, 41)
( (263, 49)
tokens (263, 50)
, (263, 56)
errors (263, 58)
) (263, 64)
match (265, 2)
tokens (265, 8)
with (265, 15)
| (266, 2)
( (266, 4)
Token (266, 5)
. (266, 10)
Arrow (266, 11)
, (266, 16)
opLoc (266, 18)
) (266, 23)
:: (266, 25)
tokens (266, 28)
-> (266, 35)
let (267, 4)
tTy (267, 8)
, (267, 11)
tokens (267, 13)
, (267, 19)
errors (267, 21)
= (267, 28)
parseTyFun (267, 30)
baseLoc (267, 41)
( (267, 49)
tokens (267, 50)
, (267, 56)
errors (267, 58)
) (267, 64)
ATy (268, 4)
. (268, 7)
Fun (268, 8)
( (268, 12)
sTy (268, 13)
, (268, 16)
tTy (268, 18)
, (268, 21)
opLoc (268, 23)
) (268, 28)
, (268, 29)
tokens (268, 31)
, (268, 37)
errors (268, 39)
| (270, 2)
_ (270, 4)
-> (270, 6)
sTy (271, 4)
, (271, 7)
tokens (271, 9)
, (271, 15)
errors (271, 17)
let (273, 0)
parseTy (273, 4)
baseLoc (273, 12)
( (273, 20)
tokens (273, 21)
, (273, 27)
errors (273, 29)
) (273, 35)
= (273, 37)
parseTyFun (274, 2)
baseLoc (274, 13)
( (274, 21)
tokens (274, 22)
, (274, 28)
errors (274, 30)
) (274, 36)
let (277, 0)
parseTyDeclUnion (277, 4)
baseLoc (277, 21)
( (277, 29)
tokens (277, 30)
, (277, 36)
errors (277, 38)
) (277, 44)
= (277, 46)
let (278, 2)
rec (278, 6)
go (278, 10)
acc (278, 13)
( (278, 17)
tokens (278, 18)
, (278, 24)
errors (278, 26)
) (278, 32)
= (278, 34)
match (279, 4)
tokens (279, 10)
with (279, 17)
| (280, 4)
( (280, 6)
Token (280, 7)
. (280, 12)
Pipe (280, 13)
, (280, 17)
_ (280, 19)
) (280, 20)
:: (281, 6)
( (281, 9)
Token (281, 10)
. (281, 15)
Ident (281, 16)
variantIdent (281, 22)
, (281, 34)
loc (281, 36)
) (281, 39)
:: (282, 6)
( (282, 9)
Token (282, 10)
. (282, 15)
Of (282, 16)
, (282, 18)
_ (282, 20)
) (282, 21)
:: (282, 23)
tokens (282, 26)
-> (282, 33)
let (283, 6)
payloadTy (283, 10)
, (283, 19)
tokens (283, 21)
, (283, 27)
errors (283, 29)
= (283, 36)
parseTy (283, 38)
baseLoc (283, 46)
( (283, 54)
tokens (283, 55)
, (283, 61)
errors (283, 63)
) (283, 69)
go (284, 6)
( (284, 9)
AVariant (284, 10)
( (284, 19)
variantIdent (284, 20)
, (284, 32)
Some (284, 34)
payloadTy (284, 39)
, (284, 48)
loc (284, 50)
) (284, 53)
:: (284, 55)
acc (284, 58)
) (284, 61)
( (284, 63)
tokens (284, 64)
, (284, 70)
errors (284, 72)
) (284, 78)
| (286, 4)
( (286, 6)
Token (286, 7)
. (286, 12)
Pipe (286, 13)
, (286, 17)
_ (286, 19)
) (286, 20)
:: (287, 6)
( (287, 9)
Token (287, 10)
. (287, 15)
Ident (287, 16)
variantIdent (287, 22)
, (287, 34)
loc (287, 36)
) (287, 39)
:: (287, 41)
tokens (287, 44)
-> (287, 51)
go (288, 6)
( (288, 9)
AVariant (288, 10)
( (288, 19)
variantIdent (288, 20)
, (288, 32)
None (288, 34)
, (288, 38)
loc (288, 40)
) (288, 43)
:: (288, 45)
acc (288, 48)
) (288, 51)
( (288, 53)
tokens (288, 54)
, (288, 60)
errors (288, 62)
) (288, 68)
| (290, 4)
_ (290, 6)
-> (290, 8)
listRev (291, 6)
acc (291, 14)
, (291, 17)
tokens (291, 19)
, (291, 25)
errors (291, 27)
let (293, 2)
variants (293, 6)
, (293, 14)
tokens (293, 16)
, (293, 22)
errors (293, 24)
= (293, 31)
go (293, 33)
[ (293, 36)
] (293, 37)
( (293, 39)
tokens (293, 40)
, (293, 46)
errors (293, 48)
) (293, 54)
ATyDecl (294, 2)
. (294, 9)
Union (294, 10)
variants (294, 16)
, (294, 24)
tokens (294, 26)
, (294, 32)
errors (294, 34)
let (298, 0)
parseTyDeclBody (298, 4)
baseLoc (298, 20)
( (298, 28)
tokens (298, 29)
, (298, 35)
errors (298, 37)
) (298, 43)
= (298, 45)
match (299, 2)
tokens (299, 8)
with (299, 15)
| (300, 2)
( (300, 4)
Token (300, 5)
. (300, 10)
Pipe (300, 11)
, (300, 15)
_ (300, 17)
) (300, 18)
:: (300, 20)
_ (300, 23)
-> (300, 25)
parseTyDeclUnion (301, 4)
baseLoc (301, 21)
( (301, 29)
tokens (301, 30)
, (301, 36)
errors (301, 38)
) (301, 44)
| (303, 2)
( (303, 4)
Token (303, 5)
. (303, 10)
Ident (303, 11)
_ (303, 17)
, (303, 18)
_ (303, 20)
) (303, 21)
:: (303, 23)
( (303, 26)
Token (303, 27)
. (303, 32)
Of (303, 33)
, (303, 35)
_ (303, 37)
) (303, 38)
:: (303, 40)
_ (303, 43)
-> (303, 45)
parseTyDeclUnion (304, 4)
baseLoc (304, 21)
( (304, 29)
tokens (304, 30)
, (304, 36)
errors (304, 38)
) (304, 44)
| (306, 2)
_ (306, 4)
-> (306, 6)
let (307, 4)
ty (307, 8)
, (307, 10)
tokens (307, 12)
, (307, 18)
errors (307, 20)
= (307, 27)
parseTy (307, 29)
baseLoc (307, 37)
( (307, 45)
tokens (307, 46)
, (307, 52)
errors (307, 54)
) (307, 60)
ATyDecl (308, 4)
. (308, 11)
Synonym (308, 12)
ty (308, 20)
, (308, 22)
tokens (308, 24)
, (308, 30)
errors (308, 32)
let (315, 0)
parsePatParenBody (315, 4)
baseLoc (315, 22)
( (315, 30)
tokens (315, 31)
, (315, 37)
errors (315, 39)
) (315, 45)
= (315, 47)
let (316, 2)
pat (316, 6)
, (316, 9)
tokens (316, 11)
, (316, 17)
errors (316, 19)
= (316, 26)
parsePat (316, 28)
baseLoc (316, 37)
( (316, 45)
tokens (316, 46)
, (316, 52)
errors (316, 54)
) (316, 60)
match (318, 2)
tokens (318, 8)
with (318, 15)
| (319, 2)
( (319, 4)
Token (319, 5)
. (319, 10)
ParenR (319, 11)
, (319, 17)
_ (319, 19)
) (319, 20)
:: (319, 22)
tokens (319, 25)
-> (319, 32)
pat (320, 4)
, (320, 7)
tokens (320, 9)
, (320, 15)
errors (320, 17)
| (322, 2)
tokens (322, 4)
-> (322, 11)
let (323, 4)
errors (323, 8)
= (323, 15)
parseNewError (323, 17)
"Expected \')\'" (323, 31)
( (323, 46)
tokens (323, 47)
, (323, 53)
errors (323, 55)
) (323, 61)
pat (324, 4)
, (324, 7)
tokens (324, 9)
, (324, 15)
errors (324, 17)
let (327, 0)
parsePatListBody (327, 4)
baseLoc (327, 21)
bracketLoc (327, 29)
( (327, 40)
tokens (327, 41)
, (327, 47)
errors (327, 49)
) (327, 55)
= (327, 57)
let (328, 2)
rec (328, 6)
go (328, 10)
patAcc (328, 13)
( (328, 20)
tokens (328, 21)
, (328, 27)
errors (328, 29)
) (328, 35)
= (328, 37)
match (329, 4)
tokens (329, 10)
with (329, 17)
| (330, 4)
( (330, 6)
Token (330, 7)
. (330, 12)
BracketR (330, 13)
, (330, 21)
_ (330, 23)
) (330, 24)
:: (330, 26)
tokens (330, 29)
-> (330, 36)
listRev (331, 6)
patAcc (331, 14)
, (331, 20)
tokens (331, 22)
, (331, 28)
errors (331, 30)
| (334, 4)
( (334, 6)
Token (334, 7)
. (334, 12)
Semi (334, 13)
, (334, 17)
_ (334, 19)
) (334, 20)
:: (334, 22)
tokens (334, 25)
-> (334, 32)
let (335, 6)
pat (335, 10)
, (335, 13)
tokens (335, 15)
, (335, 21)
errors (335, 23)
= (335, 30)
parsePat (335, 32)
baseLoc (335, 41)
( (335, 49)
tokens (335, 50)
, (335, 56)
errors (335, 58)
) (335, 64)
go (336, 6)
( (336, 9)
pat (336, 10)
:: (336, 14)
patAcc (336, 17)
) (336, 23)
( (336, 25)
tokens (336, 26)
, (336, 32)
errors (336, 34)
) (336, 40)
| (338, 4)
_ (338, 6)
-> (338, 8)
let (339, 6)
errors (339, 10)
= (339, 17)
parseNewError (339, 19)
"Expected \';\' or \']\'" (339, 33)
( (339, 55)
tokens (339, 56)
, (339, 62)
errors (339, 64)
) (339, 70)
listRev (340, 6)
patAcc (340, 14)
, (340, 20)
tokens (340, 22)
, (340, 28)
errors (340, 30)
let (342, 2)
itemPat (342, 6)
, (342, 13)
tokens (342, 15)
, (342, 21)
errors (342, 23)
= (342, 30)
parsePat (342, 32)
baseLoc (342, 41)
( (342, 49)
tokens (342, 50)
, (342, 56)
errors (342, 58)
) (342, 64)
let (343, 2)
itemPats (343, 6)
, (343, 14)
tokens (343, 16)
, (343, 22)
errors (343, 24)
= (343, 31)
go (343, 33)
[ (343, 36)
itemPat (343, 37)
] (343, 44)
( (343, 46)
tokens (343, 47)
, (343, 53)
errors (343, 55)
) (343, 61)
APat (344, 2)
. (344, 6)
ListLit (344, 7)
( (344, 15)
itemPats (344, 16)
, (344, 24)
bracketLoc (344, 26)
) (344, 36)
, (344, 37)
tokens (344, 39)
, (344, 45)
errors (344, 47)
let (346, 0)
parsePatAtom (346, 4)
baseLoc (346, 17)
( (346, 25)
tokens (346, 26)
, (346, 32)
errors (346, 34)
) (346, 40)
= (346, 42)
match (347, 2)
tokens (347, 8)
with (347, 15)
| (348, 2)
_ (348, 4)
when (348, 6)
not (348, 11)
( (348, 15)
nextInside (348, 16)
baseLoc (348, 27)
tokens (348, 35)
&& (348, 42)
leadsPat (348, 45)
tokens (348, 54)
) (348, 60)
-> (348, 62)
parsePatError (349, 4)
"Expected a pattern atom" (349, 18)
( (349, 44)
tokens (349, 45)
, (349, 51)
errors (349, 53)
) (349, 59)
| (351, 2)
( (351, 4)
Token (351, 5)
. (351, 10)
Bool (351, 11)
value (351, 16)
, (351, 21)
loc (351, 23)
) (351, 26)
:: (351, 28)
tokens (351, 31)
-> (351, 38)
APat (352, 4)
. (352, 8)
Lit (352, 9)
( (352, 13)
Lit (352, 14)
. (352, 17)
Bool (352, 18)
value (352, 23)
, (352, 28)
loc (352, 30)
) (352, 33)
, (352, 34)
tokens (352, 36)
, (352, 42)
errors (352, 44)
| (354, 2)
( (354, 4)
Token (354, 5)
. (354, 10)
Int (354, 11)
value (354, 15)
, (354, 20)
loc (354, 22)
) (354, 25)
:: (354, 27)
tokens (354, 30)
-> (354, 37)
APat (355, 4)
. (355, 8)
Lit (355, 9)
( (355, 13)
Lit (355, 14)
. (355, 17)
Int (355, 18)
value (355, 22)
, (355, 27)
loc (355, 29)
) (355, 32)
, (355, 33)
tokens (355, 35)
, (355, 41)
errors (355, 43)
| (357, 2)
( (357, 4)
Token (357, 5)
. (357, 10)
Char (357, 11)
value (357, 16)
, (357, 21)
loc (357, 23)
) (357, 26)
:: (357, 28)
tokens (357, 31)
-> (357, 38)
APat (358, 4)
. (358, 8)
Lit (358, 9)
( (358, 13)
Lit (358, 14)
. (358, 17)
Char (358, 18)
value (358, 23)
, (358, 28)
loc (358, 30)
) (358, 33)
, (358, 34)
tokens (358, 36)
, (358, 42)
errors (358, 44)
| (360, 2)
( (360, 4)
Token (360, 5)
. (360, 10)
Str (360, 11)
value (360, 15)
, (360, 20)
loc (360, 22)
) (360, 25)
:: (360, 27)
tokens (360, 30)
-> (360, 37)
APat (361, 4)
. (361, 8)
Lit (361, 9)
( (361, 13)
Lit (361, 14)
. (361, 17)
Str (361, 18)
value (361, 22)
, (361, 27)
loc (361, 29)
) (361, 32)
, (361, 33)
tokens (361, 35)
, (361, 41)
errors (361, 43)
| (363, 2)
( (363, 4)
Token (363, 5)
. (363, 10)
Ident (363, 11)
ident (363, 17)
, (363, 22)
loc (363, 24)
) (363, 27)
:: (363, 29)
tokens (363, 32)
-> (363, 39)
APat (364, 4)
. (364, 8)
Ident (364, 9)
( (364, 15)
ident (364, 16)
, (364, 21)
loc (364, 23)
) (364, 26)
, (364, 27)
tokens (364, 29)
, (364, 35)
errors (364, 37)
| (366, 2)
( (366, 4)
Token (366, 5)
. (366, 10)
ParenL (366, 11)
, (366, 17)
loc (366, 19)
) (366, 22)
:: (366, 24)
( (366, 27)
Token (366, 28)
. (366, 33)
ParenR (366, 34)
, (366, 40)
_ (366, 42)
) (366, 43)
:: (366, 45)
tokens (366, 48)
-> (366, 55)
APat (367, 4)
. (367, 8)
TupleLit (367, 9)
( (367, 18)
[ (367, 19)
] (367, 20)
, (367, 21)
loc (367, 23)
) (367, 26)
, (367, 27)
tokens (367, 29)
, (367, 35)
errors (367, 37)
| (369, 2)
( (369, 4)
Token (369, 5)
. (369, 10)
ParenL (369, 11)
, (369, 17)
_ (369, 19)
) (369, 20)
:: (369, 22)
tokens (369, 25)
-> (369, 32)
parsePatParenBody (370, 4)
baseLoc (370, 22)
( (370, 30)
tokens (370, 31)
, (370, 37)
errors (370, 39)
) (370, 45)
| (372, 2)
( (372, 4)
Token (372, 5)
. (372, 10)
BracketL (372, 11)
, (372, 19)
loc (372, 21)
) (372, 24)
:: (372, 26)
( (372, 29)
Token (372, 30)
. (372, 35)
BracketR (372, 36)
, (372, 44)
_ (372, 46)
) (372, 47)
:: (372, 49)
tokens (372, 52)
-> (372, 59)
APat (373, 4)
. (373, 8)
ListLit (373, 9)
( (373, 17)
[ (373, 18)
] (373, 19)
, (373, 20)
loc (373, 22)
) (373, 25)
, (373, 26)
tokens (373, 28)
, (373, 34)
errors (373, 36)
| (375, 2)
( (375, 4)
Token (375, 5)
. (375, 10)
BracketL (375, 11)
, (375, 19)
loc (375, 21)
) (375, 24)
:: (375, 26)
tokens (375, 29)
-> (375, 36)
parsePatListBody (376, 4)
baseLoc (376, 21)
loc (376, 29)
( (376, 33)
tokens (376, 34)
, (376, 40)
errors (376, 42)
) (376, 48)
| (378, 2)
_ (378, 4)
-> (378, 6)
parsePatError (379, 4)
"NEVER: The token must be a pat" (379, 18)
( (379, 51)
tokens (379, 52)
, (379, 58)
errors (379, 60)
) (379, 66)
let (382, 0)
parsePatNav (382, 4)
baseLoc (382, 16)
( (382, 24)
tokens (382, 25)
, (382, 31)
errors (382, 33)
) (382, 39)
= (382, 41)
let (383, 2)
pat (383, 6)
, (383, 9)
tokens (383, 11)
, (383, 17)
errors (383, 19)
= (383, 26)
parsePatAtom (383, 28)
baseLoc (383, 41)
( (383, 49)
tokens (383, 50)
, (383, 56)
errors (383, 58)
) (383, 64)
match (385, 2)
tokens (385, 8)
with (385, 15)
| (386, 2)
( (386, 4)
Token (386, 5)
. (386, 10)
Dot (386, 11)
, (386, 14)
loc (386, 16)
) (386, 19)
:: (386, 21)
( (386, 24)
Token (386, 25)
. (386, 30)
Ident (386, 31)
ident (386, 37)
, (386, 42)
_ (386, 44)
) (386, 45)
:: (386, 47)
tokens (386, 50)
-> (386, 57)
APat (387, 4)
. (387, 8)
Nav (387, 9)
( (387, 13)
pat (387, 14)
, (387, 17)
ident (387, 19)
, (387, 24)
loc (387, 26)
) (387, 29)
, (387, 30)
tokens (387, 32)
, (387, 38)
errors (387, 40)
| (389, 2)
( (389, 4)
Token (389, 5)
. (389, 10)
Dot (389, 11)
, (389, 14)
_ (389, 16)
) (389, 17)
:: (389, 19)
tokens (389, 22)
-> (389, 29)
parsePatError (390, 4)
"Expected identifier" (390, 18)
( (390, 40)
tokens (390, 41)
, (390, 47)
errors (390, 49)
) (390, 55)
| (392, 2)
_ (392, 4)
-> (392, 6)
pat (393, 4)
, (393, 7)
tokens (393, 9)
, (393, 15)
errors (393, 17)
let (395, 0)
parsePatCallArgs (395, 4)
baseLoc (395, 21)
calleeLoc (395, 29)
( (395, 39)
tokens (395, 40)
, (395, 46)
errors (395, 48)
) (395, 54)
= (395, 56)
let (397, 2)
argBaseLoc (397, 6)
= (397, 17)
locMax (397, 19)
baseLoc (397, 26)
calleeLoc (397, 34)
|> (397, 44)
locAddX (397, 47)
1 (397, 55)
let (399, 2)
rec (399, 6)
go (399, 10)
acc (399, 13)
( (399, 17)
tokens (399, 18)
, (399, 24)
errors (399, 26)
) (399, 32)
= (399, 34)
if (400, 4)
nextInside (400, 7)
argBaseLoc (400, 18)
tokens (400, 29)
&& (400, 36)
leadsPat (400, 39)
tokens (400, 48)
then (400, 55)
let (401, 6)
expr (401, 10)
, (401, 14)
tokens (401, 16)
, (401, 22)
errors (401, 24)
= (401, 31)
parsePatNav (401, 33)
baseLoc (401, 45)
( (401, 53)
tokens (401, 54)
, (401, 60)
errors (401, 62)
) (401, 68)
go (402, 6)
( (402, 9)
expr (402, 10)
:: (402, 15)
acc (402, 18)
) (402, 21)
( (402, 23)
tokens (402, 24)
, (402, 30)
errors (402, 32)
) (402, 38)
else (403, 4)
listRev (404, 6)
acc (404, 14)
, (404, 17)
tokens (404, 19)
, (404, 25)
errors (404, 27)
go (406, 2)
[ (406, 5)
] (406, 6)
( (406, 8)
tokens (406, 9)
, (406, 15)
errors (406, 17)
) (406, 23)
let (409, 0)
parsePatCall (409, 4)
baseLoc (409, 17)
( (409, 25)
tokens (409, 26)
, (409, 32)
errors (409, 34)
) (409, 40)
= (409, 42)
let (410, 2)
calleeLoc (410, 6)
= (410, 16)
nextLoc (410, 18)
tokens (410, 26)
let (411, 2)
callee (411, 6)
, (411, 12)
tokens (411, 14)
, (411, 20)
errors (411, 22)
= (411, 29)
parsePatNav (411, 31)
baseLoc (411, 43)
( (411, 51)
tokens (411, 52)
, (411, 58)
errors (411, 60)
) (411, 66)
let (412, 2)
args (412, 6)
, (412, 10)
tokens (412, 12)
, (412, 18)
errors (412, 20)
= (412, 27)
parsePatCallArgs (412, 29)
baseLoc (412, 46)
calleeLoc (412, 54)
( (412, 64)
tokens (412, 65)
, (412, 71)
errors (412, 73)
) (412, 79)
match (414, 2)
args (414, 8)
with (414, 13)
| (415, 2)
[ (415, 4)
] (415, 5)
-> (415, 7)
callee (416, 4)
, (416, 10)
tokens (416, 12)
, (416, 18)
errors (416, 20)
| (418, 2)
_ (418, 4)
-> (418, 6)
APat (419, 4)
. (419, 8)
Call (419, 9)
( (419, 14)
callee (419, 15)
, (419, 21)
args (419, 23)
, (419, 27)
calleeLoc (419, 29)
) (419, 38)
, (419, 39)
tokens (419, 41)
, (419, 47)
errors (419, 49)
let (422, 0)
parsePatCons (422, 4)
baseLoc (422, 17)
( (422, 25)
tokens (422, 26)
, (422, 32)
errors (422, 34)
) (422, 40)
= (422, 42)
let (423, 2)
head (423, 6)
, (423, 10)
tokens (423, 12)
, (423, 18)
errors (423, 20)
= (423, 27)
parsePatCall (423, 29)
baseLoc (423, 42)
( (423, 50)
tokens (423, 51)
, (423, 57)
errors (423, 59)
) (423, 65)
match (425, 2)
tokens (425, 8)
with (425, 15)
| (426, 2)
( (426, 4)
Token (426, 5)
. (426, 10)
ColonColon (426, 11)
, (426, 21)
loc (426, 23)
) (426, 26)
:: (426, 28)
tokens (426, 31)
-> (426, 38)
let (427, 4)
tail (427, 8)
, (427, 12)
tokens (427, 14)
, (427, 20)
errors (427, 22)
= (427, 29)
parsePatCons (427, 31)
baseLoc (427, 44)
( (427, 52)
tokens (427, 53)
, (427, 59)
errors (427, 61)
) (427, 67)
APat (428, 4)
. (428, 8)
Cons (428, 9)
( (428, 14)
head (428, 15)
, (428, 19)
tail (428, 21)
, (428, 25)
loc (428, 27)
) (428, 30)
, (428, 31)
tokens (428, 33)
, (428, 39)
errors (428, 41)
| (430, 2)
_ (430, 4)
-> (430, 6)
head (431, 4)
, (431, 8)
tokens (431, 10)
, (431, 16)
errors (431, 18)
let (434, 0)
parsePatAnno (434, 4)
baseLoc (434, 17)
( (434, 25)
tokens (434, 26)
, (434, 32)
errors (434, 34)
) (434, 40)
= (434, 42)
let (435, 2)
pat (435, 6)
, (435, 9)
tokens (435, 11)
, (435, 17)
errors (435, 19)
= (435, 26)
parsePatCons (435, 28)
baseLoc (435, 41)
( (435, 49)
tokens (435, 50)
, (435, 56)
errors (435, 58)
) (435, 64)
match (437, 2)
tokens (437, 8)
with (437, 15)
| (438, 2)
( (438, 4)
Token (438, 5)
. (438, 10)
Colon (438, 11)
, (438, 16)
loc (438, 18)
) (438, 21)
:: (438, 23)
tokens (438, 26)
-> (438, 33)
let (439, 4)
ty (439, 8)
, (439, 10)
tokens (439, 12)
, (439, 18)
errors (439, 20)
= (439, 27)
parseTy (439, 29)
( (439, 37)
nextLoc (439, 38)
tokens (439, 46)
) (439, 52)
( (439, 54)
tokens (439, 55)
, (439, 61)
errors (439, 63)
) (439, 69)
APat (440, 4)
. (440, 8)
Anno (440, 9)
( (440, 14)
pat (440, 15)
, (440, 18)
ty (440, 20)
, (440, 22)
loc (440, 24)
) (440, 27)
, (440, 28)
tokens (440, 30)
, (440, 36)
errors (440, 38)
| (442, 2)
_ (442, 4)
-> (442, 6)
pat (443, 4)
, (443, 7)
tokens (443, 9)
, (443, 15)
errors (443, 17)
let (446, 0)
parsePatTuple (446, 4)
baseLoc (446, 18)
( (446, 26)
tokens (446, 27)
, (446, 33)
errors (446, 35)
) (446, 41)
= (446, 43)
let (447, 2)
rec (447, 6)
go (447, 10)
acc (447, 13)
( (447, 17)
tokens (447, 18)
, (447, 24)
errors (447, 26)
) (447, 32)
= (447, 34)
match (448, 4)
tokens (448, 10)
with (448, 17)
| (449, 4)
( (449, 6)
Token (449, 7)
. (449, 12)
Comma (449, 13)
, (449, 18)
_ (449, 20)
) (449, 21)
:: (449, 23)
tokens (449, 26)
-> (449, 33)
let (450, 6)
second (450, 10)
, (450, 16)
tokens (450, 18)
, (450, 24)
errors (450, 26)
= (450, 33)
parsePatAnno (450, 35)
baseLoc (450, 48)
( (450, 56)
tokens (450, 57)
, (450, 63)
errors (450, 65)
) (450, 71)
go (451, 6)
( (451, 9)
second (451, 10)
:: (451, 17)
acc (451, 20)
) (451, 23)
( (451, 25)
tokens (451, 26)
, (451, 32)
errors (451, 34)
) (451, 40)
| (453, 4)
_ (453, 6)
-> (453, 8)
listRev (454, 6)
acc (454, 14)
, (454, 17)
tokens (454, 19)
, (454, 25)
errors (454, 27)
let (456, 2)
itemPat (456, 6)
, (456, 13)
tokens (456, 15)
, (456, 21)
errors (456, 23)
= (456, 30)
parsePatAnno (456, 32)
baseLoc (456, 45)
( (456, 53)
tokens (456, 54)
, (456, 60)
errors (456, 62)
) (456, 68)
match (458, 2)
tokens (458, 8)
with (458, 15)
| (459, 2)
( (459, 4)
Token (459, 5)
. (459, 10)
Comma (459, 11)
, (459, 16)
loc (459, 18)
) (459, 21)
:: (459, 23)
_ (459, 26)
-> (459, 28)
let (460, 4)
itemPats (460, 8)
, (460, 16)
tokens (460, 18)
, (460, 24)
errors (460, 26)
= (460, 33)
go (460, 35)
[ (460, 38)
] (460, 39)
( (460, 41)
tokens (460, 42)
, (460, 48)
errors (460, 50)
) (460, 56)
APat (461, 4)
. (461, 8)
TupleLit (461, 9)
( (461, 18)
itemPat (461, 19)
:: (461, 27)
itemPats (461, 30)
, (461, 38)
loc (461, 40)
) (461, 43)
, (461, 44)
tokens (461, 46)
, (461, 52)
errors (461, 54)
| (463, 2)
_ (463, 4)
-> (463, 6)
itemPat (464, 4)
, (464, 11)
tokens (464, 13)
, (464, 19)
errors (464, 21)
let (468, 0)
parsePatAs (468, 4)
baseLoc (468, 15)
( (468, 23)
tokens (468, 24)
, (468, 30)
errors (468, 32)
) (468, 38)
= (468, 40)
let (469, 2)
pat (469, 6)
, (469, 9)
tokens (469, 11)
, (469, 17)
errors (469, 19)
= (469, 26)
parsePatTuple (469, 28)
baseLoc (469, 42)
( (469, 50)
tokens (469, 51)
, (469, 57)
errors (469, 59)
) (469, 65)
match (471, 2)
tokens (471, 8)
with (471, 15)
| (472, 2)
( (472, 4)
Token (472, 5)
. (472, 10)
As (472, 11)
, (472, 13)
loc (472, 15)
) (472, 18)
:: (472, 20)
( (472, 23)
Token (472, 24)
. (472, 29)
Ident (472, 30)
ident (472, 36)
, (472, 41)
_ (472, 43)
) (472, 44)
:: (472, 46)
tokens (472, 49)
-> (472, 56)
APat (473, 4)
. (473, 8)
As (473, 9)
( (473, 12)
pat (473, 13)
, (473, 16)
ident (473, 18)
, (473, 23)
loc (473, 25)
) (473, 28)
, (473, 29)
tokens (473, 31)
, (473, 37)
errors (473, 39)
| (475, 2)
( (475, 4)
Token (475, 5)
. (475, 10)
As (475, 11)
, (475, 13)
_ (475, 15)
) (475, 16)
:: (475, 18)
tokens (475, 21)
-> (475, 28)
let (476, 4)
errors (476, 8)
= (476, 15)
parseNewError (476, 18)
"Expected an identifier" (476, 32)
( (476, 57)
tokens (476, 58)
, (476, 64)
errors (476, 66)
) (476, 72)
pat (477, 4)
, (477, 7)
tokens (477, 9)
, (477, 15)
errors (477, 17)
| (479, 2)
_ (479, 4)
-> (479, 6)
pat (480, 4)
, (480, 7)
tokens (480, 9)
, (480, 15)
errors (480, 17)
let (483, 0)
parsePatOr (483, 4)
baseLoc (483, 15)
( (483, 23)
tokens (483, 24)
, (483, 30)
errors (483, 32)
) (483, 38)
= (483, 40)
let (484, 2)
lPat (484, 6)
, (484, 10)
tokens (484, 12)
, (484, 18)
errors (484, 20)
= (484, 27)
parsePatAs (484, 29)
baseLoc (484, 40)
( (484, 48)
tokens (484, 49)
, (484, 55)
errors (484, 57)
) (484, 63)
match (486, 2)
tokens (486, 8)
with (486, 15)
| (487, 2)
( (487, 4)
Token (487, 5)
. (487, 10)
Pipe (487, 11)
, (487, 15)
loc (487, 17)
) (487, 20)
:: (487, 22)
tokens (487, 25)
-> (487, 32)
let (488, 4)
rPat (488, 8)
, (488, 12)
tokens (488, 14)
, (488, 20)
errors (488, 22)
= (488, 29)
parsePatOr (488, 31)
baseLoc (488, 42)
( (488, 50)
tokens (488, 51)
, (488, 57)
errors (488, 59)
) (488, 65)
APat (489, 4)
. (489, 8)
Or (489, 9)
( (489, 12)
lPat (489, 13)
, (489, 17)
rPat (489, 19)
, (489, 23)
loc (489, 25)
) (489, 28)
, (489, 29)
tokens (489, 31)
, (489, 37)
errors (489, 39)
| (491, 2)
_ (491, 4)
-> (491, 6)
lPat (492, 4)
, (492, 8)
tokens (492, 10)
, (492, 16)
errors (492, 18)
let (497, 0)
parsePatLet (497, 4)
baseLoc (497, 16)
( (497, 24)
tokens (497, 25)
, (497, 31)
errors (497, 33)
) (497, 39)
= (497, 41)
match (498, 2)
tokens (498, 8)
with (498, 15)
| (499, 2)
( (499, 4)
Token (499, 5)
. (499, 10)
Ident (499, 11)
callee (499, 17)
, (499, 23)
calleeLoc (499, 25)
) (499, 34)
:: (499, 36)
tokens (499, 39)
when (500, 4)
locInside (500, 9)
baseLoc (500, 19)
calleeLoc (500, 27)
&& (500, 37)
leadsPat (500, 40)
tokens (500, 49)
-> (500, 56)
let (501, 4)
args (501, 8)
, (501, 12)
tokens (501, 14)
, (501, 20)
errors (501, 22)
= (501, 29)
parsePatCallArgs (501, 31)
baseLoc (501, 48)
calleeLoc (501, 56)
( (501, 66)
tokens (501, 67)
, (501, 73)
errors (501, 75)
) (501, 81)
let (502, 4)
pat (502, 8)
= (502, 12)
APat (502, 14)
. (502, 18)
Fun (502, 19)
( (502, 23)
callee (502, 24)
, (502, 30)
args (502, 32)
, (502, 36)
calleeLoc (502, 38)
) (502, 47)
match (504, 4)
tokens (504, 10)
with (504, 17)
| (505, 4)
( (505, 6)
Token (505, 7)
. (505, 12)
Colon (505, 13)
, (505, 18)
loc (505, 20)
) (505, 23)
:: (505, 25)
tokens (505, 28)
-> (505, 35)
let (506, 6)
ty (506, 10)
, (506, 12)
tokens (506, 14)
, (506, 20)
errors (506, 22)
= (506, 29)
parseTy (506, 31)
baseLoc (506, 39)
( (506, 47)
tokens (506, 48)
, (506, 54)
errors (506, 56)
) (506, 62)
APat (507, 6)
. (507, 10)
Anno (507, 11)
( (507, 16)
pat (507, 17)
, (507, 20)
ty (507, 22)
, (507, 24)
loc (507, 26)
) (507, 29)
, (507, 30)
tokens (507, 32)
, (507, 38)
errors (507, 40)
| (509, 4)
_ (509, 6)
-> (509, 8)
pat (510, 6)
, (510, 9)
tokens (510, 11)
, (510, 17)
errors (510, 19)
| (512, 2)
_ (512, 4)
-> (512, 6)
parsePat (513, 4)
baseLoc (513, 13)
( (513, 21)
tokens (513, 22)
, (513, 28)
errors (513, 30)
) (513, 36)
let (516, 0)
parsePat (516, 4)
baseLoc (516, 13)
( (516, 21)
tokens (516, 22)
, (516, 28)
errors (516, 30)
) (516, 36)
= (516, 38)
if (517, 2)
not (517, 5)
( (517, 9)
nextInside (517, 10)
baseLoc (517, 21)
tokens (517, 29)
&& (517, 36)
leadsPat (517, 39)
tokens (517, 48)
) (517, 54)
then (517, 56)
parsePatError (518, 4)
"Expected a pattern" (518, 18)
( (518, 39)
tokens (518, 40)
, (518, 46)
errors (518, 48)
) (518, 54)
else (519, 2)
parsePatOr (520, 4)
baseLoc (520, 15)
( (520, 23)
tokens (520, 24)
, (520, 30)
errors (520, 32)
) (520, 38)
let (527, 0)
parseRange (527, 4)
baseLoc (527, 15)
( (527, 23)
tokens (527, 24)
, (527, 30)
errors (527, 32)
) (527, 38)
= (527, 40)
let (528, 2)
l (528, 6)
, (528, 7)
tokens (528, 9)
, (528, 15)
errors (528, 17)
= (528, 24)
parseExpr (528, 26)
baseLoc (528, 36)
( (528, 44)
tokens (528, 45)
, (528, 51)
errors (528, 53)
) (528, 59)
match (530, 2)
tokens (530, 8)
with (530, 15)
| (531, 2)
( (531, 4)
Token (531, 5)
. (531, 10)
DotDot (531, 11)
, (531, 17)
loc (531, 19)
) (531, 22)
:: (531, 24)
tokens (531, 27)
-> (531, 34)
let (532, 4)
r (532, 8)
, (532, 9)
tokens (532, 11)
, (532, 17)
errors (532, 19)
= (532, 26)
parseExpr (532, 28)
baseLoc (532, 38)
( (532, 46)
tokens (532, 47)
, (532, 53)
errors (532, 55)
) (532, 61)
AExpr (533, 4)
. (533, 9)
Range (533, 10)
( (533, 16)
[ (533, 17)
l (533, 18)
; (533, 19)
r (533, 21)
] (533, 22)
, (533, 23)
loc (533, 25)
) (533, 28)
, (533, 29)
tokens (533, 31)
, (533, 37)
errors (533, 39)
| (535, 2)
_ (535, 4)
-> (535, 6)
l (536, 4)
, (536, 5)
tokens (536, 7)
, (536, 13)
errors (536, 15)
let (538, 0)
parseList (538, 4)
baseLoc (538, 14)
bracketLoc (538, 22)
( (538, 33)
tokens (538, 34)
, (538, 40)
errors (538, 42)
) (538, 48)
= (538, 50)
let (539, 2)
items (539, 6)
, (539, 11)
tokens (539, 13)
, (539, 19)
errors (539, 21)
= (539, 28)
parseStmts (539, 30)
baseLoc (539, 41)
( (539, 49)
tokens (539, 50)
, (539, 56)
errors (539, 58)
) (539, 64)
let (541, 2)
tokens (541, 6)
, (541, 12)
errors (541, 14)
= (541, 21)
match (542, 4)
tokens (542, 10)
with (542, 17)
| (543, 4)
( (543, 6)
Token (543, 7)
. (543, 12)
BracketR (543, 13)
, (543, 21)
_ (543, 23)
) (543, 24)
:: (543, 26)
tokens (543, 29)
-> (543, 36)
tokens (544, 6)
, (544, 12)
errors (544, 14)
| (546, 4)
_ (546, 6)
-> (546, 8)
let (547, 6)
errors (547, 10)
= (547, 17)
parseNewError (547, 19)
"Expected \']\'" (547, 33)
( (547, 48)
tokens (547, 49)
, (547, 55)
errors (547, 57)
) (547, 63)
tokens (548, 6)
, (548, 12)
errors (548, 14)
AExpr (550, 2)
. (550, 7)
ListLit (550, 8)
( (550, 16)
items (550, 17)
, (550, 22)
bracketLoc (550, 24)
) (550, 34)
, (550, 35)
tokens (550, 37)
, (550, 43)
errors (550, 45)
let (552, 0)
parseThenClause (552, 4)
baseLoc (552, 20)
( (552, 28)
tokens (552, 29)
, (552, 35)
errors (552, 37)
) (552, 43)
= (552, 45)
let (553, 2)
innerBaseLoc (553, 6)
= (553, 19)
baseLoc (553, 21)
|> (553, 29)
locAddX (553, 32)
1 (553, 40)
match (555, 2)
tokens (555, 8)
with (555, 15)
| (556, 2)
( (556, 4)
Token (556, 5)
. (556, 10)
Then (556, 11)
, (556, 15)
thenLoc (556, 17)
) (556, 24)
:: (556, 26)
tokens (556, 29)
when (556, 36)
locInside (556, 41)
baseLoc (556, 51)
thenLoc (556, 59)
-> (556, 67)
parseSemi (557, 4)
innerBaseLoc (557, 14)
thenLoc (557, 27)
( (557, 35)
tokens (557, 36)
, (557, 42)
errors (557, 44)
) (557, 50)
| (559, 2)
_ (559, 4)
-> (559, 6)
parseExprError (560, 4)
"Expected \'then\'" (560, 19)
( (560, 37)
tokens (560, 38)
, (560, 44)
errors (560, 46)
) (560, 52)
let (562, 0)
parseElseClause (562, 4)
baseLoc (562, 20)
( (562, 28)
tokens (562, 29)
, (562, 35)
errors (562, 37)
) (562, 43)
= (562, 45)
match (563, 2)
tokens (563, 8)
with (563, 15)
| (564, 2)
( (564, 4)
Token (564, 5)
. (564, 10)
Else (564, 11)
, (564, 15)
elseLoc (564, 17)
) (564, 24)
:: (564, 26)
( (564, 29)
Token (564, 30)
. (564, 35)
If (564, 36)
, (564, 38)
nextIfLoc (564, 40)
) (564, 49)
:: (564, 51)
tokens (564, 54)
when (565, 4)
locInside (565, 9)
baseLoc (565, 19)
elseLoc (565, 27)
&& (565, 35)
locIsSameRow (565, 38)
elseLoc (565, 51)
nextIfLoc (565, 59)
-> (565, 69)
parseExpr (567, 4)
baseLoc (567, 14)
( (567, 22)
( (567, 23)
Token (567, 24)
. (567, 29)
If (567, 30)
, (567, 32)
elseLoc (567, 34)
) (567, 41)
:: (567, 43)
tokens (567, 46)
, (567, 52)
errors (567, 54)
) (567, 60)
| (569, 2)
( (569, 4)
Token (569, 5)
. (569, 10)
Else (569, 11)
, (569, 15)
elseLoc (569, 17)
) (569, 24)
:: (569, 26)
tokens (569, 29)
when (570, 4)
locInside (570, 9)
baseLoc (570, 19)
elseLoc (570, 27)
-> (570, 35)
parseSemi (571, 4)
baseLoc (571, 14)
elseLoc (571, 22)
( (571, 30)
tokens (571, 31)
, (571, 37)
errors (571, 39)
) (571, 45)
| (573, 2)
_ (573, 4)
-> (573, 6)
AExpr (574, 4)
. (574, 9)
Missing (574, 10)
baseLoc (574, 18)
, (574, 25)
tokens (574, 27)
, (574, 33)
errors (574, 35)
let (576, 0)
parseIf (576, 4)
ifLoc (576, 12)
( (576, 18)
tokens (576, 19)
, (576, 25)
errors (576, 27)
) (576, 33)
= (576, 35)
let (577, 2)
innerBaseLoc (577, 6)
= (577, 19)
ifLoc (577, 21)
|> (577, 27)
locAddX (577, 30)
1 (577, 38)
let (579, 2)
cond (579, 6)
, (579, 10)
tokens (579, 12)
, (579, 18)
errors (579, 20)
= (579, 27)
parseExpr (579, 29)
innerBaseLoc (579, 39)
( (579, 52)
tokens (579, 53)
, (579, 59)
errors (579, 61)
) (579, 67)
let (580, 2)
body (580, 6)
, (580, 10)
tokens (580, 12)
, (580, 18)
errors (580, 20)
= (580, 27)
parseThenClause (580, 29)
ifLoc (580, 45)
( (580, 51)
tokens (580, 52)
, (580, 58)
errors (580, 60)
) (580, 66)
let (581, 2)
alt (581, 6)
, (581, 9)
tokens (581, 11)
, (581, 17)
errors (581, 19)
= (581, 26)
parseElseClause (581, 28)
ifLoc (581, 44)
( (581, 50)
tokens (581, 51)
, (581, 57)
errors (581, 59)
) (581, 65)
AExpr (582, 2)
. (582, 7)
If (582, 8)
( (582, 11)
cond (582, 12)
, (582, 16)
body (582, 18)
, (582, 22)
alt (582, 24)
, (582, 27)
ifLoc (582, 29)
) (582, 34)
, (582, 35)
tokens (582, 37)
, (582, 43)
errors (582, 45)
let (585, 0)
parseMatchArm (585, 4)
matchLoc (585, 18)
armLoc (585, 27)
( (585, 34)
tokens (585, 35)
, (585, 41)
errors (585, 43)
) (585, 49)
= (585, 51)
let (586, 2)
innerBaseLoc (586, 6)
= (586, 19)
matchLoc (586, 21)
|> (586, 30)
locAddX (586, 33)
1 (586, 41)
let (588, 2)
pat (588, 6)
, (588, 9)
tokens (588, 11)
, (588, 17)
errors (588, 19)
= (588, 26)
parsePat (588, 28)
innerBaseLoc (588, 37)
( (588, 50)
tokens (588, 51)
, (588, 57)
errors (588, 59)
) (588, 65)
let (590, 2)
guard (590, 6)
, (590, 11)
tokens (590, 13)
, (590, 19)
errors (590, 21)
= (590, 28)
match (591, 4)
tokens (591, 10)
with (591, 17)
| (592, 4)
( (592, 6)
Token (592, 7)
. (592, 12)
When (592, 13)
, (592, 17)
_ (592, 19)
) (592, 20)
:: (592, 22)
tokens (592, 25)
-> (592, 32)
parseExpr (593, 6)
innerBaseLoc (593, 16)
( (593, 29)
tokens (593, 30)
, (593, 36)
errors (593, 38)
) (593, 44)
| (595, 4)
_ (595, 6)
-> (595, 8)
let (596, 6)
guard (596, 10)
= (596, 16)
AExpr (596, 18)
. (596, 23)
Missing (596, 24)
( (596, 32)
nextLoc (596, 33)
tokens (596, 41)
) (596, 47)
guard (597, 6)
, (597, 11)
tokens (597, 13)
, (597, 19)
errors (597, 21)
let (599, 2)
body (599, 6)
, (599, 10)
tokens (599, 12)
, (599, 18)
errors (599, 20)
= (599, 27)
match (600, 4)
tokens (600, 10)
with (600, 17)
| (601, 4)
( (601, 6)
Token (601, 7)
. (601, 12)
Arrow (601, 13)
, (601, 18)
arrowLoc (601, 20)
) (601, 28)
:: (601, 30)
tokens (601, 33)
-> (601, 40)
parseSemi (602, 6)
matchLoc (602, 16)
arrowLoc (602, 25)
( (602, 34)
tokens (602, 35)
, (602, 41)
errors (602, 43)
) (602, 49)
| (604, 4)
_ (604, 6)
-> (604, 8)
parseExprError (605, 6)
"Expected \'->\'" (605, 21)
( (605, 37)
tokens (605, 38)
, (605, 44)
errors (605, 46)
) (605, 52)
AArm (607, 2)
( (607, 7)
pat (607, 8)
, (607, 11)
guard (607, 13)
, (607, 18)
body (607, 20)
, (607, 24)
armLoc (607, 26)
) (607, 32)
, (607, 33)
tokens (607, 35)
, (607, 41)
errors (607, 43)
let (609, 0)
parseMatch (609, 4)
matchLoc (609, 15)
( (609, 24)
tokens (609, 25)
, (609, 31)
errors (609, 33)
) (609, 39)
= (609, 41)
let (610, 2)
target (610, 6)
, (610, 12)
tokens (610, 14)
, (610, 20)
errors (610, 22)
= (610, 29)
parseExpr (610, 31)
matchLoc (610, 41)
( (610, 50)
tokens (610, 51)
, (610, 57)
errors (610, 59)
) (610, 65)
let (612, 2)
armLoc (612, 6)
, (612, 12)
tokens (612, 14)
, (612, 20)
errors (612, 22)
= (612, 29)
match (613, 4)
tokens (613, 10)
with (613, 17)
| (614, 4)
( (614, 6)
Token (614, 7)
. (614, 12)
With (614, 13)
, (614, 17)
_ (614, 19)
) (614, 20)
:: (614, 22)
( (614, 25)
Token (614, 26)
. (614, 31)
Pipe (614, 32)
, (614, 36)
pipeLoc (614, 38)
) (614, 45)
:: (614, 47)
tokens (614, 50)
-> (614, 57)
pipeLoc (615, 6)
, (615, 13)
tokens (615, 15)
, (615, 21)
errors (615, 23)
| (617, 4)
( (617, 6)
Token (617, 7)
. (617, 12)
With (617, 13)
, (617, 17)
withLoc (617, 19)
) (617, 26)
:: (617, 28)
tokens (617, 31)
-> (617, 38)
withLoc (618, 6)
, (618, 13)
tokens (618, 15)
, (618, 21)
errors (618, 23)
| (620, 4)
_ (620, 6)
-> (620, 8)
let (621, 6)
errors (621, 10)
= (621, 17)
parseNewError (621, 19)
"Expected \'with\'" (621, 33)
( (621, 51)
tokens (621, 52)
, (621, 58)
errors (621, 60)
) (621, 66)
matchLoc (622, 6)
, (622, 14)
tokens (622, 16)
, (622, 22)
errors (622, 24)
let (624, 2)
rec (624, 6)
go (624, 10)
acc (624, 13)
armLoc (624, 17)
( (624, 24)
tokens (624, 25)
, (624, 31)
errors (624, 33)
) (624, 39)
= (624, 41)
let (625, 4)
arm (625, 8)
, (625, 11)
tokens (625, 13)
, (625, 19)
errors (625, 21)
= (625, 28)
parseMatchArm (625, 30)
matchLoc (625, 44)
armLoc (625, 53)
( (625, 60)
tokens (625, 61)
, (625, 67)
errors (625, 69)
) (625, 75)
match (627, 4)
tokens (627, 10)
with (627, 17)
| (628, 4)
( (628, 6)
Token (628, 7)
. (628, 12)
Pipe (628, 13)
, (628, 17)
pipeLoc (628, 19)
) (628, 26)
:: (628, 28)
tokens (628, 31)
when (628, 38)
locInside (628, 43)
matchLoc (628, 53)
pipeLoc (628, 62)
-> (628, 70)
go (629, 6)
( (629, 9)
arm (629, 10)
:: (629, 14)
acc (629, 17)
) (629, 20)
pipeLoc (629, 22)
( (629, 30)
tokens (629, 31)
, (629, 37)
errors (629, 39)
) (629, 45)
| (631, 4)
_ (631, 6)
-> (631, 8)
listRev (632, 6)
( (632, 14)
arm (632, 15)
:: (632, 19)
acc (632, 22)
) (632, 25)
, (632, 26)
tokens (632, 28)
, (632, 34)
errors (632, 36)
let (634, 2)
arms (634, 6)
, (634, 10)
tokens (634, 12)
, (634, 18)
errors (634, 20)
= (634, 27)
go (634, 29)
[ (634, 32)
] (634, 33)
armLoc (634, 35)
( (634, 42)
tokens (634, 43)
, (634, 49)
errors (634, 51)
) (634, 57)
AExpr (635, 2)
. (635, 7)
Match (635, 8)
( (635, 14)
target (635, 15)
, (635, 21)
arms (635, 23)
, (635, 27)
matchLoc (635, 29)
) (635, 37)
, (635, 38)
tokens (635, 40)
, (635, 46)
errors (635, 48)
let (638, 0)
parseFun (638, 4)
baseLoc (638, 13)
funLoc (638, 21)
( (638, 28)
tokens (638, 29)
, (638, 35)
errors (638, 37)
) (638, 43)
= (638, 45)
let (639, 2)
pats (639, 6)
, (639, 10)
tokens (639, 12)
, (639, 18)
errors (639, 20)
= (639, 27)
parsePatCallArgs (639, 29)
baseLoc (639, 46)
funLoc (639, 54)
( (639, 61)
tokens (639, 62)
, (639, 68)
errors (639, 70)
) (639, 76)
let (641, 2)
body (641, 6)
, (641, 10)
tokens (641, 12)
, (641, 18)
errors (641, 20)
= (641, 27)
match (642, 4)
tokens (642, 10)
with (642, 17)
| (643, 4)
( (643, 6)
Token (643, 7)
. (643, 12)
Arrow (643, 13)
, (643, 18)
arrowLoc (643, 20)
) (643, 28)
:: (643, 30)
tokens (643, 33)
-> (643, 40)
parseSemi (644, 6)
baseLoc (644, 16)
arrowLoc (644, 24)
( (644, 33)
tokens (644, 34)
, (644, 40)
errors (644, 42)
) (644, 48)
| (646, 4)
_ (646, 6)
-> (646, 8)
parseExprError (647, 6)
"Missing \'->\'" (647, 21)
( (647, 36)
tokens (647, 37)
, (647, 43)
errors (647, 45)
) (647, 51)
AExpr (649, 2)
. (649, 7)
Fun (649, 8)
( (649, 12)
pats (649, 13)
, (649, 17)
body (649, 19)
, (649, 23)
funLoc (649, 25)
) (649, 31)
, (649, 32)
tokens (649, 34)
, (649, 40)
errors (649, 42)
let (651, 0)
parseParenBody (651, 4)
baseLoc (651, 19)
parenLoc (651, 27)
( (651, 36)
tokens (651, 37)
, (651, 43)
errors (651, 45)
) (651, 51)
= (651, 53)
let (652, 2)
body (652, 6)
, (652, 10)
tokens (652, 12)
, (652, 18)
errors (652, 20)
= (652, 27)
parseSemi (652, 29)
baseLoc (652, 39)
parenLoc (652, 47)
( (652, 56)
tokens (652, 57)
, (652, 63)
errors (652, 65)
) (652, 71)
match (654, 2)
tokens (654, 8)
with (654, 15)
| (655, 2)
( (655, 4)
Token (655, 5)
. (655, 10)
ParenR (655, 11)
, (655, 17)
_ (655, 19)
) (655, 20)
:: (655, 22)
tokens (655, 25)
-> (655, 32)
body (656, 4)
, (656, 8)
tokens (656, 10)
, (656, 16)
errors (656, 18)
| (658, 2)
_ (658, 4)
-> (658, 6)
let (659, 4)
errors (659, 8)
= (659, 15)
parseNewError (659, 17)
"Expected \')\'" (659, 31)
( (659, 46)
tokens (659, 47)
, (659, 53)
errors (659, 55)
) (659, 61)
body (660, 4)
, (660, 8)
tokens (660, 10)
, (660, 16)
errors (660, 18)
let (662, 0)
parseAccessModifier (662, 4)
tokens (662, 24)
= (662, 31)
match (663, 2)
tokens (663, 8)
with (663, 15)
| (664, 2)
( (664, 4)
t (664, 5)
, (664, 6)
_ (664, 8)
) (664, 9)
:: (664, 11)
tokens (664, 14)
when (664, 21)
t (664, 26)
|> (664, 28)
tokenIsAccessModifier (664, 31)
-> (664, 53)
tokens (666, 4)
| (668, 2)
_ (668, 4)
-> (668, 6)
tokens (669, 4)
let (671, 0)
parseLet (671, 4)
letLoc (671, 13)
( (671, 20)
tokens (671, 21)
, (671, 27)
errors (671, 29)
) (671, 35)
= (671, 37)
let (672, 2)
innerBaseLoc (672, 6)
= (672, 19)
letLoc (672, 21)
|> (672, 28)
locAddX (672, 31)
1 (672, 39)
let (674, 2)
tokens (674, 6)
= (674, 13)
parseAccessModifier (674, 15)
tokens (674, 35)
let (676, 2)
pat (676, 6)
, (676, 9)
tokens (676, 11)
, (676, 17)
errors (676, 19)
= (676, 26)
parsePatLet (676, 28)
innerBaseLoc (676, 40)
( (676, 53)
tokens (676, 54)
, (676, 60)
errors (676, 62)
) (676, 68)
let (678, 2)
body (678, 6)
, (678, 10)
tokens (678, 12)
, (678, 18)
errors (678, 20)
= (678, 27)
match (679, 4)
tokens (679, 10)
with (679, 17)
| (680, 4)
( (680, 6)
Token (680, 7)
. (680, 12)
Eq (680, 13)
, (680, 15)
eqLoc (680, 17)
) (680, 22)
:: (680, 24)
tokens (680, 27)
-> (680, 34)
parseSemi (681, 6)
innerBaseLoc (681, 16)
eqLoc (681, 29)
( (681, 35)
tokens (681, 36)
, (681, 42)
errors (681, 44)
) (681, 50)
| (683, 4)
_ (683, 6)
-> (683, 8)
parseExprError (684, 6)
"Missing \'=\'" (684, 21)
( (684, 35)
tokens (684, 36)
, (684, 42)
errors (684, 44)
) (684, 50)
let (686, 2)
next (686, 6)
, (686, 10)
tokens (686, 12)
, (686, 18)
errors (686, 20)
= (686, 27)
match (687, 4)
tokens (687, 10)
with (687, 17)
| (688, 4)
( (688, 6)
Token (688, 7)
. (688, 12)
In (688, 13)
, (688, 15)
inLoc (688, 17)
) (688, 22)
:: (688, 24)
tokens (688, 27)
when (688, 34)
locInside (688, 39)
letLoc (688, 49)
inLoc (688, 56)
-> (688, 62)
parseSemi (689, 6)
letLoc (689, 16)
inLoc (689, 23)
( (689, 29)
tokens (689, 30)
, (689, 36)
errors (689, 38)
) (689, 44)
| (691, 4)
_ (691, 6)
:: (691, 8)
_ (691, 11)
when (691, 13)
locIsSameColumn (691, 18)
( (691, 34)
nextLoc (691, 35)
tokens (691, 43)
) (691, 49)
letLoc (691, 51)
-> (691, 58)
parseSemi (693, 6)
letLoc (693, 16)
( (693, 23)
nextLoc (693, 24)
tokens (693, 32)
) (693, 38)
( (693, 40)
tokens (693, 41)
, (693, 47)
errors (693, 49)
) (693, 55)
| (695, 4)
tokens (695, 6)
-> (695, 13)
AExpr (696, 6)
. (696, 11)
TupleLit (696, 12)
( (696, 21)
[ (696, 22)
] (696, 23)
, (696, 24)
letLoc (696, 26)
) (696, 32)
, (696, 33)
tokens (696, 35)
, (696, 41)
errors (696, 43)
AExpr (698, 2)
. (698, 7)
Let (698, 8)
( (698, 12)
pat (698, 13)
, (698, 16)
body (698, 18)
, (698, 22)
next (698, 24)
, (698, 28)
letLoc (698, 30)
) (698, 36)
, (698, 37)
tokens (698, 39)
, (698, 45)
errors (698, 47)
let (700, 0)
parseTyDecl (700, 4)
typeLoc (700, 16)
( (700, 24)
tokens (700, 25)
, (700, 31)
errors (700, 33)
) (700, 39)
= (700, 41)
let (701, 2)
baseLoc (701, 6)
= (701, 14)
typeLoc (701, 16)
|> (701, 24)
locAddX (701, 27)
1 (701, 35)
let (703, 2)
tokens (703, 6)
= (703, 13)
parseAccessModifier (703, 15)
tokens (703, 35)
match (705, 2)
tokens (705, 8)
with (705, 15)
| (706, 2)
( (706, 4)
Token (706, 5)
. (706, 10)
Ident (706, 11)
tyIdent (706, 17)
, (706, 24)
_ (706, 26)
) (706, 27)
:: (706, 29)
tokens (706, 32)
-> (706, 39)
match (707, 4)
tokens (707, 10)
with (707, 17)
| (708, 4)
( (708, 6)
Token (708, 7)
. (708, 12)
Eq (708, 13)
, (708, 15)
_ (708, 17)
) (708, 18)
:: (708, 20)
tokens (708, 23)
-> (708, 30)
let (709, 6)
tyDecl (709, 10)
, (709, 16)
tokens (709, 18)
, (709, 24)
errors (709, 26)
= (709, 33)
parseTyDeclBody (709, 35)
baseLoc (709, 51)
( (709, 59)
tokens (709, 60)
, (709, 66)
errors (709, 68)
) (709, 74)
let (711, 6)
expr (711, 10)
= (711, 15)
match (712, 8)
tyDecl (712, 14)
with (712, 21)
| (713, 8)
ATyDecl (713, 10)
. (713, 17)
Synonym (713, 18)
ty (713, 26)
-> (713, 29)
AExpr (714, 10)
. (714, 15)
TySynonym (714, 16)
( (714, 26)
tyIdent (714, 27)
, (714, 34)
ty (714, 36)
, (714, 38)
typeLoc (714, 40)
) (714, 47)
| (716, 8)
ATyDecl (716, 10)
. (716, 17)
Union (716, 18)
variants (716, 24)
-> (716, 33)
AExpr (717, 10)
. (717, 15)
TyUnion (717, 16)
( (717, 24)
tyIdent (717, 25)
, (717, 32)
variants (717, 34)
, (717, 42)
typeLoc (717, 44)
) (717, 51)
expr (719, 6)
, (719, 10)
tokens (719, 12)
, (719, 18)
errors (719, 20)
| (721, 4)
_ (721, 6)
-> (721, 8)
let (722, 6)
ty (722, 10)
, (722, 12)
tokens (722, 14)
, (722, 20)
errors (722, 22)
= (722, 29)
parseTyError (722, 31)
"Expected \'=\'" (722, 44)
( (722, 59)
tokens (722, 60)
, (722, 66)
errors (722, 68)
) (722, 74)
AExpr (723, 6)
. (723, 11)
TySynonym (723, 12)
( (723, 22)
tyIdent (723, 23)
, (723, 30)
ty (723, 32)
, (723, 34)
typeLoc (723, 36)
) (723, 43)
, (723, 44)
tokens (723, 46)
, (723, 52)
errors (723, 54)
| (725, 2)
_ (725, 4)
-> (725, 6)
parseExprError (726, 4)
"Expected identifier" (726, 19)
( (726, 41)
tokens (726, 42)
, (726, 48)
errors (726, 50)
) (726, 56)
let (729, 0)
parseOpen (729, 4)
openLoc (729, 14)
( (729, 22)
tokens (729, 23)
, (729, 29)
errors (729, 31)
) (729, 37)
= (729, 39)
let (730, 2)
parsePath (730, 6)
( (730, 16)
tokens (730, 17)
, (730, 23)
errors (730, 25)
) (730, 31)
= (730, 33)
let (731, 4)
rec (731, 8)
go (731, 12)
acc (731, 15)
( (731, 19)
tokens (731, 20)
, (731, 26)
errors (731, 28)
) (731, 34)
= (731, 36)
match (732, 6)
tokens (732, 12)
with (732, 19)
| (733, 6)
( (733, 8)
Token (733, 9)
. (733, 14)
Dot (733, 15)
, (733, 18)
_ (733, 20)
) (733, 21)
:: (733, 23)
( (733, 26)
Token (733, 27)
. (733, 32)
Ident (733, 33)
ident (733, 39)
, (733, 44)
_ (733, 46)
) (733, 47)
:: (733, 49)
tokens (733, 52)
-> (733, 59)
go (734, 8)
( (734, 11)
ident (734, 12)
:: (734, 18)
acc (734, 21)
) (734, 24)
( (734, 26)
tokens (734, 27)
, (734, 33)
errors (734, 35)
) (734, 41)
| (736, 6)
( (736, 8)
Token (736, 9)
. (736, 14)
Dot (736, 15)
, (736, 18)
_ (736, 20)
) (736, 21)
:: (736, 23)
tokens (736, 26)
-> (736, 33)
let (737, 8)
errors (737, 12)
= (737, 19)
parseNewError (737, 21)
"Expected identifier" (737, 35)
( (737, 57)
tokens (737, 58)
, (737, 64)
errors (737, 66)
) (737, 72)
listRev (738, 8)
acc (738, 16)
, (738, 19)
tokens (738, 21)
, (738, 27)
errors (738, 29)
| (740, 6)
_ (740, 8)
-> (740, 10)
listRev (741, 8)
acc (741, 16)
, (741, 19)
tokens (741, 21)
, (741, 27)
errors (741, 29)
match (743, 4)
tokens (743, 10)
with (743, 17)
| (744, 4)
( (744, 6)
Token (744, 7)
. (744, 12)
Ident (744, 13)
ident (744, 19)
, (744, 24)
_ (744, 26)
) (744, 27)
:: (744, 29)
tokens (744, 32)
-> (744, 39)
go (745, 6)
[ (745, 9)
ident (745, 10)
] (745, 15)
( (745, 17)
tokens (745, 18)
, (745, 24)
errors (745, 26)
) (745, 32)
| (747, 4)
_ (747, 6)
-> (747, 8)
let (748, 6)
errors (748, 10)
= (748, 17)
parseNewError (748, 19)
"Expected identifier" (748, 33)
( (748, 55)
tokens (748, 56)
, (748, 62)
errors (748, 64)
) (748, 70)
[ (749, 6)
] (749, 7)
, (749, 8)
tokens (749, 10)
, (749, 16)
errors (749, 18)
let (751, 2)
path (751, 6)
, (751, 10)
tokens (751, 12)
, (751, 18)
errors (751, 20)
= (751, 27)
parsePath (751, 29)
( (751, 39)
tokens (751, 40)
, (751, 46)
errors (751, 48)
) (751, 54)
AExpr (752, 2)
. (752, 7)
Open (752, 8)
( (752, 13)
path (752, 14)
, (752, 18)
openLoc (752, 20)
) (752, 27)
, (752, 28)
tokens (752, 30)
, (752, 36)
errors (752, 38)
let (754, 0)
parseAtom (754, 4)
baseLoc (754, 14)
( (754, 22)
tokens (754, 23)
, (754, 29)
errors (754, 31)
) (754, 37)
= (754, 39)
match (755, 2)
tokens (755, 8)
with (755, 15)
| (756, 2)
_ (756, 4)
when (756, 6)
not (756, 11)
( (756, 15)
nextInside (756, 16)
baseLoc (756, 27)
tokens (756, 35)
) (756, 41)
-> (756, 43)
parseExprError (757, 4)
"Expected an expression" (757, 19)
( (757, 44)
tokens (757, 45)
, (757, 51)
errors (757, 53)
) (757, 59)
| (759, 2)
( (759, 4)
Token (759, 5)
. (759, 10)
ParenL (759, 11)
, (759, 17)
loc (759, 19)
) (759, 22)
:: (759, 24)
( (759, 27)
Token (759, 28)
. (759, 33)
ParenR (759, 34)
, (759, 40)
_ (759, 42)
) (759, 43)
:: (759, 45)
tokens (759, 48)
-> (759, 55)
AExpr (760, 4)
. (760, 9)
TupleLit (760, 10)
( (760, 19)
[ (760, 20)
] (760, 21)
, (760, 22)
loc (760, 24)
) (760, 27)
, (760, 28)
tokens (760, 30)
, (760, 36)
errors (760, 38)
| (762, 2)
( (762, 4)
Token (762, 5)
. (762, 10)
Bool (762, 11)
value (762, 16)
, (762, 21)
loc (762, 23)
) (762, 26)
:: (762, 28)
tokens (762, 31)
-> (762, 38)
AExpr (763, 4)
. (763, 9)
Lit (763, 10)
( (763, 14)
Lit (763, 15)
. (763, 18)
Bool (763, 19)
value (763, 24)
, (763, 29)
loc (763, 31)
) (763, 34)
, (763, 35)
tokens (763, 37)
, (763, 43)
errors (763, 45)
| (765, 2)
( (765, 4)
Token (765, 5)
. (765, 10)
Int (765, 11)
value (765, 15)
, (765, 20)
loc (765, 22)
) (765, 25)
:: (765, 27)
tokens (765, 30)
-> (765, 37)
AExpr (766, 4)
. (766, 9)
Lit (766, 10)
( (766, 14)
Lit (766, 15)
. (766, 18)
Int (766, 19)
value (766, 23)
, (766, 28)
loc (766, 30)
) (766, 33)
, (766, 34)
tokens (766, 36)
, (766, 42)
errors (766, 44)
| (768, 2)
( (768, 4)
Token (768, 5)
. (768, 10)
Char (768, 11)
value (768, 16)
, (768, 21)
loc (768, 23)
) (768, 26)
:: (768, 28)
tokens (768, 31)
-> (768, 38)
AExpr (769, 4)
. (769, 9)
Lit (769, 10)
( (769, 14)
Lit (769, 15)
. (769, 18)
Char (769, 19)
value (769, 24)
, (769, 29)
loc (769, 31)
) (769, 34)
, (769, 35)
tokens (769, 37)
, (769, 43)
errors (769, 45)
| (771, 2)
( (771, 4)
Token (771, 5)
. (771, 10)
Str (771, 11)
value (771, 15)
, (771, 20)
loc (771, 22)
) (771, 25)
:: (771, 27)
tokens (771, 30)
-> (771, 37)
AExpr (772, 4)
. (772, 9)
Lit (772, 10)
( (772, 14)
Lit (772, 15)
. (772, 18)
Str (772, 19)
value (772, 23)
, (772, 28)
loc (772, 30)
) (772, 33)
, (772, 34)
tokens (772, 36)
, (772, 42)
errors (772, 44)
| (774, 2)
( (774, 4)
Token (774, 5)
. (774, 10)
Ident (774, 11)
ident (774, 17)
, (774, 22)
loc (774, 24)
) (774, 27)
:: (774, 29)
tokens (774, 32)
-> (774, 39)
AExpr (775, 4)
. (775, 9)
Ident (775, 10)
( (775, 16)
ident (775, 17)
, (775, 22)
loc (775, 24)
) (775, 27)
, (775, 28)
tokens (775, 30)
, (775, 36)
errors (775, 38)
| (777, 2)
( (777, 4)
Token (777, 5)
. (777, 10)
ParenL (777, 11)
, (777, 17)
parenLoc (777, 19)
) (777, 27)
:: (777, 29)
tokens (777, 32)
-> (777, 39)
parseParenBody (778, 4)
baseLoc (778, 19)
parenLoc (778, 27)
( (778, 36)
tokens (778, 37)
, (778, 43)
errors (778, 45)
) (778, 51)
| (780, 2)
( (780, 4)
Token (780, 5)
. (780, 10)
BracketL (780, 11)
, (780, 19)
bracketLoc (780, 21)
) (780, 31)
:: (780, 33)
tokens (780, 36)
-> (780, 43)
parseList (781, 4)
baseLoc (781, 14)
bracketLoc (781, 22)
( (781, 33)
tokens (781, 34)
, (781, 40)
errors (781, 42)
) (781, 48)
| (783, 2)
( (783, 4)
Token (783, 5)
. (783, 10)
If (783, 11)
, (783, 13)
loc (783, 15)
) (783, 18)
:: (783, 20)
tokens (783, 23)
-> (783, 30)
parseIf (784, 4)
loc (784, 12)
( (784, 16)
tokens (784, 17)
, (784, 23)
errors (784, 25)
) (784, 31)
| (786, 2)
( (786, 4)
Token (786, 5)
. (786, 10)
Match (786, 11)
, (786, 16)
loc (786, 18)
) (786, 21)
:: (786, 23)
tokens (786, 26)
-> (786, 33)
parseMatch (787, 4)
loc (787, 15)
( (787, 19)
tokens (787, 20)
, (787, 26)
errors (787, 28)
) (787, 34)
| (789, 2)
( (789, 4)
Token (789, 5)
. (789, 10)
Fun (789, 11)
, (789, 14)
loc (789, 16)
) (789, 19)
:: (789, 21)
tokens (789, 24)
-> (789, 31)
parseFun (790, 4)
baseLoc (790, 13)
loc (790, 21)
( (790, 25)
tokens (790, 26)
, (790, 32)
errors (790, 34)
) (790, 40)
| (792, 2)
( (792, 4)
Token (792, 5)
. (792, 10)
Let (792, 11)
, (792, 14)
letLoc (792, 16)
) (792, 22)
:: (792, 24)
tokens (792, 27)
-> (792, 34)
parseLet (793, 4)
letLoc (793, 13)
( (793, 20)
tokens (793, 21)
, (793, 27)
errors (793, 29)
) (793, 35)
| (795, 2)
_ (795, 4)
-> (795, 6)
parseExprError (796, 4)
"Expected an expression" (796, 19)
( (796, 44)
tokens (796, 45)
, (796, 51)
errors (796, 53)
) (796, 59)
let (799, 0)
parseSuffix (799, 4)
baseLoc (799, 16)
( (799, 24)
tokens (799, 25)
, (799, 31)
errors (799, 33)
) (799, 39)
= (799, 41)
let (800, 2)
l (800, 6)
, (800, 7)
tokens (800, 9)
, (800, 15)
errors (800, 17)
= (800, 24)
parseAtom (800, 26)
baseLoc (800, 36)
( (800, 44)
tokens (800, 45)
, (800, 51)
errors (800, 53)
) (800, 59)
let (802, 2)
rec (802, 6)
go (802, 10)
acc (802, 13)
( (802, 17)
tokens (802, 18)
, (802, 24)
errors (802, 26)
) (802, 32)
= (802, 34)
match (803, 4)
tokens (803, 10)
with (803, 17)
| (804, 4)
( (804, 6)
Token (804, 7)
. (804, 12)
Dot (804, 13)
, (804, 16)
loc (804, 18)
) (804, 21)
:: (804, 23)
( (804, 26)
Token (804, 27)
. (804, 32)
BracketL (804, 33)
, (804, 41)
_ (804, 43)
) (804, 44)
:: (804, 46)
tokens (804, 49)
-> (804, 56)
let (805, 6)
r (805, 10)
, (805, 11)
tokens (805, 13)
, (805, 19)
errors (805, 21)
= (805, 28)
parseRange (805, 30)
baseLoc (805, 41)
( (805, 49)
tokens (805, 50)
, (805, 56)
errors (805, 58)
) (805, 64)
let (807, 6)
tokens (807, 10)
, (807, 16)
errors (807, 18)
= (807, 25)
match (808, 8)
tokens (808, 14)
with (808, 21)
| (809, 8)
( (809, 10)
Token (809, 11)
. (809, 16)
BracketR (809, 17)
, (809, 25)
_ (809, 27)
) (809, 28)
:: (809, 30)
tokens (809, 33)
-> (809, 40)
tokens (810, 10)
, (810, 16)
errors (810, 18)
| (812, 8)
_ (812, 10)
-> (812, 12)
let (813, 10)
errors (813, 14)
= (813, 21)
parseNewError (813, 23)
"Expected closing \']\'" (813, 37)
( (813, 60)
tokens (813, 61)
, (813, 67)
errors (813, 69)
) (813, 75)
tokens (814, 10)
, (814, 16)
errors (814, 18)
go (816, 6)
( (816, 9)
AExpr (816, 10)
. (816, 15)
Index (816, 16)
( (816, 22)
acc (816, 23)
, (816, 26)
r (816, 28)
, (816, 29)
loc (816, 31)
) (816, 34)
) (816, 35)
( (816, 37)
tokens (816, 38)
, (816, 44)
errors (816, 46)
) (816, 52)
| (818, 4)
( (818, 6)
Token (818, 7)
. (818, 12)
Dot (818, 13)
, (818, 16)
loc (818, 18)
) (818, 21)
:: (818, 23)
( (818, 26)
Token (818, 27)
. (818, 32)
Ident (818, 33)
r (818, 39)
, (818, 40)
_ (818, 42)
) (818, 43)
:: (818, 45)
tokens (818, 48)
-> (818, 55)
go (819, 6)
( (819, 9)
AExpr (819, 10)
. (819, 15)
Nav (819, 16)
( (819, 20)
acc (819, 21)
, (819, 24)
r (819, 26)
, (819, 27)
loc (819, 29)
) (819, 32)
) (819, 33)
( (819, 35)
tokens (819, 36)
, (819, 42)
errors (819, 44)
) (819, 50)
| (821, 4)
( (821, 6)
Token (821, 7)
. (821, 12)
Dot (821, 13)
, (821, 16)
_ (821, 18)
) (821, 19)
:: (821, 21)
tokens (821, 24)
-> (821, 31)
let (822, 6)
errors (822, 10)
= (822, 17)
parseNewError (822, 19)
"Expected .[] or .field" (822, 33)
( (822, 58)
tokens (822, 59)
, (822, 65)
errors (822, 67)
) (822, 73)
acc (823, 6)
, (823, 9)
tokens (823, 11)
, (823, 17)
errors (823, 19)
| (825, 4)
_ (825, 6)
-> (825, 8)
acc (826, 6)
, (826, 9)
tokens (826, 11)
, (826, 17)
errors (826, 19)
go (828, 2)
l (828, 5)
( (828, 7)
tokens (828, 8)
, (828, 14)
errors (828, 16)
) (828, 22)
let (831, 0)
parseApp (831, 4)
baseLoc (831, 13)
( (831, 21)
tokens (831, 22)
, (831, 28)
errors (831, 30)
) (831, 36)
= (831, 38)
let (832, 2)
calleeLoc (832, 6)
= (832, 16)
nextLoc (832, 18)
tokens (832, 26)
let (833, 2)
argBaseLoc (833, 6)
= (833, 17)
calleeLoc (833, 19)
|> (833, 29)
locAddX (833, 32)
1 (833, 40)
let (835, 2)
callee (835, 6)
, (835, 12)
tokens (835, 14)
, (835, 20)
errors (835, 22)
= (835, 29)
parseSuffix (835, 31)
baseLoc (835, 43)
( (835, 51)
tokens (835, 52)
, (835, 58)
errors (835, 60)
) (835, 66)
let (837, 2)
rec (837, 6)
go (837, 10)
callee (837, 13)
( (837, 20)
tokens (837, 21)
, (837, 27)
errors (837, 29)
) (837, 35)
= (837, 37)
if (838, 4)
nextInside (838, 7)
argBaseLoc (838, 18)
tokens (838, 29)
&& (838, 36)
leadsArg (838, 39)
tokens (838, 48)
then (838, 55)
let (839, 6)
arg (839, 10)
, (839, 13)
tokens (839, 15)
, (839, 21)
errors (839, 23)
= (839, 30)
parseSuffix (839, 32)
baseLoc (839, 44)
( (839, 52)
tokens (839, 53)
, (839, 59)
errors (839, 61)
) (839, 67)
go (840, 6)
( (840, 9)
AExpr (840, 10)
. (840, 15)
Bin (840, 16)
( (840, 20)
Op (840, 21)
. (840, 23)
App (840, 24)
, (840, 27)
callee (840, 29)
, (840, 35)
arg (840, 37)
, (840, 40)
calleeLoc (840, 42)
) (840, 51)
) (840, 52)
( (840, 54)
tokens (840, 55)
, (840, 61)
errors (840, 63)
) (840, 69)
else (841, 4)
callee (842, 6)
, (842, 12)
tokens (842, 14)
, (842, 20)
errors (842, 22)
go (844, 2)
callee (844, 5)
( (844, 12)
tokens (844, 13)
, (844, 19)
errors (844, 21)
) (844, 27)
let (847, 0)
parsePrefix (847, 4)
baseLoc (847, 16)
( (847, 24)
tokens (847, 25)
, (847, 31)
errors (847, 33)
) (847, 39)
= (847, 41)
match (848, 2)
tokens (848, 8)
with (848, 15)
| (849, 2)
( (849, 4)
Token (849, 5)
. (849, 10)
Minus (849, 11)
, (849, 16)
loc (849, 18)
) (849, 21)
:: (849, 23)
tokens (849, 26)
-> (849, 33)
let (850, 4)
arg (850, 8)
, (850, 11)
tokens (850, 13)
, (850, 19)
errors (850, 21)
= (850, 28)
parseApp (850, 30)
baseLoc (850, 39)
( (850, 47)
tokens (850, 48)
, (850, 54)
errors (850, 56)
) (850, 62)
AExpr (851, 4)
. (851, 9)
Uni (851, 10)
( (851, 14)
UniOp (851, 15)
. (851, 20)
Neg (851, 21)
, (851, 24)
arg (851, 26)
, (851, 29)
loc (851, 31)
) (851, 34)
, (851, 35)
tokens (851, 37)
, (851, 43)
errors (851, 45)
| (853, 2)
_ (853, 4)
-> (853, 6)
parseApp (854, 4)
baseLoc (854, 13)
( (854, 21)
tokens (854, 22)
, (854, 28)
errors (854, 30)
) (854, 36)
let (856, 0)
parseNextLevelOp (856, 4)
level (856, 21)
baseLoc (856, 27)
( (856, 35)
tokens (856, 36)
, (856, 42)
errors (856, 44)
) (856, 50)
= (856, 52)
match (857, 2)
opLevelToNext (857, 8)
level (857, 22)
with (857, 28)
| (858, 2)
OpLevel (858, 4)
. (858, 11)
Prefix (858, 12)
-> (858, 19)
parsePrefix (859, 4)
baseLoc (859, 16)
( (859, 24)
tokens (859, 25)
, (859, 31)
errors (859, 33)
) (859, 39)
| (861, 2)
nextLevel (861, 4)
-> (861, 14)
parseOp (862, 4)
nextLevel (862, 12)
baseLoc (862, 22)
( (862, 30)
tokens (862, 31)
, (862, 37)
errors (862, 39)
) (862, 45)
let (864, 0)
rec (864, 4)
parseOps (864, 8)
level (864, 17)
baseLoc (864, 23)
first (864, 31)
( (864, 37)
tokens (864, 38)
, (864, 44)
errors (864, 46)
) (864, 52)
= (864, 54)
let (865, 2)
nextL (865, 6)
expr (865, 12)
op (865, 17)
opLoc (865, 20)
( (865, 26)
tokens (865, 27)
, (865, 33)
errors (865, 35)
) (865, 41)
= (865, 43)
let (866, 4)
second (866, 8)
, (866, 14)
tokens (866, 16)
, (866, 22)
errors (866, 24)
= (866, 31)
parseNextLevelOp (866, 33)
level (866, 50)
baseLoc (866, 56)
( (866, 64)
tokens (866, 65)
, (866, 71)
errors (866, 73)
) (866, 79)
let (867, 4)
expr (867, 8)
= (867, 13)
AExpr (867, 15)
. (867, 20)
Bin (867, 21)
( (867, 25)
op (867, 26)
, (867, 28)
expr (867, 30)
, (867, 34)
second (867, 36)
, (867, 42)
opLoc (867, 44)
) (867, 49)
parseOps (868, 4)
level (868, 13)
baseLoc (868, 19)
expr (868, 27)
( (868, 32)
tokens (868, 33)
, (868, 39)
errors (868, 41)
) (868, 47)
let (870, 2)
nextR (870, 6)
expr (870, 12)
op (870, 17)
opLoc (870, 20)
( (870, 26)
tokens (870, 27)
, (870, 33)
errors (870, 35)
) (870, 41)
= (870, 43)
let (871, 4)
second (871, 8)
, (871, 14)
tokens (871, 16)
, (871, 22)
errors (871, 24)
= (871, 31)
parseOp (871, 33)
level (871, 41)
baseLoc (871, 47)
( (871, 55)
tokens (871, 56)
, (871, 62)
errors (871, 64)
) (871, 70)
let (872, 4)
expr (872, 8)
= (872, 13)
AExpr (872, 15)
. (872, 20)
Bin (872, 21)
( (872, 25)
op (872, 26)
, (872, 28)
expr (872, 30)
, (872, 34)
second (872, 36)
, (872, 42)
opLoc (872, 44)
) (872, 49)
parseOps (873, 4)
level (873, 13)
baseLoc (873, 19)
expr (873, 27)
( (873, 32)
tokens (873, 33)
, (873, 39)
errors (873, 41)
) (873, 47)
match (875, 2)
level (875, 8)
, (875, 13)
tokens (875, 15)
with (875, 22)
| (876, 2)
OpLevel (876, 4)
. (876, 11)
Or (876, 12)
, (876, 14)
( (876, 16)
Token (876, 17)
. (876, 22)
PipePipe (876, 23)
, (876, 31)
opLoc (876, 33)
) (876, 38)
:: (876, 40)
tokens (876, 43)
-> (876, 50)
nextL (877, 4)
first (877, 10)
Op (877, 16)
. (877, 18)
Or (877, 19)
opLoc (877, 22)
( (877, 28)
tokens (877, 29)
, (877, 35)
errors (877, 37)
) (877, 43)
| (879, 2)
OpLevel (879, 4)
. (879, 11)
And (879, 12)
, (879, 15)
( (879, 17)
Token (879, 18)
. (879, 23)
AmpAmp (879, 24)
, (879, 30)
opLoc (879, 32)
) (879, 37)
:: (879, 39)
tokens (879, 42)
-> (879, 49)
nextL (880, 4)
first (880, 10)
Op (880, 16)
. (880, 18)
And (880, 19)
opLoc (880, 23)
( (880, 29)
tokens (880, 30)
, (880, 36)
errors (880, 38)
) (880, 44)
| (882, 2)
OpLevel (882, 4)
. (882, 11)
Cmp (882, 12)
, (882, 15)
( (882, 17)
Token (882, 18)
. (882, 23)
Eq (882, 24)
, (882, 26)
opLoc (882, 28)
) (882, 33)
:: (882, 35)
tokens (882, 38)
-> (882, 45)
nextL (883, 4)
first (883, 10)
Op (883, 16)
. (883, 18)
Eq (883, 19)
opLoc (883, 22)
( (883, 28)
tokens (883, 29)
, (883, 35)
errors (883, 37)
) (883, 43)
| (885, 2)
OpLevel (885, 4)
. (885, 11)
Cmp (885, 12)
, (885, 15)
( (885, 17)
Token (885, 18)
. (885, 23)
LtGt (885, 24)
, (885, 28)
opLoc (885, 30)
) (885, 35)
:: (885, 37)
tokens (885, 40)
-> (885, 47)
nextL (886, 4)
first (886, 10)
Op (886, 16)
. (886, 18)
Ne (886, 19)
opLoc (886, 22)
( (886, 28)
tokens (886, 29)
, (886, 35)
errors (886, 37)
) (886, 43)
| (888, 2)
OpLevel (888, 4)
. (888, 11)
Cmp (888, 12)
, (888, 15)
( (888, 17)
Token (888, 18)
. (888, 23)
Lt (888, 24)
, (888, 26)
opLoc (888, 28)
) (888, 33)
:: (888, 35)
tokens (888, 38)
-> (888, 45)
nextL (889, 4)
first (889, 10)
Op (889, 16)
. (889, 18)
Lt (889, 19)
opLoc (889, 22)
( (889, 28)
tokens (889, 29)
, (889, 35)
errors (889, 37)
) (889, 43)
| (891, 2)
OpLevel (891, 4)
. (891, 11)
Cmp (891, 12)
, (891, 15)
( (891, 17)
Token (891, 18)
. (891, 23)
LtEq (891, 24)
, (891, 28)
opLoc (891, 30)
) (891, 35)
:: (891, 37)
tokens (891, 40)
-> (891, 47)
nextL (892, 4)
first (892, 10)
Op (892, 16)
. (892, 18)
Le (892, 19)
opLoc (892, 22)
( (892, 28)
tokens (892, 29)
, (892, 35)
errors (892, 37)
) (892, 43)
| (894, 2)
OpLevel (894, 4)
. (894, 11)
Cmp (894, 12)
, (894, 15)
( (894, 17)
Token (894, 18)
. (894, 23)
Gt (894, 24)
, (894, 26)
opLoc (894, 28)
) (894, 33)
:: (894, 35)
tokens (894, 38)
-> (894, 45)
nextL (895, 4)
first (895, 10)
Op (895, 16)
. (895, 18)
Gt (895, 19)
opLoc (895, 22)
( (895, 28)
tokens (895, 29)
, (895, 35)
errors (895, 37)
) (895, 43)
| (897, 2)
OpLevel (897, 4)
. (897, 11)
Cmp (897, 12)
, (897, 15)
( (897, 17)
Token (897, 18)
. (897, 23)
GtEq (897, 24)
, (897, 28)
opLoc (897, 30)
) (897, 35)
:: (897, 37)
tokens (897, 40)
-> (897, 47)
nextL (898, 4)
first (898, 10)
Op (898, 16)
. (898, 18)
Ge (898, 19)
opLoc (898, 22)
( (898, 28)
tokens (898, 29)
, (898, 35)
errors (898, 37)
) (898, 43)
| (900, 2)
OpLevel (900, 4)
. (900, 11)
Pipe (900, 12)
, (900, 16)
( (900, 18)
Token (900, 19)
. (900, 24)
PipeGt (900, 25)
, (900, 31)
opLoc (900, 33)
) (900, 38)
:: (900, 40)
tokens (900, 43)
-> (900, 50)
nextL (901, 4)
first (901, 10)
Op (901, 16)
. (901, 18)
Pipe (901, 19)
opLoc (901, 24)
( (901, 30)
tokens (901, 31)
, (901, 37)
errors (901, 39)
) (901, 45)
| (903, 2)
OpLevel (903, 4)
. (903, 11)
Cons (903, 12)
, (903, 16)
( (903, 18)
Token (903, 19)
. (903, 24)
ColonColon (903, 25)
, (903, 35)
opLoc (903, 37)
) (903, 42)
:: (903, 44)
tokens (903, 47)
-> (903, 54)
nextR (904, 4)
first (904, 10)
Op (904, 16)
. (904, 18)
Cons (904, 19)
opLoc (904, 24)
( (904, 30)
tokens (904, 31)
, (904, 37)
errors (904, 39)
) (904, 45)
| (906, 2)
OpLevel (906, 4)
. (906, 11)
Add (906, 12)
, (906, 15)
( (906, 17)
Token (906, 18)
. (906, 23)
Plus (906, 24)
, (906, 28)
opLoc (906, 30)
) (906, 35)
:: (906, 37)
tokens (906, 40)
-> (906, 47)
nextL (907, 4)
first (907, 10)
Op (907, 16)
. (907, 18)
Add (907, 19)
opLoc (907, 23)
( (907, 29)
tokens (907, 30)
, (907, 36)
errors (907, 38)
) (907, 44)
| (909, 2)
OpLevel (909, 4)
. (909, 11)
Add (909, 12)
, (909, 15)
( (909, 17)
Token (909, 18)
. (909, 23)
Minus (909, 24)
, (909, 29)
opLoc (909, 31)
) (909, 36)
:: (909, 38)
tokens (909, 41)
-> (909, 48)
nextL (910, 4)
first (910, 10)
Op (910, 16)
. (910, 18)
Sub (910, 19)
opLoc (910, 23)
( (910, 29)
tokens (910, 30)
, (910, 36)
errors (910, 38)
) (910, 44)
| (912, 2)
OpLevel (912, 4)
. (912, 11)
Mul (912, 12)
, (912, 15)
( (912, 17)
Token (912, 18)
. (912, 23)
Star (912, 24)
, (912, 28)
opLoc (912, 30)
) (912, 35)
:: (912, 37)
tokens (912, 40)
-> (912, 47)
nextL (913, 4)
first (913, 10)
Op (913, 16)
. (913, 18)
Mul (913, 19)
opLoc (913, 23)
( (913, 29)
tokens (913, 30)
, (913, 36)
errors (913, 38)
) (913, 44)
| (915, 2)
OpLevel (915, 4)
. (915, 11)
Mul (915, 12)
, (915, 15)
( (915, 17)
Token (915, 18)
. (915, 23)
Slash (915, 24)
, (915, 29)
opLoc (915, 31)
) (915, 36)
:: (915, 38)
tokens (915, 41)
-> (915, 48)
nextL (916, 4)
first (916, 10)
Op (916, 16)
. (916, 18)
Div (916, 19)
opLoc (916, 23)
( (916, 29)
tokens (916, 30)
, (916, 36)
errors (916, 38)
) (916, 44)
| (918, 2)
OpLevel (918, 4)
. (918, 11)
Mul (918, 12)
, (918, 15)
( (918, 17)
Token (918, 18)
. (918, 23)
Percent (918, 24)
, (918, 31)
opLoc (918, 33)
) (918, 38)
:: (918, 40)
tokens (918, 43)
-> (918, 50)
nextL (919, 4)
first (919, 10)
Op (919, 16)
. (919, 18)
Mod (919, 19)
opLoc (919, 23)
( (919, 29)
tokens (919, 30)
, (919, 36)
errors (919, 38)
) (919, 44)
| (921, 2)
_ (921, 4)
-> (921, 6)
first (922, 4)
, (922, 9)
tokens (922, 11)
, (922, 17)
errors (922, 19)
let (925, 0)
parseOp (925, 4)
level (925, 12)
baseLoc (925, 18)
( (925, 26)
tokens (925, 27)
, (925, 33)
errors (925, 35)
) (925, 41)
= (925, 43)
let (926, 2)
first (926, 6)
, (926, 11)
tokens (926, 13)
, (926, 19)
errors (926, 21)
= (926, 28)
parseNextLevelOp (926, 30)
level (926, 47)
baseLoc (926, 53)
( (926, 61)
tokens (926, 62)
, (926, 68)
errors (926, 70)
) (926, 76)
parseOps (927, 2)
level (927, 11)
baseLoc (927, 17)
first (927, 25)
( (927, 31)
tokens (927, 32)
, (927, 38)
errors (927, 40)
) (927, 46)
let (929, 0)
parseTupleItem (929, 4)
baseLoc (929, 19)
( (929, 27)
tokens (929, 28)
, (929, 34)
errors (929, 36)
) (929, 42)
= (929, 44)
parseOp (930, 2)
OpLevel (930, 10)
. (930, 17)
Or (930, 18)
baseLoc (930, 21)
( (930, 29)
tokens (930, 30)
, (930, 36)
errors (930, 38)
) (930, 44)
let (933, 0)
parseTuple (933, 4)
baseLoc (933, 15)
( (933, 23)
tokens (933, 24)
, (933, 30)
errors (933, 32)
) (933, 38)
= (933, 40)
let (934, 2)
rec (934, 6)
go (934, 10)
acc (934, 13)
( (934, 17)
tokens (934, 18)
, (934, 24)
errors (934, 26)
) (934, 32)
= (934, 34)
match (935, 4)
tokens (935, 10)
with (935, 17)
| (936, 4)
( (936, 6)
Token (936, 7)
. (936, 12)
Comma (936, 13)
, (936, 18)
_ (936, 20)
) (936, 21)
:: (936, 23)
tokens (936, 26)
-> (936, 33)
let (937, 6)
second (937, 10)
, (937, 16)
tokens (937, 18)
, (937, 24)
errors (937, 26)
= (937, 33)
parseTupleItem (937, 35)
baseLoc (937, 50)
( (937, 58)
tokens (937, 59)
, (937, 65)
errors (937, 67)
) (937, 73)
go (938, 6)
( (938, 9)
second (938, 10)
:: (938, 17)
acc (938, 20)
) (938, 23)
( (938, 25)
tokens (938, 26)
, (938, 32)
errors (938, 34)
) (938, 40)
| (940, 4)
tokens (940, 6)
-> (940, 13)
listRev (941, 6)
acc (941, 14)
, (941, 17)
tokens (941, 19)
, (941, 25)
errors (941, 27)
let (943, 2)
item (943, 6)
, (943, 10)
tokens (943, 12)
, (943, 18)
errors (943, 20)
= (943, 27)
parseTupleItem (943, 29)
baseLoc (943, 44)
( (943, 52)
tokens (943, 53)
, (943, 59)
errors (943, 61)
) (943, 67)
match (945, 2)
tokens (945, 8)
with (945, 15)
| (946, 2)
( (946, 4)
Token (946, 5)
. (946, 10)
Comma (946, 11)
, (946, 16)
loc (946, 18)
) (946, 21)
:: (946, 23)
_ (946, 26)
-> (946, 28)
let (947, 4)
items (947, 8)
, (947, 13)
tokens (947, 15)
, (947, 21)
errors (947, 23)
= (947, 30)
go (947, 32)
[ (947, 35)
] (947, 36)
( (947, 38)
tokens (947, 39)
, (947, 45)
errors (947, 47)
) (947, 53)
AExpr (948, 4)
. (948, 9)
TupleLit (948, 10)
( (948, 19)
item (948, 20)
:: (948, 25)
items (948, 28)
, (948, 33)
loc (948, 35)
) (948, 38)
, (948, 39)
tokens (948, 41)
, (948, 47)
errors (948, 49)
| (950, 2)
_ (950, 4)
-> (950, 6)
item (951, 4)
, (951, 8)
tokens (951, 10)
, (951, 16)
errors (951, 18)
let (954, 0)
parseAnno (954, 4)
baseLoc (954, 14)
( (954, 22)
tokens (954, 23)
, (954, 29)
errors (954, 31)
) (954, 37)
= (954, 39)
let (955, 2)
body (955, 6)
, (955, 10)
tokens (955, 12)
, (955, 18)
errors (955, 20)
= (955, 27)
parseTuple (955, 29)
baseLoc (955, 40)
( (955, 48)
tokens (955, 49)
, (955, 55)
errors (955, 57)
) (955, 63)
match (957, 2)
tokens (957, 8)
with (957, 15)
| (958, 2)
( (958, 4)
Token (958, 5)
. (958, 10)
Colon (958, 11)
, (958, 16)
loc (958, 18)
) (958, 21)
:: (958, 23)
tokens (958, 26)
-> (958, 33)
let (959, 4)
ty (959, 8)
, (959, 10)
tokens (959, 12)
, (959, 18)
errors (959, 20)
= (959, 27)
parseTy (959, 29)
baseLoc (959, 37)
( (959, 45)
tokens (959, 46)
, (959, 52)
errors (959, 54)
) (959, 60)
AExpr (960, 4)
. (960, 9)
Anno (960, 10)
( (960, 15)
body (960, 16)
, (960, 20)
ty (960, 22)
, (960, 24)
loc (960, 26)
) (960, 29)
, (960, 30)
tokens (960, 32)
, (960, 38)
errors (960, 40)
| (962, 2)
_ (962, 4)
-> (962, 6)
body (963, 4)
, (963, 8)
tokens (963, 10)
, (963, 16)
errors (963, 18)
let (965, 0)
parseExpr (965, 4)
baseLoc (965, 14)
( (965, 22)
tokens (965, 23)
, (965, 29)
errors (965, 31)
) (965, 37)
= (965, 39)
parseAnno (966, 2)
baseLoc (966, 12)
( (966, 20)
tokens (966, 21)
, (966, 27)
errors (966, 29)
) (966, 35)
let (968, 0)
parseStmt (968, 4)
baseLoc (968, 14)
( (968, 22)
tokens (968, 23)
, (968, 29)
errors (968, 31)
) (968, 37)
= (968, 39)
match (969, 2)
tokens (969, 8)
with (969, 15)
| (970, 2)
( (970, 4)
Token (970, 5)
. (970, 10)
Let (970, 11)
, (970, 14)
letLoc (970, 16)
) (970, 22)
:: (970, 24)
( (970, 27)
Token (970, 28)
. (970, 33)
Rec (970, 34)
, (970, 37)
_ (970, 39)
) (970, 40)
:: (970, 42)
tokens (970, 45)
-> (970, 52)
parseLet (972, 4)
letLoc (972, 13)
( (972, 20)
tokens (972, 21)
, (972, 27)
errors (972, 29)
) (972, 35)
| (974, 2)
( (974, 4)
Token (974, 5)
. (974, 10)
Let (974, 11)
, (974, 14)
letLoc (974, 16)
) (974, 22)
:: (974, 24)
tokens (974, 27)
-> (974, 34)
parseLet (975, 4)
letLoc (975, 13)
( (975, 20)
tokens (975, 21)
, (975, 27)
errors (975, 29)
) (975, 35)
| (977, 2)
( (977, 4)
Token (977, 5)
. (977, 10)
Type (977, 11)
, (977, 15)
typeLoc (977, 17)
) (977, 24)
:: (977, 26)
tokens (977, 29)
-> (977, 36)
parseTyDecl (978, 4)
typeLoc (978, 16)
( (978, 24)
tokens (978, 25)
, (978, 31)
errors (978, 33)
) (978, 39)
| (980, 2)
( (980, 4)
Token (980, 5)
. (980, 10)
Open (980, 11)
, (980, 15)
typeLoc (980, 17)
) (980, 24)
:: (980, 26)
tokens (980, 29)
-> (980, 36)
parseOpen (981, 4)
typeLoc (981, 14)
( (981, 22)
tokens (981, 23)
, (981, 29)
errors (981, 31)
) (981, 37)
| (983, 2)
_ (983, 4)
-> (983, 6)
parseExpr (984, 4)
baseLoc (984, 14)
( (984, 22)
tokens (984, 23)
, (984, 29)
errors (984, 31)
) (984, 37)
let (989, 0)
rec (989, 4)
parseStmts (989, 8)
baseLoc (989, 19)
( (989, 27)
tokens (989, 28)
, (989, 34)
errors (989, 36)
) (989, 42)
= (989, 44)
let (990, 2)
rec (990, 6)
go (990, 10)
acc (990, 13)
alignLoc (990, 17)
( (990, 26)
tokens (990, 27)
, (990, 33)
errors (990, 35)
) (990, 41)
= (990, 43)
match (991, 4)
tokens (991, 10)
with (991, 17)
| (992, 4)
( (992, 6)
Token (992, 7)
. (992, 12)
Semi (992, 13)
, (992, 17)
semiLoc (992, 19)
) (992, 26)
:: (992, 28)
tokens (992, 31)
when (993, 6)
locInside (993, 11)
alignLoc (993, 21)
semiLoc (993, 30)
-> (993, 38)
let (994, 6)
expr (994, 10)
, (994, 14)
tokens (994, 16)
, (994, 22)
errors (994, 24)
= (994, 31)
parseStmt (994, 33)
baseLoc (994, 43)
( (994, 51)
tokens (994, 52)
, (994, 58)
errors (994, 60)
) (994, 66)
go (995, 6)
( (995, 9)
expr (995, 10)
:: (995, 15)
acc (995, 18)
) (995, 21)
alignLoc (995, 23)
( (995, 32)
tokens (995, 33)
, (995, 39)
errors (995, 41)
) (995, 47)
| (997, 4)
_ (997, 6)
when (997, 8)
locIsSameColumn (997, 13)
alignLoc (997, 29)
( (997, 38)
nextLoc (997, 39)
tokens (997, 47)
) (997, 53)
&& (997, 55)
leadsExpr (997, 58)
tokens (997, 68)
-> (997, 75)
let (998, 6)
expr (998, 10)
, (998, 14)
tokens (998, 16)
, (998, 22)
errors (998, 24)
= (998, 31)
parseStmt (998, 33)
baseLoc (998, 43)
( (998, 51)
tokens (998, 52)
, (998, 58)
errors (998, 60)
) (998, 66)
go (999, 6)
( (999, 9)
expr (999, 10)
:: (999, 15)
acc (999, 18)
) (999, 21)
alignLoc (999, 23)
( (999, 32)
tokens (999, 33)
, (999, 39)
errors (999, 41)
) (999, 47)
| (1001, 4)
_ (1001, 6)
-> (1001, 8)
listRev (1002, 6)
acc (1002, 14)
, (1002, 17)
tokens (1002, 19)
, (1002, 25)
errors (1002, 27)
let (1004, 2)
alignLoc (1004, 6)
= (1004, 15)
nextLoc (1004, 17)
tokens (1004, 25)
if (1005, 2)
locInside (1005, 5)
baseLoc (1005, 15)
alignLoc (1005, 23)
then (1005, 32)
go (1006, 4)
[ (1006, 7)
] (1006, 8)
alignLoc (1006, 10)
( (1006, 19)
tokens (1006, 20)
, (1006, 26)
errors (1006, 28)
) (1006, 34)
else (1007, 2)
[ (1008, 4)
] (1008, 5)
, (1008, 6)
tokens (1008, 8)
, (1008, 14)
errors (1008, 16)
let (1016, 0)
parseSemi (1016, 4)
baseLoc (1016, 14)
mainLoc (1016, 22)
( (1016, 30)
tokens (1016, 31)
, (1016, 37)
errors (1016, 39)
) (1016, 45)
= (1016, 47)
let (1017, 2)
items (1017, 6)
, (1017, 11)
tokens (1017, 13)
, (1017, 19)
errors (1017, 21)
= (1017, 28)
parseStmts (1017, 30)
baseLoc (1017, 41)
( (1017, 49)
tokens (1017, 50)
, (1017, 56)
errors (1017, 58)
) (1017, 64)
match (1019, 2)
items (1019, 8)
with (1019, 14)
| (1020, 2)
[ (1020, 4)
] (1020, 5)
-> (1020, 7)
parseExprError (1021, 4)
"Expected statements" (1021, 19)
( (1021, 41)
tokens (1021, 42)
, (1021, 48)
errors (1021, 50)
) (1021, 56)
| (1023, 2)
[ (1023, 4)
item (1023, 5)
] (1023, 9)
-> (1023, 11)
item (1024, 4)
, (1024, 8)
tokens (1024, 10)
, (1024, 16)
errors (1024, 18)
| (1026, 2)
_ (1026, 4)
-> (1026, 6)
AExpr (1027, 4)
. (1027, 9)
Semi (1027, 10)
( (1027, 15)
items (1027, 16)
, (1027, 21)
mainLoc (1027, 23)
) (1027, 30)
, (1027, 31)
tokens (1027, 33)
, (1027, 39)
errors (1027, 41)
let (1030, 0)
parseTopLevel (1030, 4)
( (1030, 18)
tokens (1030, 19)
, (1030, 25)
errors (1030, 27)
) (1030, 33)
= (1030, 35)
let (1031, 2)
topLoc (1031, 6)
= (1031, 13)
0 (1031, 15)
, (1031, 16)
0 (1031, 18)
match (1033, 2)
tokens (1033, 8)
with (1033, 15)
| (1034, 2)
[ (1034, 4)
] (1034, 5)
-> (1034, 7)
AExpr (1035, 4)
. (1035, 9)
TupleLit (1035, 10)
( (1035, 19)
[ (1035, 20)
] (1035, 21)
, (1035, 22)
topLoc (1035, 24)
) (1035, 30)
, (1035, 31)
tokens (1035, 33)
, (1035, 39)
errors (1035, 41)
| (1037, 2)
( (1037, 4)
Token (1037, 5)
. (1037, 10)
Module (1037, 11)
, (1037, 17)
moduleLoc (1037, 19)
) (1037, 28)
:: (1038, 4)
( (1038, 7)
Token (1038, 8)
. (1038, 13)
Rec (1038, 14)
, (1038, 17)
_ (1038, 19)
) (1038, 20)
:: (1039, 4)
( (1039, 7)
Token (1039, 8)
. (1039, 13)
Ident (1039, 14)
_ (1039, 20)
, (1039, 21)
_ (1039, 23)
) (1039, 24)
:: (1040, 4)
( (1040, 7)
Token (1040, 8)
. (1040, 13)
Dot (1040, 14)
, (1040, 17)
_ (1040, 19)
) (1040, 20)
:: (1041, 4)
( (1041, 7)
Token (1041, 8)
. (1041, 13)
Ident (1041, 14)
_ (1041, 20)
, (1041, 21)
_ (1041, 23)
) (1041, 24)
:: (1041, 26)
tokens (1041, 29)
-> (1041, 36)
parseSemi (1042, 4)
moduleLoc (1042, 14)
moduleLoc (1042, 24)
( (1042, 34)
tokens (1042, 35)
, (1042, 41)
errors (1042, 43)
) (1042, 49)
| (1044, 2)
( (1044, 4)
Token (1044, 5)
. (1044, 10)
Module (1044, 11)
, (1044, 17)
moduleLoc (1044, 19)
) (1044, 28)
:: (1045, 4)
( (1045, 7)
Token (1045, 8)
. (1045, 13)
Rec (1045, 14)
, (1045, 17)
_ (1045, 19)
) (1045, 20)
:: (1046, 4)
( (1046, 7)
Token (1046, 8)
. (1046, 13)
Ident (1046, 14)
_ (1046, 20)
, (1046, 21)
_ (1046, 23)
) (1046, 24)
:: (1046, 26)
tokens (1046, 29)
-> (1046, 36)
parseSemi (1047, 4)
moduleLoc (1047, 14)
moduleLoc (1047, 24)
( (1047, 34)
tokens (1047, 35)
, (1047, 41)
errors (1047, 43)
) (1047, 49)
| (1049, 2)
( (1049, 4)
Token (1049, 5)
. (1049, 10)
Module (1049, 11)
, (1049, 17)
moduleLoc (1049, 19)
) (1049, 28)
:: (1050, 4)
( (1050, 7)
Token (1050, 8)
. (1050, 13)
Ident (1050, 14)
_ (1050, 20)
, (1050, 21)
_ (1050, 23)
) (1050, 24)
:: (1050, 26)
tokens (1050, 29)
-> (1050, 36)
parseSemi (1051, 4)
moduleLoc (1051, 14)
moduleLoc (1051, 24)
( (1051, 34)
tokens (1051, 35)
, (1051, 41)
errors (1051, 43)
) (1051, 49)
| (1053, 2)
_ (1053, 4)
-> (1053, 6)
parseSemi (1054, 4)
topLoc (1054, 14)
topLoc (1054, 21)
( (1054, 28)
tokens (1054, 29)
, (1054, 35)
errors (1054, 37)
) (1054, 43)
let (1056, 0)
parse (1056, 4)
( (1056, 10)
tokens (1056, 11)
: (1056, 17)
( (1056, 19)
Token (1056, 20)
* (1056, 26)
Loc (1056, 28)
) (1056, 31)
list (1056, 33)
) (1056, 37)
: (1056, 38)
AExpr (1056, 40)
* (1056, 46)
( (1056, 48)
string (1056, 49)
* (1056, 56)
Loc (1056, 58)
) (1056, 61)
list (1056, 63)
= (1056, 68)
let (1057, 2)
expr (1057, 6)
, (1057, 10)
tokens (1057, 12)
, (1057, 18)
errors (1057, 20)
= (1057, 27)
parseTopLevel (1057, 29)
( (1057, 43)
tokens (1057, 44)
, (1057, 50)
[ (1057, 52)
] (1057, 53)
) (1057, 54)
let (1059, 2)
errors (1059, 6)
= (1059, 13)
match (1060, 4)
tokens (1060, 10)
with (1060, 17)
| (1061, 4)
[ (1061, 6)
] (1061, 7)
-> (1061, 9)
errors (1062, 6)
| (1064, 4)
_ (1064, 6)
-> (1064, 8)
parseNewError (1065, 6)
"Expected eof" (1065, 20)
( (1065, 35)
tokens (1065, 36)
, (1065, 42)
errors (1065, 44)
) (1065, 50)
expr (1067, 2)
, (1067, 6)
errors (1067, 8)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let:
  - fun:
    - leadsExpr
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (88:21)
      bin:
      - tokenIsExprFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (91:7)
      false
  let:
  - fun:
    - leadsArg
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (96:21)
      bin:
      - tokenIsArgFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (99:7)
      false
  let:
  - fun:
    - leadsPat
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (104:21)
      bin:
      - tokenIsPatFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (107:7)
      false
  let:
  - anno:
    - fun:
      - nextLoc
      - tokens
    - Loc
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (113:8)
      tuple:
      - -: 1
      - 0
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - ERROR:
        - missing
        - (116:19)
      loc
  let:
  - anno:
    - fun:
      - nextInside
      - baseLoc
      - tokens
    - bool
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (122:8)
      false
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - bin:
        - bin:
          - locInside
          - baseLoc
        - loc
      true
    - arm:
      - _
      - ERROR:
        - missing
        - (130:7)
      false
  let:
  - fun:
    - parseErrorCore
    - msg
    - loc
    - errors
  - let:
    - msg
    - bin:
      - bin:
        - bin:
          - bin:
            - \"PARSE ERROR: \"
            - msg
          - \" (\"
        - bin:
          - locToString
          - loc
      - \")\"
    bin:
    - tuple:
      - msg
      - loc
    - errors
  let:
  - fun:
    - parseTyError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - parseErrorCore
          - msg
        - loc
      - errors
    tuple:
    - bin:
      - .Missing: ATy
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parsePatError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - parseErrorCore
          - msg
        - loc
      - errors
    tuple:
    - bin:
      - .Missing: APat
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseExprError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - parseErrorCore
          - msg
        - loc
      - errors
    tuple:
    - bin:
      - .Missing: AExpr
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseNewError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    bin:
    - bin:
      - bin:
        - parseErrorCore
        - msg
      - loc
    - errors
  let:
  - fun:
    - parseTyArgs
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Lt: Token
          - ltLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - ltLoc
      let:
      - fun:
        - go
        - acc
        - tuple:
          - tokens
          - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Comma: Token
              - _
            tokens
          - ERROR:
            - missing
            - (170:36)
          let:
          - tuple:
            - argTy
            - tokens
            - errors
          - bin:
            - bin:
              - parseTy
              - baseLoc
            - tuple:
              - tokens
              - errors
          bin:
          - bin:
            - go
            - bin:
              - argTy
              - acc
          - tuple:
            - tokens
            - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (174:11)
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
      let:
      - tuple:
        - argTy
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - tuple:
        - argTys
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list: argTy
        - tuple:
          - tokens
          - errors
      let:
      - tuple:
        - tokens
        - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Gt: Token
              - _
            tokens
          - ERROR:
            - missing
            - (182:33)
          tuple:
          - tokens
          - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (185:11)
          let:
          - errors
          - bin:
            - bin:
              - parseNewError
              - \"Expected \\\'>\\\'\"
            - tuple:
              - tokens
              - errors
          tuple:
          - tokens
          - errors
      tuple:
      - argTys
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (191:7)
      tuple:
      - list
      - tokens
      - errors
  let:
  - fun:
    - parseTyAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - not
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (199:40)
      let:
      - tuple:
        - argTys
        - tokens
        - errors
      - bin:
        - bin:
          - parseTyArgs
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .App: ATy
        - tuple:
          - ident
          - argTys
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (203:33)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .ParenR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (207:35)
        tuple:
        - ty
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (210:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\')\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - ty
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (214:7)
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTySuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - tuple:
        - ty
        - tokens
        - errors
    - let:
      - inside
      - bin:
        - bin:
          - nextInside
          - baseLoc
        - tokens
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - loc
          tokens
        - inside
        bin:
        - go
        - tuple:
          - bin:
            - .Suffix: ATy
            - tuple:
              - ty
              - ident
              - loc
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (225:9)
        tuple:
        - ty
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - parseTyAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    - go
  let:
  - fun:
    - parseTyPrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Colon: Token
          - _
        tokens
      - ERROR:
        - missing
        - (234:54)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (237:7)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTyTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Star: Token
            - _
          tokens
        - ERROR:
          - missing
          - (244:33)
        let:
        - tuple:
          - itemTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyPrefix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - itemTy
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (248:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyPrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Star: Token
          - opLoc
        _
      - ERROR:
        - missing
        - (254:30)
      let:
      - tuple:
        - itemTys
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Tuple: ATy
        - tuple:
          - bin:
            - itemTy
            - itemTys
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (258:7)
      tuple:
      - itemTy
      - tokens
      - errors
  let:
  - fun:
    - parseTyFun
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - sTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Arrow: Token
          - opLoc
        tokens
      - ERROR:
        - missing
        - (267:36)
      let:
      - tuple:
        - tTy
        - tokens
        - errors
      - bin:
        - bin:
          - parseTyFun
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Fun: ATy
        - tuple:
          - sTy
          - tTy
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (271:7)
      tuple:
      - sTy
      - tokens
      - errors
  let:
  - fun:
    - parseTy
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseTyFun
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTyDeclUnion
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          cons:
          - tuple:
            - .Of: Token
            - _
          tokens
        - ERROR:
          - missing
          - (283:34)
        let:
        - tuple:
          - payloadTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - bin:
                  - Some
                  - payloadTy
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          tokens
        - ERROR:
          - missing
          - (288:52)
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - None
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (291:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - variants
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Union: ATyDecl
      - variants
    - tokens
    - errors
  let:
  - fun:
    - parseTyDeclBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - _
        _
      - ERROR:
        - missing
        - (301:26)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Of: Token
          - _
        _
      - ERROR:
        - missing
        - (304:46)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (307:7)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Synonym: ATyDecl
        - ty
      - tokens
      - errors
  let:
  - fun:
    - parsePatParenBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (320:33)
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - tokens
      - ERROR:
        - missing
        - (323:12)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatListBody
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - patAcc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (331:37)
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - _
          tokens
        - ERROR:
          - missing
          - (335:33)
        let:
        - tuple:
          - pat
          - tokens
          - errors
        - bin:
          - bin:
            - parsePat
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - pat
            - patAcc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (339:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\';\\\' or \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - itemPats
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list: itemPat
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: APat
      - tuple:
        - itemPats
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parsePatAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - bin:
              - nextInside
              - baseLoc
            - tokens
          - bin:
            - leadsPat
            - tokens
      bin:
      - bin:
        - parsePatError
        - \"Expected a pattern atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (352:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (355:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (358:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (361:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (364:40)
      tuple:
      - bin:
        - .Ident: APat
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (367:56)
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (370:33)
      bin:
      - bin:
        - parsePatParenBody
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        cons:
        - tuple:
          - .BracketR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (373:60)
      tuple:
      - bin:
        - .ListLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (376:37)
      bin:
      - bin:
        - bin:
          - parsePatListBody
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (379:7)
      bin:
      - bin:
        - parsePatError
        - \"NEVER: The token must be a pat\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePatNav
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (387:58)
      tuple:
      - bin:
        - .Nav: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - _
        tokens
      - ERROR:
        - missing
        - (390:30)
      bin:
      - bin:
        - parsePatError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (393:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatCallArgs
    - baseLoc
    - calleeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - argBaseLoc
    - bin:
      - bin:
        - bin:
          - locMax
          - baseLoc
        - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
      - let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatNav
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - expr
            - acc
        - tuple:
          - tokens
          - errors
      - tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - list
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePatCall
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatNav
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - args
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - calleeLoc
      - tuple:
        - tokens
        - errors
    match:
    - args
    - arm:
      - list
      - ERROR:
        - missing
        - (416:8)
      tuple:
      - callee
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (419:7)
      tuple:
      - bin:
        - .Call: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      - tokens
      - errors
  let:
  - fun:
    - parsePatCons
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - head
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCall
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ColonColon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (427:39)
      let:
      - tuple:
        - tail
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatCons
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Cons: APat
        - tuple:
          - head
          - tail
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (431:7)
      tuple:
      - head
      - tokens
      - errors
  let:
  - fun:
    - parsePatAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCons
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (439:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: APat
        - tuple:
          - pat
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (443:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (450:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatAnno
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (454:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAnno
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (460:29)
      let:
      - tuple:
        - itemPats
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - bin:
            - itemPat
            - itemPats
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (464:7)
      tuple:
      - itemPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatAs
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (473:57)
      tuple:
      - bin:
        - .As: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - _
        tokens
      - ERROR:
        - missing
        - (476:29)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected an identifier\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (480:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatOr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - lPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAs
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (488:33)
      let:
      - tuple:
        - rPat
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatOr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Or: APat
        - tuple:
          - lPat
          - rPat
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (492:7)
      tuple:
      - lPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatLet
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - callee
          - calleeLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - calleeLoc
        - bin:
          - leadsPat
          - tokens
      let:
      - tuple:
        - args
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parsePatCallArgs
            - baseLoc
          - calleeLoc
        - tuple:
          - tokens
          - errors
      let:
      - pat
      - bin:
        - .Fun: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Colon: Token
            - loc
          tokens
        - ERROR:
          - missing
          - (506:36)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .Anno: APat
          - tuple:
            - pat
            - ty
            - loc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (510:9)
        tuple:
        - pat
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (513:7)
      bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePat
    - baseLoc
    - tuple:
      - tokens
      - errors
  - if:
    - bin:
      - not
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
    - bin:
      - bin:
        - parsePatError
        - \"Expected a pattern\"
      - tuple:
        - tokens
        - errors
    - bin:
      - bin:
        - parsePatOr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseRange
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .DotDot: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (532:35)
      let:
      - tuple:
        - r
        - tokens
        - errors
      - bin:
        - bin:
          - parseExpr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Range: AExpr
        - tuple:
          - list:
            - l
            - r
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (536:7)
      tuple:
      - l
      - tokens
      - errors
  let:
  - fun:
    - parseList
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (544:37)
        tuple:
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (547:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: AExpr
      - tuple:
        - items
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parseThenClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - baseLoc
      - bin:
        - locAddX
        - 1
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Then: Token
          - thenLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - thenLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - innerBaseLoc
        - thenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (560:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected \\\'then\\\'\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseElseClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        cons:
        - tuple:
          - .If: Token
          - nextIfLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - elseLoc
        - bin:
          - bin:
            - locIsSameRow
            - elseLoc
          - nextIfLoc
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - bin:
          - tuple:
            - .If: Token
            - elseLoc
          - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - elseLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - elseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (574:7)
      tuple:
      - bin:
        - .Missing: AExpr
        - baseLoc
      - tokens
      - errors
  let:
  - fun:
    - parseIf
    - ifLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - ifLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - cond
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseThenClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - alt
      - tokens
      - errors
    - bin:
      - bin:
        - parseElseClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .If: AExpr
      - tuple:
        - cond
        - body
        - alt
        - ifLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatchArm
    - matchLoc
    - armLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - matchLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - guard
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .When: Token
            - _
          tokens
        - ERROR:
          - missing
          - (593:33)
        bin:
        - bin:
          - parseExpr
          - innerBaseLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (596:9)
        let:
        - guard
        - bin:
          - .Missing: AExpr
          - bin:
            - nextLoc
            - tokens
        tuple:
        - guard
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (602:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - matchLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (605:9)
        bin:
        - bin:
          - parseExprError
          - \"Expected \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - AArm
      - tuple:
        - pat
        - guard
        - body
        - armLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatch
    - matchLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - target
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - matchLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - armLoc
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - _
          cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - ERROR:
          - missing
          - (615:58)
        tuple:
        - pipeLoc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - withLoc
          tokens
        - ERROR:
          - missing
          - (618:39)
        tuple:
        - withLoc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (621:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\'with\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - matchLoc
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - armLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - arm
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseMatchArm
            - matchLoc
          - armLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - bin:
          - bin:
            - locInside
            - matchLoc
          - pipeLoc
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - arm
              - acc
          - pipeLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (632:9)
        tuple:
        - bin:
          - listRev
          - bin:
            - arm
            - acc
        - tokens
        - errors
    let:
    - tuple:
      - arms
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - go
          - list
        - armLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Match: AExpr
      - tuple:
        - target
        - arms
        - matchLoc
    - tokens
    - errors
  let:
  - fun:
    - parseFun
    - baseLoc
    - funLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pats
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - funLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (644:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - baseLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (647:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - .Fun: AExpr
      - tuple:
        - pats
        - body
        - funLoc
    - tokens
    - errors
  let:
  - fun:
    - parseParenBody
    - baseLoc
    - parenLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (656:33)
      tuple:
      - body
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (659:7)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseAccessModifier
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - t
          - _
        tokens
      - bin:
        - t
        - tokenIsAccessModifier
      tokens
    - arm:
      - _
      - ERROR:
        - missing
        - (669:7)
      tokens
  let:
  - fun:
    - parseLet
    - letLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - letLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatLet
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - eqLoc
          tokens
        - ERROR:
          - missing
          - (681:35)
        bin:
        - bin:
          - bin:
            - parseSemi
            - innerBaseLoc
          - eqLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (684:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'=\\\'\"
        - tuple:
          - tokens
          - errors
    let:
    - tuple:
      - next
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .In: Token
            - inLoc
          tokens
        - bin:
          - bin:
            - locInside
            - letLoc
          - inLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - inLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons: _
          _
        - bin:
          - bin:
            - locIsSameColumn
            - bin:
              - nextLoc
              - tokens
          - letLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (696:14)
        tuple:
        - bin:
          - .TupleLit: AExpr
          - tuple:
            - list
            - letLoc
        - tokens
        - errors
    tuple:
    - bin:
      - .Let: AExpr
      - tuple:
        - pat
        - body
        - next
        - letLoc
    - tokens
    - errors
  let:
  - fun:
    - parseTyDecl
    - typeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - baseLoc
    - bin:
      - typeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - tyIdent
          - _
        tokens
      - ERROR:
        - missing
        - (707:40)
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - _
          tokens
        - ERROR:
          - missing
          - (709:31)
        let:
        - tuple:
          - tyDecl
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyDeclBody
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - expr
        - match:
          - tyDecl
          - arm:
            - call:
              - .Synonym: ATyDecl
              - ty
            - ERROR:
              - missing
              - (714:30)
            bin:
            - .TySynonym: AExpr
            - tuple:
              - tyIdent
              - ty
              - typeLoc
          - arm:
            - call:
              - .Union: ATyDecl
              - variants
            - ERROR:
              - missing
              - (717:34)
            bin:
            - .TyUnion: AExpr
            - tuple:
              - tyIdent
              - variants
              - typeLoc
        tuple:
        - expr
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (722:9)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyError
            - \"Expected \\\'=\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .TySynonym: AExpr
          - tuple:
            - tyIdent
            - ty
            - typeLoc
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (726:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOpen
    - openLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - parsePath
      - tuple:
        - tokens
        - errors
    - let:
      - fun:
        - go
        - acc
        - tuple:
          - tokens
          - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            cons:
            - tuple:
              - call:
                - .Ident: Token
                - ident
              - _
            tokens
          - ERROR:
            - missing
            - (734:60)
          bin:
          - bin:
            - go
            - bin:
              - ident
              - acc
          - tuple:
            - tokens
            - errors
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            tokens
          - ERROR:
            - missing
            - (737:34)
          let:
          - errors
          - bin:
            - bin:
              - parseNewError
              - \"Expected identifier\"
            - tuple:
              - tokens
              - errors
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (741:11)
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - _
          tokens
        - ERROR:
          - missing
          - (745:40)
        bin:
        - bin:
          - go
          - list: ident
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (748:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected identifier\"
          - tuple:
            - tokens
            - errors
        tuple:
        - list
        - tokens
        - errors
    let:
    - tuple:
      - path
      - tokens
      - errors
    - bin:
      - parsePath
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Open: AExpr
      - tuple:
        - path
        - openLoc
    - tokens
    - errors
  let:
  - fun:
    - parseAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (760:56)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (763:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (766:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (769:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (772:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (775:40)
      tuple:
      - bin:
        - .Ident: AExpr
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - parenLoc
        tokens
      - ERROR:
        - missing
        - (778:40)
      bin:
      - bin:
        - bin:
          - parseParenBody
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - bracketLoc
        tokens
      - ERROR:
        - missing
        - (781:44)
      bin:
      - bin:
        - bin:
          - parseList
          - baseLoc
        - bracketLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .If: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (784:31)
      bin:
      - bin:
        - parseIf
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Match: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (787:34)
      bin:
      - bin:
        - parseMatch
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Fun: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (790:32)
      bin:
      - bin:
        - bin:
          - parseFun
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (793:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (796:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseSuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - .BracketL: Token
            - _
          tokens
        - ERROR:
          - missing
          - (805:57)
        let:
        - tuple:
          - r
          - tokens
          - errors
        - bin:
          - bin:
            - parseRange
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - tuple:
          - tokens
          - errors
        - match:
          - tokens
          - arm:
            - cons:
              - tuple:
                - .BracketR: Token
                - _
              tokens
            - ERROR:
              - missing
              - (810:41)
            tuple:
            - tokens
            - errors
          - arm:
            - _
            - ERROR:
              - missing
              - (813:13)
            let:
            - errors
            - bin:
              - bin:
                - parseNewError
                - \"Expected closing \\\']\\\'\"
              - tuple:
                - tokens
                - errors
            tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Index: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - r
            - _
          tokens
        - ERROR:
          - missing
          - (819:56)
        bin:
        - bin:
          - go
          - bin:
            - .Nav: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - _
          tokens
        - ERROR:
          - missing
          - (822:32)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected .[] or .field\"
          - tuple:
            - tokens
            - errors
        tuple:
        - acc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (826:9)
        tuple:
        - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - l
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseApp
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - argBaseLoc
    - bin:
      - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parseSuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - callee
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsArg
          - tokens
      - let:
        - tuple:
          - arg
          - tokens
          - errors
        - bin:
          - bin:
            - parseSuffix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Bin: AExpr
            - tuple:
              - .App: Op
              - callee
              - arg
              - calleeLoc
        - tuple:
          - tokens
          - errors
      - tuple:
        - callee
        - tokens
        - errors
    bin:
    - bin:
      - go
      - callee
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Minus: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (850:34)
      let:
      - tuple:
        - arg
        - tokens
        - errors
      - bin:
        - bin:
          - parseApp
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Uni: AExpr
        - tuple:
          - .Neg: UniOp
          - arg
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (854:7)
      bin:
      - bin:
        - parseApp
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseNextLevelOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - bin:
      - opLevelToNext
      - level
    - arm:
      - .Prefix: OpLevel
      - ERROR:
        - missing
        - (859:20)
      bin:
      - bin:
        - parsePrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - nextLevel
      - ERROR:
        - missing
        - (862:15)
      bin:
      - bin:
        - bin:
          - parseOp
          - nextLevel
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOps
    - level
    - baseLoc
    - first
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - nextL
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseNextLevelOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - nextR
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    match:
    - tuple:
      - level
      - tokens
    - arm:
      - tuple:
        - .Or: OpLevel
        - cons:
          - tuple:
            - .PipePipe: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (877:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Or: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .And: OpLevel
        - cons:
          - tuple:
            - .AmpAmp: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (880:50)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .And: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Eq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (883:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Eq: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (886:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ne: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Lt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (889:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Lt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (892:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Le: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Gt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (895:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Gt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .GtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (898:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ge: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Pipe: OpLevel
        - cons:
          - tuple:
            - .PipeGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (901:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Pipe: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cons: OpLevel
        - cons:
          - tuple:
            - .ColonColon: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (904:55)
      bin:
      - bin:
        - bin:
          - bin:
            - nextR
            - first
          - .Cons: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Plus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (907:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Add: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Minus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (910:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Sub: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Star: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (913:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mul: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Slash: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (916:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Div: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Percent: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (919:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mod: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (922:7)
      tuple:
      - first
      - tokens
      - errors
  let:
  - fun:
    - parseOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - first
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseNextLevelOp
          - level
        - baseLoc
      - tuple:
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - bin:
          - parseOps
          - level
        - baseLoc
      - first
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTupleItem
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - bin:
        - parseOp
        - .Or: OpLevel
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (937:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parseTupleItem
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (941:14)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - item
      - tokens
      - errors
    - bin:
      - bin:
        - parseTupleItem
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (947:29)
      let:
      - tuple:
        - items
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - bin:
            - item
            - items
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (951:7)
      tuple:
      - item
      - tokens
      - errors
  let:
  - fun:
    - parseAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (959:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: AExpr
        - tuple:
          - body
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (963:7)
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseExpr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseAnno
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseStmt
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        tokens
      - ERROR:
        - missing
        - (971:53)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (975:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Type: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (978:37)
      bin:
      - bin:
        - parseTyDecl
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Open: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (981:37)
      bin:
      - bin:
        - parseOpen
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (984:7)
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseStmts
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - alignLoc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - semiLoc
          tokens
        - bin:
          - bin:
            - locInside
            - alignLoc
          - semiLoc
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - bin:
          - bin:
            - bin:
              - locIsSameColumn
              - alignLoc
            - bin:
              - nextLoc
              - tokens
          - bin:
            - leadsExpr
            - tokens
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (1002:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - alignLoc
    - bin:
      - nextLoc
      - tokens
    if:
    - bin:
      - bin:
        - locInside
        - baseLoc
      - alignLoc
    - bin:
      - bin:
        - bin:
          - go
          - list
        - alignLoc
      - tuple:
        - tokens
        - errors
    - tuple:
      - list
      - tokens
      - errors
  let:
  - fun:
    - parseSemi
    - baseLoc
    - mainLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - items
    - arm:
      - list
      - ERROR:
        - missing
        - (1021:8)
      bin:
      - bin:
        - parseExprError
        - \"Expected statements\"
      - tuple:
        - tokens
        - errors
    - arm:
      - list: item
      - ERROR:
        - missing
        - (1024:12)
      tuple:
      - item
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (1027:7)
      tuple:
      - bin:
        - .Semi: AExpr
        - tuple:
          - items
          - mainLoc
      - tokens
      - errors
  let:
  - fun:
    - parseTopLevel
    - tuple:
      - tokens
      - errors
  - let:
    - topLoc
    - tuple:
      - 0
      - 0
    match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (1035:8)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - topLoc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Dot: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1042:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1047:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1051:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (1054:7)
      bin:
      - bin:
        - bin:
          - parseSemi
          - topLoc
        - topLoc
      - tuple:
        - tokens
        - errors
  let:
  - anno:
    - fun:
      - parse
      - anno:
        - tokens
        - list:
          - tuple:
            - Token
            - Loc
    - tuple:
      - AExpr
      - list:
        - tuple:
          - string
          - Loc
  - let:
    - tuple:
      - expr
      - tokens
      - errors
    - bin:
      - parseTopLevel
      - tuple:
        - tokens
        - list
    let:
    - errors
    - match:
      - tokens
      - arm:
        - list
        - ERROR:
          - missing
          - (1062:10)
        errors
      - arm:
        - _
        - ERROR:
          - missing
          - (1065:9)
        bin:
        - bin:
          - parseNewError
          - \"Expected eof\"
        - tuple:
          - tokens
          - errors
    tuple:
    - expr
    - errors
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let-fun:
  - leadsExpr
  - match: tokens
  let-fun:
  - leadsArg
  - match: tokens
  let-fun:
  - leadsPat
  - match: tokens
  let-fun:
  - nextLoc
  - inf:
    - match: tokens
  let-fun:
  - nextInside
  - inf:
    - match: tokens
  let-fun:
  - parseErrorCore
  - let-val:
    - inf:
      - inf:
        - prim
        - inf:
          - inf:
            - prim
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - \"PARSE ERROR: \"
                  - msg
              - \" (\"
          - inf:
            - locToString
            - loc
      - \")\"
    inf:
    - inf:
      - prim
      - inf:
        - msg
        - loc
    - errors
  let-fun:
  - parseTyError
  - let-val:
    - inf:
      - nextLoc
      - tokens
    let-val:
    - inf:
      - inf:
        - inf:
          - parseErrorCore
          - msg
        - loc
      - errors
    inf:
    - inf:
      - .Missing: ATy
      - loc
    - tokens
    - errors
  let-fun:
  - parsePatError
  - let-val:
    - inf:
      - nextLoc
      - tokens
    let-val:
    - inf:
      - inf:
        - inf:
          - parseErrorCore
          - msg
        - loc
      - errors
    inf:
    - inf:
      - .Missing: APat
      - loc
    - tokens
    - errors
  let-fun:
  - parseExprError
  - let-val:
    - inf:
      - nextLoc
      - tokens
    let-val:
    - inf:
      - inf:
        - inf:
          - parseErrorCore
          - msg
        - loc
      - errors
    inf:
    - inf:
      - .Missing: AExpr
      - loc
    - tokens
    - errors
  let-fun:
  - parseNewError
  - let-val:
    - inf:
      - nextLoc
      - tokens
    inf:
    - inf:
      - inf:
        - parseErrorCore
        - msg
      - loc
    - errors
  let-fun:
  - parseTyArgs
  - match: tokens
  let-fun:
  - parseTyAtom
  - match: tokens
  let-fun:
  - parseTySuffix
  - let-fun:
    - go
    - let-val:
      - inf:
        - inf:
          - nextInside
          - baseLoc
        - tokens
      match: tokens
    inf:
    - go
    - inf:
      - inf:
        - parseTyAtom
        - baseLoc
      - inf:
        - tokens
        - errors
  let-fun:
  - parseTyPrefix
  - match: tokens
  let-fun:
  - parseTyTuple
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - inf:
        - parseTyPrefix
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseTyFun
  - let-val:
    - inf:
      - inf:
        - parseTyTuple
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseTy
  - inf:
    - inf:
      - parseTyFun
      - baseLoc
    - inf:
      - tokens
      - errors
  let-fun:
  - parseTyDeclUnion
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - inf:
        - go
        - prim
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - .Union: ATyDecl
      - variants
    - tokens
    - errors
  let-fun:
  - parseTyDeclBody
  - match: tokens
  let-fun:
  - parsePatParenBody
  - let-val:
    - inf:
      - inf:
        - parsePat
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatListBody
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - inf:
        - parsePat
        - baseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - inf:
      - inf:
        - go
        - inf:
          - inf:
            - prim
            - itemPat
          - prim
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - .ListLit: APat
      - inf:
        - itemPats
        - bracketLoc
    - tokens
    - errors
  let-fun:
  - parsePatAtom
  - match: tokens
  let-fun:
  - parsePatNav
  - let-val:
    - inf:
      - inf:
        - parsePatAtom
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatCallArgs
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - inf:
        - inf:
          - locMax
          - baseLoc
        - calleeLoc
    let-fun:
    - go
    - match:
      - match:
        - inf:
          - inf:
            - nextInside
            - argBaseLoc
          - tokens
    inf:
    - inf:
      - go
      - prim
    - inf:
      - tokens
      - errors
  let-fun:
  - parsePatCall
  - let-val:
    - inf:
      - nextLoc
      - tokens
    let-val:
    - inf:
      - inf:
        - parsePatNav
        - baseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - inf:
      - inf:
        - inf:
          - parsePatCallArgs
          - baseLoc
        - calleeLoc
      - inf:
        - tokens
        - errors
    match: args
  let-fun:
  - parsePatCons
  - let-val:
    - inf:
      - inf:
        - parsePatCall
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatAnno
  - let-val:
    - inf:
      - inf:
        - parsePatCons
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatTuple
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - inf:
        - parsePatAnno
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatAs
  - let-val:
    - inf:
      - inf:
        - parsePatTuple
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatOr
  - let-val:
    - inf:
      - inf:
        - parsePatAs
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parsePatLet
  - match: tokens
  let-fun:
  - parsePat
  - match:
    - inf:
      - not
      - match:
        - inf:
          - inf:
            - nextInside
            - baseLoc
          - tokens
  let-fun:
  - parseRange
  - let-val:
    - inf:
      - inf:
        - parseExpr
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseList
  - let-val:
    - inf:
      - inf:
        - parseStmts
        - baseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - match: tokens
    inf:
    - inf:
      - .ListLit: AExpr
      - inf:
        - items
        - bracketLoc
    - tokens
    - errors
  let-fun:
  - parseThenClause
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - baseLoc
    match: tokens
  let-fun:
  - parseElseClause
  - match: tokens
  let-fun:
  - parseIf
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - ifLoc
    let-val:
    - inf:
      - inf:
        - parseExpr
        - innerBaseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - inf:
      - inf:
        - parseThenClause
        - ifLoc
      - inf:
        - tokens
        - errors
    let-val:
    - inf:
      - inf:
        - parseElseClause
        - ifLoc
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - .If: AExpr
      - inf:
        - cond
        - body
        - alt
        - ifLoc
    - tokens
    - errors
  let-fun:
  - parseMatchArm
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - matchLoc
    let-val:
    - inf:
      - inf:
        - parsePat
        - innerBaseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - match: tokens
    let-val:
    - match: tokens
    inf:
    - inf:
      - AArm
      - inf:
        - pat
        - guard
        - body
        - armLoc
    - tokens
    - errors
  let-fun:
  - parseMatch
  - let-val:
    - inf:
      - inf:
        - parseExpr
        - matchLoc
      - inf:
        - tokens
        - errors
    let-val:
    - match: tokens
    let-fun:
    - go
    - let-val:
      - inf:
        - inf:
          - inf:
            - parseMatchArm
            - matchLoc
          - armLoc
        - inf:
          - tokens
          - errors
      match: tokens
    let-val:
    - inf:
      - inf:
        - inf:
          - go
          - prim
        - armLoc
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - .Match: AExpr
      - inf:
        - target
        - arms
        - matchLoc
    - tokens
    - errors
  let-fun:
  - parseFun
  - let-val:
    - inf:
      - inf:
        - inf:
          - parsePatCallArgs
          - baseLoc
        - funLoc
      - inf:
        - tokens
        - errors
    let-val:
    - match: tokens
    inf:
    - inf:
      - .Fun: AExpr
      - inf:
        - pats
        - body
        - funLoc
    - tokens
    - errors
  let-fun:
  - parseParenBody
  - let-val:
    - inf:
      - inf:
        - inf:
          - parseSemi
          - baseLoc
        - parenLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseAccessModifier
  - match: tokens
  let-fun:
  - parseLet
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - letLoc
    let-val:
    - inf:
      - parseAccessModifier
      - tokens
    let-val:
    - inf:
      - inf:
        - parsePatLet
        - innerBaseLoc
      - inf:
        - tokens
        - errors
    let-val:
    - match: tokens
    let-val:
    - match: tokens
    inf:
    - inf:
      - .Let: AExpr
      - inf:
        - pat
        - body
        - next
        - letLoc
    - tokens
    - errors
  let-fun:
  - parseTyDecl
  - let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - typeLoc
    let-val:
    - inf:
      - parseAccessModifier
      - tokens
    match: tokens
  let-fun:
  - parseOpen
  - let-fun:
    - parsePath
    - let-fun:
      - go
      - match: tokens
      match: tokens
    let-val:
    - inf:
      - parsePath
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - .Open: AExpr
      - inf:
        - path
        - openLoc
    - tokens
    - errors
  let-fun:
  - parseAtom
  - match: tokens
  let-fun:
  - parseSuffix
  - let-val:
    - inf:
      - inf:
        - parseAtom
        - baseLoc
      - inf:
        - tokens
        - errors
    let-fun:
    - go
    - match: tokens
    inf:
    - inf:
      - go
      - l
    - inf:
      - tokens
      - errors
  let-fun:
  - parseApp
  - let-val:
    - inf:
      - nextLoc
      - tokens
    let-val:
    - inf:
      - inf:
        - locAddX
        - 1
      - calleeLoc
    let-val:
    - inf:
      - inf:
        - parseSuffix
        - baseLoc
      - inf:
        - tokens
        - errors
    let-fun:
    - go
    - match:
      - match:
        - inf:
          - inf:
            - nextInside
            - argBaseLoc
          - tokens
    inf:
    - inf:
      - go
      - callee
    - inf:
      - tokens
      - errors
  let-fun:
  - parsePrefix
  - match: tokens
  let-fun:
  - parseNextLevelOp
  - match:
    - inf:
      - opLevelToNext
      - level
  let-fun:
  - parseOps
  - let-fun:
    - nextL
    - let-val:
      - inf:
        - inf:
          - inf:
            - parseNextLevelOp
            - level
          - baseLoc
        - inf:
          - tokens
          - errors
      let-val:
      - inf:
        - .Bin: AExpr
        - inf:
          - op
          - expr
          - second
          - opLoc
      inf:
      - inf:
        - inf:
          - inf:
            - parseOps
            - level
          - baseLoc
        - expr
      - inf:
        - tokens
        - errors
    let-fun:
    - nextR
    - let-val:
      - inf:
        - inf:
          - inf:
            - parseOp
            - level
          - baseLoc
        - inf:
          - tokens
          - errors
      let-val:
      - inf:
        - .Bin: AExpr
        - inf:
          - op
          - expr
          - second
          - opLoc
      inf:
      - inf:
        - inf:
          - inf:
            - parseOps
            - level
          - baseLoc
        - expr
      - inf:
        - tokens
        - errors
    match:
    - inf:
      - level
      - tokens
  let-fun:
  - parseOp
  - let-val:
    - inf:
      - inf:
        - inf:
          - parseNextLevelOp
          - level
        - baseLoc
      - inf:
        - tokens
        - errors
    inf:
    - inf:
      - inf:
        - inf:
          - parseOps
          - level
        - baseLoc
      - first
    - inf:
      - tokens
      - errors
  let-fun:
  - parseTupleItem
  - inf:
    - inf:
      - inf:
        - parseOp
        - .Or: OpLevel
      - baseLoc
    - inf:
      - tokens
      - errors
  let-fun:
  - parseTuple
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - inf:
        - parseTupleItem
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseAnno
  - let-val:
    - inf:
      - inf:
        - parseTuple
        - baseLoc
      - inf:
        - tokens
        - errors
    match: tokens
  let-fun:
  - parseExpr
  - inf:
    - inf:
      - parseAnno
      - baseLoc
    - inf:
      - tokens
      - errors
  let-fun:
  - parseStmt
  - match: tokens
  let-fun:
  - parseStmts
  - let-fun:
    - go
    - match: tokens
    let-val:
    - inf:
      - nextLoc
      - tokens
    match:
    - inf:
      - inf:
        - locInside
        - baseLoc
      - alignLoc
  let-fun:
  - parseSemi
  - let-val:
    - inf:
      - inf:
        - parseStmts
        - baseLoc
      - inf:
        - tokens
        - errors
    match: items
  let-fun:
  - parseTopLevel
  - let-val:
    - inf:
      - 0
      - 0
    match: tokens
  let-fun:
  - parse
  - inf:
    - let-val:
      - inf:
        - parseTopLevel
        - inf:
          - tokens
          - prim
      let-val:
      - match: tokens
      inf:
      - expr
      - errors
  inf
FILE MiloneLang/AstToHir.fs
module (21, 0)
rec (21, 7)
MiloneLang (21, 11)
. (21, 21)
AstToHir (21, 22)
open (23, 0)
MiloneLang (23, 5)
. (23, 15)
Types (23, 16)
open (24, 0)
MiloneLang (24, 5)
. (24, 15)
Helpers (24, 16)
let (26, 0)
opToPrim (26, 4)
op (26, 13)
= (26, 16)
match (27, 2)
op (27, 8)
with (27, 11)
| (28, 2)
Op (28, 4)
. (28, 6)
Add (28, 7)
-> (28, 11)
HPrim (29, 4)
. (29, 9)
Add (29, 10)
| (31, 2)
Op (31, 4)
. (31, 6)
Sub (31, 7)
-> (31, 11)
HPrim (32, 4)
. (32, 9)
Sub (32, 10)
| (34, 2)
Op (34, 4)
. (34, 6)
Mul (34, 7)
-> (34, 11)
HPrim (35, 4)
. (35, 9)
Mul (35, 10)
| (37, 2)
Op (37, 4)
. (37, 6)
Div (37, 7)
-> (37, 11)
HPrim (38, 4)
. (38, 9)
Div (38, 10)
| (40, 2)
Op (40, 4)
. (40, 6)
Mod (40, 7)
-> (40, 11)
HPrim (41, 4)
. (41, 9)
Mod (41, 10)
| (43, 2)
Op (43, 4)
. (43, 6)
Eq (43, 7)
-> (43, 10)
HPrim (44, 4)
. (44, 9)
Eq (44, 10)
| (46, 2)
Op (46, 4)
. (46, 6)
Lt (46, 7)
-> (46, 10)
HPrim (47, 4)
. (47, 9)
Lt (47, 10)
| (49, 2)
Op (49, 4)
. (49, 6)
Cons (49, 7)
-> (49, 12)
HPrim (50, 4)
. (50, 9)
Cons (50, 10)
| (52, 2)
Op (52, 4)
. (52, 6)
Ne (52, 7)
| (53, 2)
Op (53, 4)
. (53, 6)
Le (53, 7)
| (54, 2)
Op (54, 4)
. (54, 6)
Gt (54, 7)
| (55, 2)
Op (55, 4)
. (55, 6)
Ge (55, 7)
| (56, 2)
Op (56, 4)
. (56, 6)
And (56, 7)
| (57, 2)
Op (57, 4)
. (57, 6)
Or (57, 7)
| (58, 2)
Op (58, 4)
. (58, 6)
App (58, 7)
| (59, 2)
Op (59, 4)
. (59, 6)
Pipe (59, 7)
-> (59, 12)
failwithf (60, 4)
"NEVER: %A" (60, 14)
op (60, 26)
let (63, 0)
desugarListLitPat (63, 4)
pats (63, 22)
loc (63, 27)
= (63, 31)
assert (64, 2)
( (64, 9)
pats (64, 10)
|> (64, 15)
listIsEmpty (64, 18)
|> (64, 30)
not (64, 33)
) (64, 36)
let (66, 2)
rec (66, 6)
go (66, 10)
pats (66, 13)
= (66, 18)
match (67, 4)
pats (67, 10)
with (67, 15)
| (68, 4)
[ (68, 6)
] (68, 7)
-> (68, 9)
APat (69, 6)
. (69, 10)
ListLit (69, 11)
( (69, 19)
[ (69, 20)
] (69, 21)
, (69, 22)
loc (69, 24)
) (69, 27)
| (71, 4)
head (71, 6)
:: (71, 11)
tail (71, 14)
-> (71, 19)
let (72, 6)
tail (72, 10)
= (72, 15)
go (72, 17)
tail (72, 20)
APat (73, 6)
. (73, 10)
Cons (73, 11)
( (73, 16)
head (73, 17)
, (73, 21)
tail (73, 23)
, (73, 27)
loc (73, 29)
) (73, 32)
go (75, 2)
pats (75, 5)
let (78, 0)
desugarListLitExpr (78, 4)
items (78, 23)
loc (78, 29)
= (78, 33)
assert (79, 2)
( (79, 9)
items (79, 10)
|> (79, 16)
listIsEmpty (79, 19)
|> (79, 31)
not (79, 34)
) (79, 37)
let (81, 2)
rec (81, 6)
go (81, 10)
items (81, 13)
= (81, 19)
match (82, 4)
items (82, 10)
with (82, 16)
| (83, 4)
[ (83, 6)
] (83, 7)
-> (83, 9)
AExpr (84, 6)
. (84, 11)
ListLit (84, 12)
( (84, 20)
[ (84, 21)
] (84, 22)
, (84, 23)
loc (84, 25)
) (84, 28)
| (86, 4)
head (86, 6)
:: (86, 11)
tail (86, 14)
-> (86, 19)
let (87, 6)
tail (87, 10)
= (87, 15)
go (87, 17)
tail (87, 20)
AExpr (88, 6)
. (88, 11)
Bin (88, 12)
( (88, 16)
Op (88, 17)
. (88, 19)
Cons (88, 20)
, (88, 24)
head (88, 26)
, (88, 30)
tail (88, 32)
, (88, 36)
loc (88, 38)
) (88, 41)
go (90, 2)
items (90, 5)
let (95, 0)
desugarIf (95, 4)
cond (95, 14)
body (95, 19)
alt (95, 24)
loc (95, 28)
= (95, 32)
let (96, 2)
alt (96, 6)
= (96, 10)
match (97, 4)
alt (97, 10)
with (97, 14)
| (98, 4)
AExpr (98, 6)
. (98, 11)
Missing (98, 12)
_ (98, 20)
-> (98, 22)
axUnit (99, 6)
loc (99, 13)
| (100, 4)
_ (100, 6)
-> (100, 8)
alt (101, 6)
let (103, 2)
arms (103, 6)
= (103, 11)
[ (104, 4)
AArm (105, 6)
( (105, 11)
apTrue (105, 12)
loc (105, 19)
, (105, 22)
axTrue (105, 24)
loc (105, 31)
, (105, 34)
body (105, 36)
, (105, 40)
loc (105, 42)
) (105, 45)
AArm (106, 6)
( (106, 11)
apFalse (106, 12)
loc (106, 20)
, (106, 23)
axTrue (106, 25)
loc (106, 32)
, (106, 35)
alt (106, 37)
, (106, 40)
loc (106, 42)
) (106, 45)
] (107, 4)
AExpr (109, 2)
. (109, 7)
Match (109, 8)
( (109, 14)
cond (109, 15)
, (109, 19)
arms (109, 21)
, (109, 25)
loc (109, 27)
) (109, 30)
let (113, 0)
desugarFun (113, 4)
pats (113, 15)
body (113, 20)
loc (113, 25)
= (113, 29)
let (114, 2)
ident (114, 6)
= (114, 12)
"fun" (114, 14)
let (115, 2)
pat (115, 6)
= (115, 10)
APat (115, 12)
. (115, 16)
Fun (115, 17)
( (115, 21)
ident (115, 22)
, (115, 27)
pats (115, 29)
, (115, 33)
loc (115, 35)
) (115, 38)
let (116, 2)
next (116, 6)
= (116, 11)
AExpr (116, 13)
. (116, 18)
Ident (116, 19)
( (116, 25)
ident (116, 26)
, (116, 31)
loc (116, 33)
) (116, 36)
AExpr (117, 2)
. (117, 7)
Let (117, 8)
( (117, 12)
pat (117, 13)
, (117, 16)
body (117, 18)
, (117, 22)
next (117, 24)
, (117, 28)
loc (117, 30)
) (117, 33)
let (120, 0)
desugarUniNeg (120, 4)
arg (120, 18)
loc (120, 22)
= (120, 26)
let (121, 2)
zero (121, 6)
= (121, 11)
AExpr (121, 13)
. (121, 18)
Lit (121, 19)
( (121, 23)
Lit (121, 24)
. (121, 27)
Int (121, 28)
0 (121, 32)
, (121, 33)
loc (121, 35)
) (121, 38)
AExpr (122, 2)
. (122, 7)
Bin (122, 8)
( (122, 12)
Op (122, 13)
. (122, 15)
Sub (122, 16)
, (122, 19)
zero (122, 21)
, (122, 25)
arg (122, 27)
, (122, 30)
loc (122, 32)
) (122, 35)
let (125, 0)
desugarBinNe (125, 4)
l (125, 17)
r (125, 19)
loc (125, 21)
= (125, 25)
let (126, 2)
eqExpr (126, 6)
= (126, 13)
AExpr (126, 15)
. (126, 20)
Bin (126, 21)
( (126, 25)
Op (126, 26)
. (126, 28)
Eq (126, 29)
, (126, 31)
l (126, 33)
, (126, 34)
r (126, 36)
, (126, 37)
loc (126, 39)
) (126, 42)
axNot (127, 2)
eqExpr (127, 8)
loc (127, 15)
let (131, 0)
desugarBinLe (131, 4)
l (131, 17)
r (131, 19)
loc (131, 21)
= (131, 25)
let (132, 2)
ltExpr (132, 6)
= (132, 13)
AExpr (132, 15)
. (132, 20)
Bin (132, 21)
( (132, 25)
Op (132, 26)
. (132, 28)
Lt (132, 29)
, (132, 31)
r (132, 33)
, (132, 34)
l (132, 36)
, (132, 37)
loc (132, 39)
) (132, 42)
axNot (133, 2)
ltExpr (133, 8)
loc (133, 15)
let (137, 0)
desugarBinGt (137, 4)
l (137, 17)
r (137, 19)
loc (137, 21)
= (137, 25)
AExpr (138, 2)
. (138, 7)
Bin (138, 8)
( (138, 12)
Op (138, 13)
. (138, 15)
Lt (138, 16)
, (138, 18)
r (138, 20)
, (138, 21)
l (138, 23)
, (138, 24)
loc (138, 26)
) (138, 29)
let (141, 0)
desugarBinGe (141, 4)
l (141, 17)
r (141, 19)
loc (141, 21)
= (141, 25)
let (142, 2)
ltExpr (142, 6)
= (142, 13)
AExpr (142, 15)
. (142, 20)
Bin (142, 21)
( (142, 25)
Op (142, 26)
. (142, 28)
Lt (142, 29)
, (142, 31)
l (142, 33)
, (142, 34)
r (142, 36)
, (142, 37)
loc (142, 39)
) (142, 42)
axNot (143, 2)
ltExpr (143, 8)
loc (143, 15)
let (146, 0)
desugarBinAnd (146, 4)
l (146, 18)
r (146, 20)
loc (146, 22)
= (146, 26)
desugarIf (147, 2)
l (147, 12)
r (147, 14)
( (147, 16)
axFalse (147, 17)
loc (147, 25)
) (147, 28)
loc (147, 30)
let (150, 0)
desugarBinOr (150, 4)
l (150, 17)
r (150, 19)
loc (150, 21)
= (150, 25)
desugarIf (151, 2)
l (151, 12)
( (151, 14)
axTrue (151, 15)
loc (151, 22)
) (151, 25)
r (151, 27)
loc (151, 29)
let (155, 0)
desugarBinPipe (155, 4)
l (155, 19)
r (155, 21)
loc (155, 23)
= (155, 27)
AExpr (156, 2)
. (156, 7)
Bin (156, 8)
( (156, 12)
Op (156, 13)
. (156, 15)
App (156, 16)
, (156, 19)
r (156, 21)
, (156, 22)
l (156, 24)
, (156, 25)
loc (156, 27)
) (156, 30)
let (160, 0)
tryDesugarIndexRange (160, 4)
expr (160, 25)
loc (160, 30)
= (160, 34)
match (161, 2)
expr (161, 8)
with (161, 13)
| (162, 2)
AExpr (162, 4)
. (162, 9)
Index (162, 10)
( (162, 16)
s (162, 17)
, (162, 18)
AExpr (162, 20)
. (162, 25)
Range (162, 26)
( (162, 32)
[ (162, 33)
l (162, 34)
; (162, 35)
r (162, 37)
] (162, 38)
, (162, 39)
_ (162, 41)
) (162, 42)
, (162, 43)
_ (162, 45)
) (162, 46)
-> (162, 48)
let (163, 4)
getSlice (163, 8)
= (163, 17)
AExpr (163, 19)
. (163, 24)
Nav (163, 25)
( (163, 29)
AExpr (163, 30)
. (163, 35)
Ident (163, 36)
( (163, 42)
"String" (163, 43)
, (163, 51)
loc (163, 53)
) (163, 56)
, (163, 57)
"getSlice" (163, 59)
, (163, 69)
loc (163, 71)
) (163, 74)
true (164, 4)
, (164, 8)
axApp3 (164, 10)
getSlice (164, 17)
l (164, 26)
r (164, 28)
s (164, 30)
loc (164, 32)
| (166, 2)
_ (166, 4)
-> (166, 6)
false (167, 4)
, (167, 9)
expr (167, 11)
let (182, 0)
desugarLet (182, 4)
pat (182, 15)
body (182, 19)
next (182, 24)
loc (182, 29)
= (182, 33)
match (183, 2)
pat (183, 8)
with (183, 12)
| (184, 2)
APat (184, 4)
. (184, 8)
Anno (184, 9)
( (184, 14)
pat (184, 15)
, (184, 18)
annoTy (184, 20)
, (184, 26)
annoLoc (184, 28)
) (184, 35)
-> (184, 37)
let (185, 4)
body (185, 8)
= (185, 13)
AExpr (185, 15)
. (185, 20)
Anno (185, 21)
( (185, 26)
body (185, 27)
, (185, 31)
annoTy (185, 33)
, (185, 39)
annoLoc (185, 41)
) (185, 48)
desugarLet (186, 4)
pat (186, 15)
body (186, 19)
next (186, 24)
loc (186, 29)
| (188, 2)
APat (188, 4)
. (188, 8)
Fun (188, 9)
( (188, 13)
ident (188, 14)
, (188, 19)
args (188, 21)
, (188, 25)
_ (188, 27)
) (188, 28)
-> (188, 30)
ALet (189, 4)
. (189, 8)
LetFun (189, 9)
( (189, 16)
ident (189, 17)
, (189, 22)
args (189, 24)
, (189, 28)
body (189, 30)
, (189, 34)
next (189, 36)
, (189, 40)
loc (189, 42)
) (189, 45)
| (191, 2)
_ (191, 4)
-> (191, 6)
ALet (192, 4)
. (192, 8)
LetVal (192, 9)
( (192, 16)
pat (192, 17)
, (192, 20)
body (192, 22)
, (192, 26)
next (192, 28)
, (192, 32)
loc (192, 34)
) (192, 37)
let (194, 0)
onTy (194, 4)
( (194, 9)
ty (194, 10)
: (194, 12)
ATy (194, 14)
, (194, 17)
nameCtx (194, 19)
: (194, 26)
NameCtx (194, 28)
) (194, 35)
: (194, 36)
Ty (194, 38)
* (194, 41)
NameCtx (194, 43)
= (194, 51)
match (195, 2)
ty (195, 8)
with (195, 11)
| (196, 2)
ATy (196, 4)
. (196, 7)
Missing (196, 8)
loc (196, 16)
-> (196, 20)
Ty (197, 4)
. (197, 6)
Error (197, 7)
loc (197, 13)
, (197, 16)
nameCtx (197, 18)
| (199, 2)
ATy (199, 4)
. (199, 7)
App (199, 8)
( (199, 12)
ident (199, 13)
, (199, 18)
argTys (199, 20)
, (199, 26)
_ (199, 28)
) (199, 29)
-> (199, 31)
let (200, 4)
tySerial (200, 8)
, (200, 16)
nameCtx (200, 18)
= (200, 26)
nameCtx (200, 28)
|> (200, 36)
nameCtxAdd (200, 39)
ident (200, 50)
let (201, 4)
argTys (201, 8)
, (201, 14)
nameCtx (201, 16)
= (201, 24)
( (201, 26)
argTys (201, 27)
, (201, 33)
nameCtx (201, 35)
) (201, 42)
|> (201, 44)
stMap (201, 47)
onTy (201, 53)
tyRef (202, 4)
tySerial (202, 10)
argTys (202, 19)
, (202, 25)
nameCtx (202, 27)
| (204, 2)
ATy (204, 4)
. (204, 7)
Suffix (204, 8)
( (204, 15)
lTy (204, 16)
, (204, 19)
ident (204, 21)
, (204, 26)
_ (204, 28)
) (204, 29)
-> (204, 31)
let (205, 4)
lTy (205, 8)
, (205, 11)
nameCtx (205, 13)
= (205, 21)
( (205, 23)
lTy (205, 24)
, (205, 27)
nameCtx (205, 29)
) (205, 36)
|> (205, 38)
onTy (205, 41)
let (206, 4)
tySerial (206, 8)
, (206, 16)
nameCtx (206, 18)
= (206, 26)
nameCtx (206, 28)
|> (206, 36)
nameCtxAdd (206, 39)
ident (206, 50)
tyRef (207, 4)
tySerial (207, 10)
[ (207, 19)
lTy (207, 20)
] (207, 23)
, (207, 24)
nameCtx (207, 26)
| (209, 2)
ATy (209, 4)
. (209, 7)
Tuple (209, 8)
( (209, 14)
itemTys (209, 15)
, (209, 22)
_ (209, 24)
) (209, 25)
-> (209, 27)
let (210, 4)
itemTys (210, 8)
, (210, 15)
nameCtx (210, 17)
= (210, 25)
( (210, 27)
itemTys (210, 28)
, (210, 35)
nameCtx (210, 37)
) (210, 44)
|> (210, 46)
stMap (210, 49)
onTy (210, 55)
tyTuple (211, 4)
itemTys (211, 12)
, (211, 19)
nameCtx (211, 21)
| (213, 2)
ATy (213, 4)
. (213, 7)
Fun (213, 8)
( (213, 12)
sTy (213, 13)
, (213, 16)
tTy (213, 18)
, (213, 21)
_ (213, 23)
) (213, 24)
-> (213, 26)
let (214, 4)
sTy (214, 8)
, (214, 11)
nameCtx (214, 13)
= (214, 21)
( (214, 23)
sTy (214, 24)
, (214, 27)
nameCtx (214, 29)
) (214, 36)
|> (214, 38)
onTy (214, 41)
let (215, 4)
tTy (215, 8)
, (215, 11)
nameCtx (215, 13)
= (215, 21)
( (215, 23)
tTy (215, 24)
, (215, 27)
nameCtx (215, 29)
) (215, 36)
|> (215, 38)
onTy (215, 41)
tyFun (216, 4)
sTy (216, 10)
tTy (216, 14)
, (216, 17)
nameCtx (216, 19)
let (218, 0)
onPat (218, 4)
( (218, 10)
pat (218, 11)
: (218, 14)
APat (218, 16)
, (218, 20)
nameCtx (218, 22)
: (218, 29)
NameCtx (218, 31)
) (218, 38)
: (218, 39)
HPat (218, 41)
* (218, 46)
NameCtx (218, 48)
= (218, 56)
match (219, 2)
pat (219, 8)
with (219, 12)
| (220, 2)
APat (220, 4)
. (220, 8)
Missing (220, 9)
( (220, 17)
_ (220, 18)
, (220, 19)
loc (220, 21)
) (220, 24)
-> (220, 26)
failwithf (221, 4)
"Missing pattern %A" (221, 14)
loc (221, 35)
| (223, 2)
APat (223, 4)
. (223, 8)
Lit (223, 9)
( (223, 13)
lit (223, 14)
, (223, 17)
loc (223, 19)
) (223, 22)
-> (223, 24)
HPat (224, 4)
. (224, 8)
Lit (224, 9)
( (224, 13)
lit (224, 14)
, (224, 17)
loc (224, 19)
) (224, 22)
, (224, 23)
nameCtx (224, 25)
| (226, 2)
APat (226, 4)
. (226, 8)
Ident (226, 9)
( (226, 15)
ident (226, 16)
, (226, 21)
loc (226, 23)
) (226, 26)
-> (226, 28)
let (227, 4)
serial (227, 8)
, (227, 14)
nameCtx (227, 16)
= (227, 24)
nameCtx (227, 26)
|> (227, 34)
nameCtxAdd (227, 37)
ident (227, 48)
HPat (228, 4)
. (228, 8)
Ref (228, 9)
( (228, 13)
serial (228, 14)
, (228, 20)
noTy (228, 22)
, (228, 26)
loc (228, 28)
) (228, 31)
, (228, 32)
nameCtx (228, 34)
| (230, 2)
APat (230, 4)
. (230, 8)
ListLit (230, 9)
( (230, 17)
[ (230, 18)
] (230, 19)
, (230, 20)
loc (230, 22)
) (230, 25)
-> (230, 27)
patNil (231, 4)
noTy (231, 11)
loc (231, 16)
, (231, 19)
nameCtx (231, 21)
| (233, 2)
APat (233, 4)
. (233, 8)
ListLit (233, 9)
( (233, 17)
pats (233, 18)
, (233, 22)
loc (233, 24)
) (233, 27)
-> (233, 29)
let (234, 4)
pat (234, 8)
= (234, 12)
desugarListLitPat (234, 14)
pats (234, 32)
loc (234, 37)
( (235, 4)
pat (235, 5)
, (235, 8)
nameCtx (235, 10)
) (235, 17)
|> (235, 19)
onPat (235, 22)
| (237, 2)
APat (237, 4)
. (237, 8)
Nav (237, 9)
( (237, 13)
l (237, 14)
, (237, 15)
r (237, 17)
, (237, 18)
loc (237, 20)
) (237, 23)
-> (237, 25)
let (238, 4)
l (238, 8)
, (238, 9)
nameCtx (238, 11)
= (238, 19)
( (238, 21)
l (238, 22)
, (238, 23)
nameCtx (238, 25)
) (238, 32)
|> (238, 34)
onPat (238, 37)
HPat (239, 4)
. (239, 8)
Nav (239, 9)
( (239, 13)
l (239, 14)
, (239, 15)
r (239, 17)
, (239, 18)
noTy (239, 20)
, (239, 24)
loc (239, 26)
) (239, 29)
, (239, 30)
nameCtx (239, 32)
| (241, 2)
APat (241, 4)
. (241, 8)
Call (241, 9)
( (241, 14)
calleePat (241, 15)
, (241, 24)
argPats (241, 26)
, (241, 33)
loc (241, 35)
) (241, 38)
-> (241, 40)
let (242, 4)
calleePat (242, 8)
, (242, 17)
nameCtx (242, 19)
= (242, 27)
( (242, 29)
calleePat (242, 30)
, (242, 39)
nameCtx (242, 41)
) (242, 48)
|> (242, 50)
onPat (242, 53)
let (243, 4)
argPats (243, 8)
, (243, 15)
nameCtx (243, 17)
= (243, 25)
( (243, 27)
argPats (243, 28)
, (243, 35)
nameCtx (243, 37)
) (243, 44)
|> (243, 46)
stMap (243, 49)
onPat (243, 55)
HPat (244, 4)
. (244, 8)
Call (244, 9)
( (244, 14)
calleePat (244, 15)
, (244, 24)
argPats (244, 26)
, (244, 33)
noTy (244, 35)
, (244, 39)
loc (244, 41)
) (244, 44)
, (244, 45)
nameCtx (244, 47)
| (246, 2)
APat (246, 4)
. (246, 8)
Cons (246, 9)
( (246, 14)
head (246, 15)
, (246, 19)
tail (246, 21)
, (246, 25)
loc (246, 27)
) (246, 30)
-> (246, 32)
let (247, 4)
head (247, 8)
, (247, 12)
nameCtx (247, 14)
= (247, 22)
( (247, 24)
head (247, 25)
, (247, 29)
nameCtx (247, 31)
) (247, 38)
|> (247, 40)
onPat (247, 43)
let (248, 4)
tail (248, 8)
, (248, 12)
nameCtx (248, 14)
= (248, 22)
( (248, 24)
tail (248, 25)
, (248, 29)
nameCtx (248, 31)
) (248, 38)
|> (248, 40)
onPat (248, 43)
HPat (249, 4)
. (249, 8)
Cons (249, 9)
( (249, 14)
head (249, 15)
, (249, 19)
tail (249, 21)
, (249, 25)
noTy (249, 27)
, (249, 31)
loc (249, 33)
) (249, 36)
, (249, 37)
nameCtx (249, 39)
| (251, 2)
APat (251, 4)
. (251, 8)
TupleLit (251, 9)
( (251, 18)
pats (251, 19)
, (251, 23)
loc (251, 25)
) (251, 28)
-> (251, 30)
let (252, 4)
pats (252, 8)
, (252, 12)
nameCtx (252, 14)
= (252, 22)
( (252, 24)
pats (252, 25)
, (252, 29)
nameCtx (252, 31)
) (252, 38)
|> (252, 40)
stMap (252, 43)
onPat (252, 49)
HPat (253, 4)
. (253, 8)
Tuple (253, 9)
( (253, 15)
pats (253, 16)
, (253, 20)
noTy (253, 22)
, (253, 26)
loc (253, 28)
) (253, 31)
, (253, 32)
nameCtx (253, 34)
| (255, 2)
APat (255, 4)
. (255, 8)
As (255, 9)
( (255, 12)
pat (255, 13)
, (255, 16)
ident (255, 18)
, (255, 23)
loc (255, 25)
) (255, 28)
-> (255, 30)
let (256, 4)
serial (256, 8)
, (256, 14)
nameCtx (256, 16)
= (256, 24)
nameCtx (256, 26)
|> (256, 34)
nameCtxAdd (256, 37)
ident (256, 48)
let (257, 4)
pat (257, 8)
, (257, 11)
nameCtx (257, 13)
= (257, 21)
( (257, 23)
pat (257, 24)
, (257, 27)
nameCtx (257, 29)
) (257, 36)
|> (257, 38)
onPat (257, 41)
HPat (258, 4)
. (258, 8)
As (258, 9)
( (258, 12)
pat (258, 13)
, (258, 16)
serial (258, 18)
, (258, 24)
loc (258, 26)
) (258, 29)
, (258, 30)
nameCtx (258, 32)
| (260, 2)
APat (260, 4)
. (260, 8)
Anno (260, 9)
( (260, 14)
pat (260, 15)
, (260, 18)
ty (260, 20)
, (260, 22)
loc (260, 24)
) (260, 27)
-> (260, 29)
let (261, 4)
pat (261, 8)
, (261, 11)
nameCtx (261, 13)
= (261, 21)
( (261, 23)
pat (261, 24)
, (261, 27)
nameCtx (261, 29)
) (261, 36)
|> (261, 38)
onPat (261, 41)
let (262, 4)
ty (262, 8)
, (262, 10)
nameCtx (262, 12)
= (262, 20)
( (262, 22)
ty (262, 23)
, (262, 25)
nameCtx (262, 27)
) (262, 34)
|> (262, 36)
onTy (262, 39)
HPat (263, 4)
. (263, 8)
Anno (263, 9)
( (263, 14)
pat (263, 15)
, (263, 18)
ty (263, 20)
, (263, 22)
loc (263, 24)
) (263, 27)
, (263, 28)
nameCtx (263, 30)
| (265, 2)
APat (265, 4)
. (265, 8)
Or (265, 9)
( (265, 12)
l (265, 13)
, (265, 14)
r (265, 16)
, (265, 17)
loc (265, 19)
) (265, 22)
-> (265, 24)
let (266, 4)
l (266, 8)
, (266, 9)
nameCtx (266, 11)
= (266, 19)
( (266, 21)
l (266, 22)
, (266, 23)
nameCtx (266, 25)
) (266, 32)
|> (266, 34)
onPat (266, 37)
let (267, 4)
r (267, 8)
, (267, 9)
nameCtx (267, 11)
= (267, 19)
( (267, 21)
r (267, 22)
, (267, 23)
nameCtx (267, 25)
) (267, 32)
|> (267, 34)
onPat (267, 37)
HPat (268, 4)
. (268, 8)
Or (268, 9)
( (268, 12)
l (268, 13)
, (268, 14)
r (268, 16)
, (268, 17)
noTy (268, 19)
, (268, 23)
loc (268, 25)
) (268, 28)
, (268, 29)
nameCtx (268, 31)
| (270, 2)
APat (270, 4)
. (270, 8)
Fun (270, 9)
( (270, 13)
_ (270, 14)
, (270, 15)
_ (270, 17)
, (270, 18)
loc (270, 20)
) (270, 23)
-> (270, 25)
failwithf (271, 4)
"Invalid occurrence of fun pattern: %A" (271, 14)
loc (271, 54)
let (273, 0)
onExpr (273, 4)
( (273, 11)
expr (273, 12)
: (273, 16)
AExpr (273, 18)
, (273, 23)
nameCtx (273, 25)
: (273, 32)
NameCtx (273, 34)
) (273, 41)
: (273, 42)
HExpr (273, 44)
* (273, 50)
NameCtx (273, 52)
= (273, 60)
match (274, 2)
expr (274, 8)
with (274, 13)
| (275, 2)
AExpr (275, 4)
. (275, 9)
Missing (275, 10)
loc (275, 18)
-> (275, 22)
HExpr (276, 4)
. (276, 9)
Error (276, 10)
( (276, 16)
"Missing expression" (276, 17)
, (276, 37)
loc (276, 39)
) (276, 42)
, (276, 43)
nameCtx (276, 45)
| (278, 2)
AExpr (278, 4)
. (278, 9)
Lit (278, 10)
( (278, 14)
lit (278, 15)
, (278, 18)
loc (278, 20)
) (278, 23)
-> (278, 25)
HExpr (279, 4)
. (279, 9)
Lit (279, 10)
( (279, 14)
lit (279, 15)
, (279, 18)
loc (279, 20)
) (279, 23)
, (279, 24)
nameCtx (279, 26)
| (281, 2)
AExpr (281, 4)
. (281, 9)
Ident (281, 10)
( (281, 16)
ident (281, 17)
, (281, 22)
loc (281, 24)
) (281, 27)
-> (281, 29)
let (282, 4)
serial (282, 8)
, (282, 14)
nameCtx (282, 16)
= (282, 24)
nameCtx (282, 26)
|> (282, 34)
nameCtxAdd (282, 37)
ident (282, 48)
HExpr (283, 4)
. (283, 9)
Ref (283, 10)
( (283, 14)
serial (283, 15)
, (283, 21)
noTy (283, 23)
, (283, 27)
loc (283, 29)
) (283, 32)
, (283, 33)
nameCtx (283, 35)
| (285, 2)
AExpr (285, 4)
. (285, 9)
ListLit (285, 10)
( (285, 18)
[ (285, 19)
] (285, 20)
, (285, 21)
loc (285, 23)
) (285, 26)
-> (285, 28)
hxNil (286, 4)
noTy (286, 10)
loc (286, 15)
, (286, 18)
nameCtx (286, 20)
| (288, 2)
AExpr (288, 4)
. (288, 9)
ListLit (288, 10)
( (288, 18)
items (288, 19)
, (288, 24)
loc (288, 26)
) (288, 29)
-> (288, 31)
let (289, 4)
expr (289, 8)
= (289, 13)
desugarListLitExpr (289, 15)
items (289, 34)
loc (289, 40)
( (290, 4)
expr (290, 5)
, (290, 9)
nameCtx (290, 11)
) (290, 18)
|> (290, 20)
onExpr (290, 23)
| (292, 2)
AExpr (292, 4)
. (292, 9)
If (292, 10)
( (292, 13)
cond (292, 14)
, (292, 18)
body (292, 20)
, (292, 24)
alt (292, 26)
, (292, 29)
loc (292, 31)
) (292, 34)
-> (292, 36)
let (293, 4)
expr (293, 8)
= (293, 13)
desugarIf (293, 15)
cond (293, 25)
body (293, 30)
alt (293, 35)
loc (293, 39)
( (294, 4)
expr (294, 5)
, (294, 9)
nameCtx (294, 11)
) (294, 18)
|> (294, 20)
onExpr (294, 23)
| (296, 2)
AExpr (296, 4)
. (296, 9)
Match (296, 10)
( (296, 16)
target (296, 17)
, (296, 23)
arms (296, 25)
, (296, 29)
loc (296, 31)
) (296, 34)
-> (296, 36)
let (298, 4)
onArm (298, 8)
( (298, 14)
AArm (298, 15)
( (298, 20)
pat (298, 21)
, (298, 24)
guard (298, 26)
, (298, 31)
body (298, 33)
, (298, 37)
loc (298, 39)
) (298, 42)
, (298, 43)
nameCtx (298, 45)
) (298, 52)
= (298, 54)
let (299, 6)
pat (299, 10)
, (299, 13)
nameCtx (299, 15)
= (299, 23)
( (300, 8)
pat (300, 9)
, (300, 12)
nameCtx (300, 14)
) (300, 21)
|> (300, 23)
onPat (300, 26)
let (301, 6)
guard (301, 10)
, (301, 15)
nameCtx (301, 17)
= (301, 25)
match (302, 8)
guard (302, 14)
with (302, 20)
| (303, 8)
AExpr (303, 10)
. (303, 15)
Missing (303, 16)
_ (303, 24)
-> (303, 26)
hxTrue (304, 10)
loc (304, 17)
, (304, 20)
nameCtx (304, 22)
| (305, 8)
_ (305, 10)
-> (305, 12)
( (306, 10)
guard (306, 11)
, (306, 16)
nameCtx (306, 18)
) (306, 25)
|> (306, 27)
onExpr (306, 30)
let (307, 6)
body (307, 10)
, (307, 14)
nameCtx (307, 16)
= (307, 24)
( (308, 8)
body (308, 9)
, (308, 13)
nameCtx (308, 15)
) (308, 22)
|> (308, 24)
onExpr (308, 27)
( (309, 6)
pat (309, 7)
, (309, 10)
guard (309, 12)
, (309, 17)
body (309, 19)
) (309, 23)
, (309, 24)
nameCtx (309, 26)
let (310, 4)
target (310, 8)
, (310, 14)
nameCtx (310, 16)
= (310, 24)
( (310, 26)
target (310, 27)
, (310, 33)
nameCtx (310, 35)
) (310, 42)
|> (310, 44)
onExpr (310, 47)
let (311, 4)
arms (311, 8)
, (311, 12)
nameCtx (311, 14)
= (311, 22)
( (311, 24)
arms (311, 25)
, (311, 29)
nameCtx (311, 31)
) (311, 38)
|> (311, 40)
stMap (311, 43)
onArm (311, 49)
HExpr (312, 4)
. (312, 9)
Match (312, 10)
( (312, 16)
target (312, 17)
, (312, 23)
arms (312, 25)
, (312, 29)
noTy (312, 31)
, (312, 35)
loc (312, 37)
) (312, 40)
, (312, 41)
nameCtx (312, 43)
| (314, 2)
AExpr (314, 4)
. (314, 9)
Fun (314, 10)
( (314, 14)
pats (314, 15)
, (314, 19)
body (314, 21)
, (314, 25)
loc (314, 27)
) (314, 30)
-> (314, 32)
let (315, 4)
expr (315, 8)
= (315, 13)
desugarFun (315, 15)
pats (315, 26)
body (315, 31)
loc (315, 36)
( (316, 4)
expr (316, 5)
, (316, 9)
nameCtx (316, 11)
) (316, 18)
|> (316, 20)
onExpr (316, 23)
| (318, 2)
AExpr (318, 4)
. (318, 9)
Nav (318, 10)
( (318, 14)
l (318, 15)
, (318, 16)
r (318, 18)
, (318, 19)
loc (318, 21)
) (318, 24)
-> (318, 26)
let (319, 4)
l (319, 8)
, (319, 9)
nameCtx (319, 11)
= (319, 19)
( (319, 21)
l (319, 22)
, (319, 23)
nameCtx (319, 25)
) (319, 32)
|> (319, 34)
onExpr (319, 37)
HExpr (320, 4)
. (320, 9)
Nav (320, 10)
( (320, 14)
l (320, 15)
, (320, 16)
r (320, 18)
, (320, 19)
noTy (320, 21)
, (320, 25)
loc (320, 27)
) (320, 30)
, (320, 31)
nameCtx (320, 33)
| (322, 2)
AExpr (322, 4)
. (322, 9)
Index (322, 10)
( (322, 16)
l (322, 17)
, (322, 18)
r (322, 20)
, (322, 21)
loc (322, 23)
) (322, 26)
-> (322, 28)
match (323, 4)
tryDesugarIndexRange (323, 10)
expr (323, 31)
loc (323, 36)
with (323, 40)
| (324, 4)
true (324, 6)
, (324, 10)
expr (324, 12)
-> (324, 17)
( (325, 6)
expr (325, 7)
, (325, 11)
nameCtx (325, 13)
) (325, 20)
|> (325, 22)
onExpr (325, 25)
| (327, 4)
false (327, 6)
, (327, 11)
_ (327, 13)
-> (327, 15)
let (328, 6)
l (328, 10)
, (328, 11)
nameCtx (328, 13)
= (328, 21)
( (328, 23)
l (328, 24)
, (328, 25)
nameCtx (328, 27)
) (328, 34)
|> (328, 36)
onExpr (328, 39)
let (329, 6)
r (329, 10)
, (329, 11)
nameCtx (329, 13)
= (329, 21)
( (329, 23)
r (329, 24)
, (329, 25)
nameCtx (329, 27)
) (329, 34)
|> (329, 36)
onExpr (329, 39)
let (330, 6)
hxIndex (330, 10)
= (330, 18)
hxApp (330, 20)
( (330, 26)
hxApp (330, 27)
( (330, 33)
HExpr (330, 34)
. (330, 39)
Prim (330, 40)
( (330, 45)
HPrim (330, 46)
. (330, 51)
Index (330, 52)
, (330, 57)
noTy (330, 59)
, (330, 63)
loc (330, 65)
) (330, 68)
) (330, 69)
l (330, 71)
noTy (330, 73)
loc (330, 78)
) (330, 81)
r (330, 83)
noTy (330, 85)
loc (330, 90)
hxIndex (331, 6)
, (331, 13)
nameCtx (331, 15)
| (333, 2)
AExpr (333, 4)
. (333, 9)
Uni (333, 10)
( (333, 14)
UniOp (333, 15)
. (333, 20)
Neg (333, 21)
, (333, 24)
arg (333, 26)
, (333, 29)
loc (333, 31)
) (333, 34)
-> (333, 36)
let (334, 4)
expr (334, 8)
= (334, 13)
desugarUniNeg (334, 15)
arg (334, 29)
loc (334, 33)
( (335, 4)
expr (335, 5)
, (335, 9)
nameCtx (335, 11)
) (335, 18)
|> (335, 20)
onExpr (335, 23)
| (337, 2)
AExpr (337, 4)
. (337, 9)
Bin (337, 10)
( (337, 14)
Op (337, 15)
. (337, 17)
Ne (337, 18)
, (337, 20)
l (337, 22)
, (337, 23)
r (337, 25)
, (337, 26)
loc (337, 28)
) (337, 31)
-> (337, 33)
let (338, 4)
expr (338, 8)
= (338, 13)
desugarBinNe (338, 15)
l (338, 28)
r (338, 30)
loc (338, 32)
( (339, 4)
expr (339, 5)
, (339, 9)
nameCtx (339, 11)
) (339, 18)
|> (339, 20)
onExpr (339, 23)
| (341, 2)
AExpr (341, 4)
. (341, 9)
Bin (341, 10)
( (341, 14)
Op (341, 15)
. (341, 17)
Le (341, 18)
, (341, 20)
l (341, 22)
, (341, 23)
r (341, 25)
, (341, 26)
loc (341, 28)
) (341, 31)
-> (341, 33)
let (342, 4)
expr (342, 8)
= (342, 13)
desugarBinLe (342, 15)
l (342, 28)
r (342, 30)
loc (342, 32)
( (343, 4)
expr (343, 5)
, (343, 9)
nameCtx (343, 11)
) (343, 18)
|> (343, 20)
onExpr (343, 23)
| (345, 2)
AExpr (345, 4)
. (345, 9)
Bin (345, 10)
( (345, 14)
Op (345, 15)
. (345, 17)
Gt (345, 18)
, (345, 20)
l (345, 22)
, (345, 23)
r (345, 25)
, (345, 26)
loc (345, 28)
) (345, 31)
-> (345, 33)
let (346, 4)
expr (346, 8)
= (346, 13)
desugarBinGt (346, 15)
l (346, 28)
r (346, 30)
loc (346, 32)
( (347, 4)
expr (347, 5)
, (347, 9)
nameCtx (347, 11)
) (347, 18)
|> (347, 20)
onExpr (347, 23)
| (349, 2)
AExpr (349, 4)
. (349, 9)
Bin (349, 10)
( (349, 14)
Op (349, 15)
. (349, 17)
Ge (349, 18)
, (349, 20)
l (349, 22)
, (349, 23)
r (349, 25)
, (349, 26)
loc (349, 28)
) (349, 31)
-> (349, 33)
let (350, 4)
expr (350, 8)
= (350, 13)
desugarBinGe (350, 15)
l (350, 28)
r (350, 30)
loc (350, 32)
( (351, 4)
expr (351, 5)
, (351, 9)
nameCtx (351, 11)
) (351, 18)
|> (351, 20)
onExpr (351, 23)
| (353, 2)
AExpr (353, 4)
. (353, 9)
Bin (353, 10)
( (353, 14)
Op (353, 15)
. (353, 17)
And (353, 18)
, (353, 21)
l (353, 23)
, (353, 24)
r (353, 26)
, (353, 27)
loc (353, 29)
) (353, 32)
-> (353, 34)
let (354, 4)
expr (354, 8)
= (354, 13)
desugarBinAnd (354, 15)
l (354, 29)
r (354, 31)
loc (354, 33)
( (355, 4)
expr (355, 5)
, (355, 9)
nameCtx (355, 11)
) (355, 18)
|> (355, 20)
onExpr (355, 23)
| (357, 2)
AExpr (357, 4)
. (357, 9)
Bin (357, 10)
( (357, 14)
Op (357, 15)
. (357, 17)
Or (357, 18)
, (357, 20)
l (357, 22)
, (357, 23)
r (357, 25)
, (357, 26)
loc (357, 28)
) (357, 31)
-> (357, 33)
let (358, 4)
expr (358, 8)
= (358, 13)
desugarBinOr (358, 15)
l (358, 28)
r (358, 30)
loc (358, 32)
( (359, 4)
expr (359, 5)
, (359, 9)
nameCtx (359, 11)
) (359, 18)
|> (359, 20)
onExpr (359, 23)
| (361, 2)
AExpr (361, 4)
. (361, 9)
Bin (361, 10)
( (361, 14)
Op (361, 15)
. (361, 17)
Pipe (361, 18)
, (361, 22)
l (361, 24)
, (361, 25)
r (361, 27)
, (361, 28)
loc (361, 30)
) (361, 33)
-> (361, 35)
let (362, 4)
expr (362, 8)
= (362, 13)
desugarBinPipe (362, 15)
l (362, 30)
r (362, 32)
loc (362, 34)
( (363, 4)
expr (363, 5)
, (363, 9)
nameCtx (363, 11)
) (363, 18)
|> (363, 20)
onExpr (363, 23)
| (365, 2)
AExpr (365, 4)
. (365, 9)
Bin (365, 10)
( (365, 14)
Op (365, 15)
. (365, 17)
App (365, 18)
, (365, 21)
l (365, 23)
, (365, 24)
r (365, 26)
, (365, 27)
loc (365, 29)
) (365, 32)
-> (365, 34)
let (366, 4)
l (366, 8)
, (366, 9)
nameCtx (366, 11)
= (366, 19)
( (366, 21)
l (366, 22)
, (366, 23)
nameCtx (366, 25)
) (366, 32)
|> (366, 34)
onExpr (366, 37)
let (367, 4)
r (367, 8)
, (367, 9)
nameCtx (367, 11)
= (367, 19)
( (367, 21)
r (367, 22)
, (367, 23)
nameCtx (367, 25)
) (367, 32)
|> (367, 34)
onExpr (367, 37)
hxApp (368, 4)
l (368, 10)
r (368, 12)
noTy (368, 14)
loc (368, 19)
, (368, 22)
nameCtx (368, 24)
| (370, 2)
AExpr (370, 4)
. (370, 9)
Bin (370, 10)
( (370, 14)
op (370, 15)
, (370, 17)
l (370, 19)
, (370, 20)
r (370, 22)
, (370, 23)
loc (370, 25)
) (370, 28)
-> (370, 30)
let (371, 4)
prim (371, 8)
= (371, 13)
op (371, 15)
|> (371, 18)
opToPrim (371, 21)
let (372, 4)
l (372, 8)
, (372, 9)
nameCtx (372, 11)
= (372, 19)
( (372, 21)
l (372, 22)
, (372, 23)
nameCtx (372, 25)
) (372, 32)
|> (372, 34)
onExpr (372, 37)
let (373, 4)
r (373, 8)
, (373, 9)
nameCtx (373, 11)
= (373, 19)
( (373, 21)
r (373, 22)
, (373, 23)
nameCtx (373, 25)
) (373, 32)
|> (373, 34)
onExpr (373, 37)
let (374, 4)
primExpr (374, 8)
= (374, 17)
HExpr (374, 19)
. (374, 24)
Prim (374, 25)
( (374, 30)
prim (374, 31)
, (374, 35)
noTy (374, 37)
, (374, 41)
loc (374, 43)
) (374, 46)
hxApp (375, 4)
( (375, 10)
hxApp (375, 11)
primExpr (375, 17)
l (375, 26)
noTy (375, 28)
loc (375, 33)
) (375, 36)
r (375, 38)
noTy (375, 40)
loc (375, 45)
, (375, 48)
nameCtx (375, 50)
| (377, 2)
AExpr (377, 4)
. (377, 9)
Range (377, 10)
( (377, 16)
_ (377, 17)
, (377, 18)
loc (377, 20)
) (377, 23)
-> (377, 25)
HExpr (378, 4)
. (378, 9)
Error (378, 10)
( (378, 16)
"Invalid use of range syntax." (378, 17)
, (378, 47)
loc (378, 49)
) (378, 52)
, (378, 53)
nameCtx (378, 55)
| (380, 2)
AExpr (380, 4)
. (380, 9)
TupleLit (380, 10)
( (380, 19)
items (380, 20)
, (380, 25)
loc (380, 27)
) (380, 30)
-> (380, 32)
let (381, 4)
items (381, 8)
, (381, 13)
nameCtx (381, 15)
= (381, 23)
( (381, 25)
items (381, 26)
, (381, 31)
nameCtx (381, 33)
) (381, 40)
|> (381, 42)
stMap (381, 45)
onExpr (381, 51)
hxTuple (382, 4)
items (382, 12)
loc (382, 18)
, (382, 21)
nameCtx (382, 23)
| (384, 2)
AExpr (384, 4)
. (384, 9)
Anno (384, 10)
( (384, 15)
body (384, 16)
, (384, 20)
ty (384, 22)
, (384, 24)
loc (384, 26)
) (384, 29)
-> (384, 31)
let (385, 4)
body (385, 8)
, (385, 12)
nameCtx (385, 14)
= (385, 22)
( (385, 24)
body (385, 25)
, (385, 29)
nameCtx (385, 31)
) (385, 38)
|> (385, 40)
onExpr (385, 43)
let (386, 4)
ty (386, 8)
, (386, 10)
nameCtx (386, 12)
= (386, 20)
( (386, 22)
ty (386, 23)
, (386, 25)
nameCtx (386, 27)
) (386, 34)
|> (386, 36)
onTy (386, 39)
hxAnno (387, 4)
body (387, 11)
ty (387, 16)
loc (387, 19)
, (387, 22)
nameCtx (387, 24)
| (389, 2)
AExpr (389, 4)
. (389, 9)
Semi (389, 10)
( (389, 15)
exprs (389, 16)
, (389, 21)
loc (389, 23)
) (389, 26)
-> (389, 28)
assert (390, 4)
( (390, 11)
exprs (390, 12)
|> (390, 18)
listIsEmpty (390, 21)
|> (390, 33)
not (390, 36)
) (390, 39)
let (391, 4)
exprs (391, 8)
, (391, 13)
nameCtx (391, 15)
= (391, 23)
( (391, 25)
exprs (391, 26)
, (391, 31)
nameCtx (391, 33)
) (391, 40)
|> (391, 42)
stMap (391, 45)
onExpr (391, 51)
hxSemi (392, 4)
exprs (392, 11)
loc (392, 17)
, (392, 20)
nameCtx (392, 22)
| (394, 2)
AExpr (394, 4)
. (394, 9)
Let (394, 10)
( (394, 14)
pat (394, 15)
, (394, 18)
body (394, 20)
, (394, 24)
next (394, 26)
, (394, 30)
loc (394, 32)
) (394, 35)
-> (394, 37)
match (395, 4)
desugarLet (395, 10)
pat (395, 21)
body (395, 25)
next (395, 30)
loc (395, 35)
with (395, 39)
| (396, 4)
ALet (396, 6)
. (396, 10)
LetFun (396, 11)
( (396, 18)
ident (396, 19)
, (396, 24)
args (396, 26)
, (396, 30)
body (396, 32)
, (396, 36)
next (396, 38)
, (396, 42)
loc (396, 44)
) (396, 47)
-> (396, 49)
let (397, 6)
serial (397, 10)
, (397, 16)
nameCtx (397, 18)
= (397, 26)
nameCtx (397, 28)
|> (397, 36)
nameCtxAdd (397, 39)
ident (397, 50)
let (398, 6)
isMainFun (398, 10)
= (398, 20)
false (398, 22)
let (399, 6)
args (399, 10)
, (399, 14)
nameCtx (399, 16)
= (399, 24)
( (399, 26)
args (399, 27)
, (399, 31)
nameCtx (399, 33)
) (399, 40)
|> (399, 42)
stMap (399, 45)
onPat (399, 51)
let (400, 6)
body (400, 10)
, (400, 14)
nameCtx (400, 16)
= (400, 24)
( (400, 26)
body (400, 27)
, (400, 31)
nameCtx (400, 33)
) (400, 40)
|> (400, 42)
onExpr (400, 45)
let (401, 6)
next (401, 10)
, (401, 14)
nameCtx (401, 16)
= (401, 24)
( (401, 26)
next (401, 27)
, (401, 31)
nameCtx (401, 33)
) (401, 40)
|> (401, 42)
onExpr (401, 45)
HExpr (402, 6)
. (402, 11)
LetFun (402, 12)
( (402, 19)
serial (402, 20)
, (402, 26)
isMainFun (402, 28)
, (402, 37)
args (402, 39)
, (402, 43)
body (402, 45)
, (402, 49)
next (402, 51)
, (402, 55)
noTy (402, 57)
, (402, 61)
loc (402, 63)
) (402, 66)
, (402, 67)
nameCtx (402, 69)
| (404, 4)
ALet (404, 6)
. (404, 10)
LetVal (404, 11)
( (404, 18)
pat (404, 19)
, (404, 22)
body (404, 24)
, (404, 28)
next (404, 30)
, (404, 34)
loc (404, 36)
) (404, 39)
-> (404, 41)
let (405, 6)
pat (405, 10)
, (405, 13)
nameCtx (405, 15)
= (405, 23)
( (405, 25)
pat (405, 26)
, (405, 29)
nameCtx (405, 31)
) (405, 38)
|> (405, 40)
onPat (405, 43)
let (406, 6)
body (406, 10)
, (406, 14)
nameCtx (406, 16)
= (406, 24)
( (406, 26)
body (406, 27)
, (406, 31)
nameCtx (406, 33)
) (406, 40)
|> (406, 42)
onExpr (406, 45)
let (407, 6)
next (407, 10)
, (407, 14)
nameCtx (407, 16)
= (407, 24)
( (407, 26)
next (407, 27)
, (407, 31)
nameCtx (407, 33)
) (407, 40)
|> (407, 42)
onExpr (407, 45)
HExpr (408, 6)
. (408, 11)
Let (408, 12)
( (408, 16)
pat (408, 17)
, (408, 20)
body (408, 22)
, (408, 26)
next (408, 28)
, (408, 32)
noTy (408, 34)
, (408, 38)
loc (408, 40)
) (408, 43)
, (408, 44)
nameCtx (408, 46)
| (410, 2)
AExpr (410, 4)
. (410, 9)
TySynonym (410, 10)
( (410, 20)
ident (410, 21)
, (410, 26)
ty (410, 28)
, (410, 30)
loc (410, 32)
) (410, 35)
-> (410, 37)
let (411, 4)
serial (411, 8)
, (411, 14)
nameCtx (411, 16)
= (411, 24)
nameCtx (411, 26)
|> (411, 34)
nameCtxAdd (411, 37)
ident (411, 48)
let (412, 4)
ty (412, 8)
, (412, 10)
nameCtx (412, 12)
= (412, 20)
( (412, 22)
ty (412, 23)
, (412, 25)
nameCtx (412, 27)
) (412, 34)
|> (412, 36)
onTy (412, 39)
HExpr (413, 4)
. (413, 9)
TyDecl (413, 10)
( (413, 17)
serial (413, 18)
, (413, 24)
TyDecl (413, 26)
. (413, 32)
Synonym (413, 33)
( (413, 41)
ty (413, 42)
, (413, 44)
loc (413, 46)
) (413, 49)
, (413, 50)
loc (413, 52)
) (413, 55)
, (413, 56)
nameCtx (413, 58)
| (415, 2)
AExpr (415, 4)
. (415, 9)
TyUnion (415, 10)
( (415, 18)
ident (415, 19)
, (415, 24)
variants (415, 26)
, (415, 34)
loc (415, 36)
) (415, 39)
-> (415, 41)
let (416, 4)
onVariant (416, 8)
( (416, 18)
AVariant (416, 19)
( (416, 28)
ident (416, 29)
, (416, 34)
payloadTy (416, 36)
, (416, 45)
_variantLoc (416, 47)
) (416, 58)
, (416, 59)
nameCtx (416, 61)
) (416, 68)
= (416, 70)
let (417, 6)
serial (417, 10)
, (417, 16)
nameCtx (417, 18)
= (417, 26)
nameCtx (417, 28)
|> (417, 36)
nameCtxAdd (417, 39)
ident (417, 50)
let (418, 6)
hasPayload (418, 10)
, (418, 20)
payloadTy (418, 22)
, (418, 31)
nameCtx (418, 33)
= (418, 41)
match (419, 8)
payloadTy (419, 14)
with (419, 24)
| (420, 8)
Some (420, 10)
ty (420, 15)
-> (420, 18)
let (421, 10)
ty (421, 14)
, (421, 16)
nameCtx (421, 18)
= (421, 26)
( (421, 28)
ty (421, 29)
, (421, 31)
nameCtx (421, 33)
) (421, 40)
|> (421, 42)
onTy (421, 45)
true (422, 10)
, (422, 14)
ty (422, 16)
, (422, 18)
nameCtx (422, 20)
| (423, 8)
None (423, 10)
-> (423, 15)
false (424, 10)
, (424, 15)
tyUnit (424, 17)
, (424, 23)
nameCtx (424, 25)
( (425, 6)
ident (425, 7)
, (425, 12)
serial (425, 14)
, (425, 20)
hasPayload (425, 22)
, (425, 32)
payloadTy (425, 34)
) (425, 43)
, (425, 44)
nameCtx (425, 46)
let (426, 4)
unionSerial (426, 8)
, (426, 19)
nameCtx (426, 21)
= (426, 29)
nameCtx (427, 6)
|> (427, 14)
nameCtxAdd (427, 17)
ident (427, 28)
let (428, 4)
variants (428, 8)
, (428, 16)
nameCtx (428, 18)
= (428, 26)
( (429, 6)
variants (429, 7)
, (429, 15)
nameCtx (429, 17)
) (429, 24)
|> (429, 26)
stMap (429, 29)
onVariant (429, 35)
HExpr (430, 4)
. (430, 9)
TyDecl (430, 10)
( (430, 17)
unionSerial (430, 18)
, (430, 29)
TyDecl (430, 31)
. (430, 37)
Union (430, 38)
( (430, 44)
ident (430, 45)
, (430, 50)
variants (430, 52)
, (430, 60)
loc (430, 62)
) (430, 65)
, (430, 66)
loc (430, 68)
) (430, 71)
, (430, 72)
nameCtx (430, 74)
| (432, 2)
AExpr (432, 4)
. (432, 9)
Open (432, 10)
( (432, 15)
path (432, 16)
, (432, 20)
loc (432, 22)
) (432, 25)
-> (432, 27)
HExpr (433, 4)
. (433, 9)
Open (433, 10)
( (433, 15)
path (433, 16)
, (433, 20)
loc (433, 22)
) (433, 25)
, (433, 26)
nameCtx (433, 28)
let (435, 0)
astToHir (435, 4)
( (435, 13)
expr (435, 14)
: (435, 18)
AExpr (435, 20)
, (435, 25)
nameCtx (435, 27)
: (435, 34)
NameCtx (435, 36)
) (435, 43)
: (435, 44)
HExpr (435, 46)
* (435, 52)
NameCtx (435, 54)
= (435, 62)
( (436, 2)
expr (436, 3)
, (436, 7)
nameCtx (436, 9)
) (436, 16)
|> (436, 18)
onExpr (436, 21)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let:
  - fun:
    - opToPrim
    - op
  - match:
    - op
    - arm:
      - .Add: Op
      - ERROR:
        - missing
        - (29:12)
      .Add: HPrim
    - arm:
      - .Sub: Op
      - ERROR:
        - missing
        - (32:12)
      .Sub: HPrim
    - arm:
      - .Mul: Op
      - ERROR:
        - missing
        - (35:12)
      .Mul: HPrim
    - arm:
      - .Div: Op
      - ERROR:
        - missing
        - (38:12)
      .Div: HPrim
    - arm:
      - .Mod: Op
      - ERROR:
        - missing
        - (41:12)
      .Mod: HPrim
    - arm:
      - .Eq: Op
      - ERROR:
        - missing
        - (44:11)
      .Eq: HPrim
    - arm:
      - .Lt: Op
      - ERROR:
        - missing
        - (47:11)
      .Lt: HPrim
    - arm:
      - .Cons: Op
      - ERROR:
        - missing
        - (50:13)
      .Cons: HPrim
    - arm:
      - or:
        - .Ne: Op
        or:
        - .Le: Op
        or:
        - .Gt: Op
        or:
        - .Ge: Op
        or:
        - .And: Op
        or:
        - .Or: Op
        or:
        - .App: Op
        .Pipe: Op
      - ERROR:
        - missing
        - (60:13)
      bin:
      - bin:
        - failwithf
        - \"NEVER: %A\"
      - op
  let:
  - fun:
    - desugarListLitPat
    - pats
    - loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - pats
          - listIsEmpty
        - not
    - let:
      - fun:
        - go
        - pats
      - match:
        - pats
        - arm:
          - list
          - ERROR:
            - missing
            - (69:10)
          bin:
          - .ListLit: APat
          - tuple:
            - list
            - loc
        - arm:
          - cons: head
            tail
          - ERROR:
            - missing
            - (72:20)
          let:
          - tail
          - bin:
            - go
            - tail
          bin:
          - .Cons: APat
          - tuple:
            - head
            - tail
            - loc
      bin:
      - go
      - pats
  let:
  - fun:
    - desugarListLitExpr
    - items
    - loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - items
          - listIsEmpty
        - not
    - let:
      - fun:
        - go
        - items
      - match:
        - items
        - arm:
          - list
          - ERROR:
            - missing
            - (84:10)
          bin:
          - .ListLit: AExpr
          - tuple:
            - list
            - loc
        - arm:
          - cons: head
            tail
          - ERROR:
            - missing
            - (87:20)
          let:
          - tail
          - bin:
            - go
            - tail
          bin:
          - .Bin: AExpr
          - tuple:
            - .Cons: Op
            - head
            - tail
            - loc
      bin:
      - go
      - items
  let:
  - fun:
    - desugarIf
    - cond
    - body
    - alt
    - loc
  - let:
    - alt
    - match:
      - alt
      - arm:
        - call:
          - .Missing: AExpr
          - _
        - ERROR:
          - missing
          - (99:23)
        bin:
        - axUnit
        - loc
      - arm:
        - _
        - ERROR:
          - missing
          - (101:9)
        alt
    let:
    - arms
    - list:
      - bin:
        - AArm
        - tuple:
          - bin:
            - apTrue
            - loc
          - bin:
            - axTrue
            - loc
          - body
          - loc
      - bin:
        - AArm
        - tuple:
          - bin:
            - apFalse
            - loc
          - bin:
            - axTrue
            - loc
          - alt
          - loc
    bin:
    - .Match: AExpr
    - tuple:
      - cond
      - arms
      - loc
  let:
  - fun:
    - desugarFun
    - pats
    - body
    - loc
  - let:
    - ident
    - \"fun\"
    let:
    - pat
    - bin:
      - .Fun: APat
      - tuple:
        - ident
        - pats
        - loc
    let:
    - next
    - bin:
      - .Ident: AExpr
      - tuple:
        - ident
        - loc
    bin:
    - .Let: AExpr
    - tuple:
      - pat
      - body
      - next
      - loc
  let:
  - fun:
    - desugarUniNeg
    - arg
    - loc
  - let:
    - zero
    - bin:
      - .Lit: AExpr
      - tuple:
        - bin:
          - .Int: Lit
          - 0
        - loc
    bin:
    - .Bin: AExpr
    - tuple:
      - .Sub: Op
      - zero
      - arg
      - loc
  let:
  - fun:
    - desugarBinNe
    - l
    - r
    - loc
  - let:
    - eqExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Eq: Op
        - l
        - r
        - loc
    bin:
    - bin:
      - axNot
      - eqExpr
    - loc
  let:
  - fun:
    - desugarBinLe
    - l
    - r
    - loc
  - let:
    - ltExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Lt: Op
        - r
        - l
        - loc
    bin:
    - bin:
      - axNot
      - ltExpr
    - loc
  let:
  - fun:
    - desugarBinGt
    - l
    - r
    - loc
  - bin:
    - .Bin: AExpr
    - tuple:
      - .Lt: Op
      - r
      - l
      - loc
  let:
  - fun:
    - desugarBinGe
    - l
    - r
    - loc
  - let:
    - ltExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Lt: Op
        - l
        - r
        - loc
    bin:
    - bin:
      - axNot
      - ltExpr
    - loc
  let:
  - fun:
    - desugarBinAnd
    - l
    - r
    - loc
  - bin:
    - bin:
      - bin:
        - bin:
          - desugarIf
          - l
        - r
      - bin:
        - axFalse
        - loc
    - loc
  let:
  - fun:
    - desugarBinOr
    - l
    - r
    - loc
  - bin:
    - bin:
      - bin:
        - bin:
          - desugarIf
          - l
        - bin:
          - axTrue
          - loc
      - r
    - loc
  let:
  - fun:
    - desugarBinPipe
    - l
    - r
    - loc
  - bin:
    - .Bin: AExpr
    - tuple:
      - .App: Op
      - r
      - l
      - loc
  let:
  - fun:
    - tryDesugarIndexRange
    - expr
    - loc
  - match:
    - expr
    - arm:
      - call:
        - .Index: AExpr
        - tuple:
          - s
          - call:
            - .Range: AExpr
            - tuple:
              - list:
                - l
                - r
              - _
          - _
      - ERROR:
        - missing
        - (163:49)
      let:
      - getSlice
      - bin:
        - .Nav: AExpr
        - tuple:
          - bin:
            - .Ident: AExpr
            - tuple:
              - \"String\"
              - loc
          - \"getSlice\"
          - loc
      tuple:
      - true
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - axApp3
                - getSlice
              - l
            - r
          - s
        - loc
    - arm:
      - _
      - ERROR:
        - missing
        - (167:7)
      tuple:
      - false
      - expr
  let:
  - fun:
    - desugarLet
    - pat
    - body
    - next
    - loc
  - match:
    - pat
    - arm:
      - call:
        - .Anno: APat
        - tuple:
          - pat
          - annoTy
          - annoLoc
      - ERROR:
        - missing
        - (185:38)
      let:
      - body
      - bin:
        - .Anno: AExpr
        - tuple:
          - body
          - annoTy
          - annoLoc
      bin:
      - bin:
        - bin:
          - bin:
            - desugarLet
            - pat
          - body
        - next
      - loc
    - arm:
      - call:
        - .Fun: APat
        - tuple:
          - ident
          - args
          - _
      - ERROR:
        - missing
        - (189:31)
      bin:
      - .LetFun: ALet
      - tuple:
        - ident
        - args
        - body
        - next
        - loc
    - arm:
      - _
      - ERROR:
        - missing
        - (192:7)
      bin:
      - .LetVal: ALet
      - tuple:
        - pat
        - body
        - next
        - loc
  let:
  - anno:
    - fun:
      - onTy
      - tuple:
        - anno:
          - ty
          - ATy
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - Ty
      - NameCtx
  - match:
    - ty
    - arm:
      - call:
        - .Missing: ATy
        - loc
      - ERROR:
        - missing
        - (197:21)
      tuple:
      - bin:
        - .Error: Ty
        - loc
      - nameCtx
    - arm:
      - call:
        - .App: ATy
        - tuple:
          - ident
          - argTys
          - _
      - ERROR:
        - missing
        - (200:32)
      let:
      - tuple:
        - tySerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - argTys
        - nameCtx
      - bin:
        - tuple:
          - argTys
          - nameCtx
        - bin:
          - stMap
          - onTy
      tuple:
      - bin:
        - bin:
          - tyRef
          - tySerial
        - argTys
      - nameCtx
    - arm:
      - call:
        - .Suffix: ATy
        - tuple:
          - lTy
          - ident
          - _
      - ERROR:
        - missing
        - (205:32)
      let:
      - tuple:
        - lTy
        - nameCtx
      - bin:
        - tuple:
          - lTy
          - nameCtx
        - onTy
      let:
      - tuple:
        - tySerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - bin:
          - tyRef
          - tySerial
        - list: lTy
      - nameCtx
    - arm:
      - call:
        - .Tuple: ATy
        - tuple:
          - itemTys
          - _
      - ERROR:
        - missing
        - (210:28)
      let:
      - tuple:
        - itemTys
        - nameCtx
      - bin:
        - tuple:
          - itemTys
          - nameCtx
        - bin:
          - stMap
          - onTy
      tuple:
      - bin:
        - tyTuple
        - itemTys
      - nameCtx
    - arm:
      - call:
        - .Fun: ATy
        - tuple:
          - sTy
          - tTy
          - _
      - ERROR:
        - missing
        - (214:27)
      let:
      - tuple:
        - sTy
        - nameCtx
      - bin:
        - tuple:
          - sTy
          - nameCtx
        - onTy
      let:
      - tuple:
        - tTy
        - nameCtx
      - bin:
        - tuple:
          - tTy
          - nameCtx
        - onTy
      tuple:
      - bin:
        - bin:
          - tyFun
          - sTy
        - tTy
      - nameCtx
  let:
  - anno:
    - fun:
      - onPat
      - tuple:
        - anno:
          - pat
          - APat
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HPat
      - NameCtx
  - match:
    - pat
    - arm:
      - call:
        - .Missing: APat
        - tuple:
          - _
          - loc
      - ERROR:
        - missing
        - (221:27)
      bin:
      - bin:
        - failwithf
        - \"Missing pattern %A\"
      - loc
    - arm:
      - call:
        - .Lit: APat
        - tuple:
          - lit
          - loc
      - ERROR:
        - missing
        - (224:25)
      tuple:
      - bin:
        - .Lit: HPat
        - tuple:
          - lit
          - loc
      - nameCtx
    - arm:
      - call:
        - .Ident: APat
        - tuple:
          - ident
          - loc
      - ERROR:
        - missing
        - (227:29)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - .Ref: HPat
        - tuple:
          - serial
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: APat
        - tuple:
          - list
          - loc
      - ERROR:
        - missing
        - (231:28)
      tuple:
      - bin:
        - bin:
          - patNil
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: APat
        - tuple:
          - pats
          - loc
      - ERROR:
        - missing
        - (234:30)
      let:
      - pat
      - bin:
        - bin:
          - desugarListLitPat
          - pats
        - loc
      bin:
      - tuple:
        - pat
        - nameCtx
      - onPat
    - arm:
      - call:
        - .Nav: APat
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (238:26)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Nav: HPat
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Call: APat
        - tuple:
          - calleePat
          - argPats
          - loc
      - ERROR:
        - missing
        - (242:41)
      let:
      - tuple:
        - calleePat
        - nameCtx
      - bin:
        - tuple:
          - calleePat
          - nameCtx
        - onPat
      let:
      - tuple:
        - argPats
        - nameCtx
      - bin:
        - tuple:
          - argPats
          - nameCtx
        - bin:
          - stMap
          - onPat
      tuple:
      - bin:
        - .Call: HPat
        - tuple:
          - calleePat
          - argPats
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Cons: APat
        - tuple:
          - head
          - tail
          - loc
      - ERROR:
        - missing
        - (247:33)
      let:
      - tuple:
        - head
        - nameCtx
      - bin:
        - tuple:
          - head
          - nameCtx
        - onPat
      let:
      - tuple:
        - tail
        - nameCtx
      - bin:
        - tuple:
          - tail
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Cons: HPat
        - tuple:
          - head
          - tail
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .TupleLit: APat
        - tuple:
          - pats
          - loc
      - ERROR:
        - missing
        - (252:31)
      let:
      - tuple:
        - pats
        - nameCtx
      - bin:
        - tuple:
          - pats
          - nameCtx
        - bin:
          - stMap
          - onPat
      tuple:
      - bin:
        - .Tuple: HPat
        - tuple:
          - pats
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .As: APat
        - tuple:
          - pat
          - ident
          - loc
      - ERROR:
        - missing
        - (256:31)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - pat
        - nameCtx
      - bin:
        - tuple:
          - pat
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .As: HPat
        - tuple:
          - pat
          - serial
          - loc
      - nameCtx
    - arm:
      - call:
        - .Anno: APat
        - tuple:
          - pat
          - ty
          - loc
      - ERROR:
        - missing
        - (261:30)
      let:
      - tuple:
        - pat
        - nameCtx
      - bin:
        - tuple:
          - pat
          - nameCtx
        - onPat
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - .Anno: HPat
        - tuple:
          - pat
          - ty
          - loc
      - nameCtx
    - arm:
      - call:
        - .Or: APat
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (266:25)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onPat
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Or: HPat
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Fun: APat
        - tuple:
          - _
          - _
          - loc
      - ERROR:
        - missing
        - (271:26)
      bin:
      - bin:
        - failwithf
        - \"Invalid occurrence of fun pattern: %A\"
      - loc
  let:
  - anno:
    - fun:
      - onExpr
      - tuple:
        - anno:
          - expr
          - AExpr
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HExpr
      - NameCtx
  - match:
    - expr
    - arm:
      - call:
        - .Missing: AExpr
        - loc
      - ERROR:
        - missing
        - (276:23)
      tuple:
      - bin:
        - .Error: HExpr
        - tuple:
          - \"Missing expression\"
          - loc
      - nameCtx
    - arm:
      - call:
        - .Lit: AExpr
        - tuple:
          - lit
          - loc
      - ERROR:
        - missing
        - (279:26)
      tuple:
      - bin:
        - .Lit: HExpr
        - tuple:
          - lit
          - loc
      - nameCtx
    - arm:
      - call:
        - .Ident: AExpr
        - tuple:
          - ident
          - loc
      - ERROR:
        - missing
        - (282:30)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - .Ref: HExpr
        - tuple:
          - serial
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: AExpr
        - tuple:
          - list
          - loc
      - ERROR:
        - missing
        - (286:29)
      tuple:
      - bin:
        - bin:
          - hxNil
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: AExpr
        - tuple:
          - items
          - loc
      - ERROR:
        - missing
        - (289:32)
      let:
      - expr
      - bin:
        - bin:
          - desugarListLitExpr
          - items
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .If: AExpr
        - tuple:
          - cond
          - body
          - alt
          - loc
      - ERROR:
        - missing
        - (293:37)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - bin:
              - desugarIf
              - cond
            - body
          - alt
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Match: AExpr
        - tuple:
          - target
          - arms
          - loc
      - ERROR:
        - missing
        - (297:37)
      let:
      - fun:
        - onArm
        - tuple:
          - call:
            - AArm
            - tuple:
              - pat
              - guard
              - body
              - loc
          - nameCtx
      - let:
        - tuple:
          - pat
          - nameCtx
        - bin:
          - tuple:
            - pat
            - nameCtx
          - onPat
        let:
        - tuple:
          - guard
          - nameCtx
        - match:
          - guard
          - arm:
            - call:
              - .Missing: AExpr
              - _
            - ERROR:
              - missing
              - (304:27)
            tuple:
            - bin:
              - hxTrue
              - loc
            - nameCtx
          - arm:
            - _
            - ERROR:
              - missing
              - (306:13)
            bin:
            - tuple:
              - guard
              - nameCtx
            - onExpr
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        tuple:
        - tuple:
          - pat
          - guard
          - body
        - nameCtx
      let:
      - tuple:
        - target
        - nameCtx
      - bin:
        - tuple:
          - target
          - nameCtx
        - onExpr
      let:
      - tuple:
        - arms
        - nameCtx
      - bin:
        - tuple:
          - arms
          - nameCtx
        - bin:
          - stMap
          - onArm
      tuple:
      - bin:
        - .Match: HExpr
        - tuple:
          - target
          - arms
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Fun: AExpr
        - tuple:
          - pats
          - body
          - loc
      - ERROR:
        - missing
        - (315:33)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarFun
            - pats
          - body
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Nav: AExpr
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (319:27)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      tuple:
      - bin:
        - .Nav: HExpr
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Index: AExpr
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (323:29)
      match:
      - bin:
        - bin:
          - tryDesugarIndexRange
          - expr
        - loc
      - arm:
        - tuple:
          - true
          - expr
        - ERROR:
          - missing
          - (325:18)
        bin:
        - tuple:
          - expr
          - nameCtx
        - onExpr
      - arm:
        - tuple:
          - false
          - _
        - ERROR:
          - missing
          - (328:16)
        let:
        - tuple:
          - l
          - nameCtx
        - bin:
          - tuple:
            - l
            - nameCtx
          - onExpr
        let:
        - tuple:
          - r
          - nameCtx
        - bin:
          - tuple:
            - r
            - nameCtx
          - onExpr
        let:
        - hxIndex
        - bin:
          - bin:
            - bin:
              - bin:
                - hxApp
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - hxApp
                        - bin:
                          - .Prim: HExpr
                          - tuple:
                            - .Index: HPrim
                            - noTy
                            - loc
                      - l
                    - noTy
                  - loc
              - r
            - noTy
          - loc
        tuple:
        - hxIndex
        - nameCtx
    - arm:
      - call:
        - .Uni: AExpr
        - tuple:
          - .Neg: UniOp
          - arg
          - loc
      - ERROR:
        - missing
        - (334:37)
      let:
      - expr
      - bin:
        - bin:
          - desugarUniNeg
          - arg
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Ne: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (338:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinNe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Le: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (342:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinLe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Gt: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (346:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinGt
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Ge: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (350:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinGe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .And: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (354:35)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinAnd
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Or: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (358:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinOr
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Pipe: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (362:36)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinPipe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .App: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (366:35)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onExpr
      tuple:
      - bin:
        - bin:
          - bin:
            - bin:
              - hxApp
              - l
            - r
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (371:31)
      let:
      - prim
      - bin:
        - op
        - opToPrim
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onExpr
      let:
      - primExpr
      - bin:
        - .Prim: HExpr
        - tuple:
          - prim
          - noTy
          - loc
      tuple:
      - bin:
        - bin:
          - bin:
            - bin:
              - hxApp
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - hxApp
                      - primExpr
                    - l
                  - noTy
                - loc
            - r
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .Range: AExpr
        - tuple:
          - _
          - loc
      - ERROR:
        - missing
        - (378:26)
      tuple:
      - bin:
        - .Error: HExpr
        - tuple:
          - \"Invalid use of range syntax.\"
          - loc
      - nameCtx
    - arm:
      - call:
        - .TupleLit: AExpr
        - tuple:
          - items
          - loc
      - ERROR:
        - missing
        - (381:33)
      let:
      - tuple:
        - items
        - nameCtx
      - bin:
        - tuple:
          - items
          - nameCtx
        - bin:
          - stMap
          - onExpr
      tuple:
      - bin:
        - bin:
          - hxTuple
          - items
        - loc
      - nameCtx
    - arm:
      - call:
        - .Anno: AExpr
        - tuple:
          - body
          - ty
          - loc
      - ERROR:
        - missing
        - (385:32)
      let:
      - tuple:
        - body
        - nameCtx
      - bin:
        - tuple:
          - body
          - nameCtx
        - onExpr
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - bin:
          - bin:
            - hxAnno
            - body
          - ty
        - loc
      - nameCtx
    - arm:
      - call:
        - .Semi: AExpr
        - tuple:
          - exprs
          - loc
      - ERROR:
        - missing
        - (390:29)
      semi:
      - bin:
        - assert
        - bin:
          - bin:
            - exprs
            - listIsEmpty
          - not
      - let:
        - tuple:
          - exprs
          - nameCtx
        - bin:
          - tuple:
            - exprs
            - nameCtx
          - bin:
            - stMap
            - onExpr
        tuple:
        - bin:
          - bin:
            - hxSemi
            - exprs
          - loc
        - nameCtx
    - arm:
      - call:
        - .Let: AExpr
        - tuple:
          - pat
          - body
          - next
          - loc
      - ERROR:
        - missing
        - (395:38)
      match:
      - bin:
        - bin:
          - bin:
            - bin:
              - desugarLet
              - pat
            - body
          - next
        - loc
      - arm:
        - call:
          - .LetFun: ALet
          - tuple:
            - ident
            - args
            - body
            - next
            - loc
        - ERROR:
          - missing
          - (397:50)
        let:
        - tuple:
          - serial
          - nameCtx
        - bin:
          - nameCtx
          - bin:
            - nameCtxAdd
            - ident
        let:
        - isMainFun
        - false
        let:
        - tuple:
          - args
          - nameCtx
        - bin:
          - tuple:
            - args
            - nameCtx
          - bin:
            - stMap
            - onPat
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        let:
        - tuple:
          - next
          - nameCtx
        - bin:
          - tuple:
            - next
            - nameCtx
          - onExpr
        tuple:
        - bin:
          - .LetFun: HExpr
          - tuple:
            - serial
            - isMainFun
            - args
            - body
            - next
            - noTy
            - loc
        - nameCtx
      - arm:
        - call:
          - .LetVal: ALet
          - tuple:
            - pat
            - body
            - next
            - loc
        - ERROR:
          - missing
          - (405:42)
        let:
        - tuple:
          - pat
          - nameCtx
        - bin:
          - tuple:
            - pat
            - nameCtx
          - onPat
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        let:
        - tuple:
          - next
          - nameCtx
        - bin:
          - tuple:
            - next
            - nameCtx
          - onExpr
        tuple:
        - bin:
          - .Let: HExpr
          - tuple:
            - pat
            - body
            - next
            - noTy
            - loc
        - nameCtx
    - arm:
      - call:
        - .TySynonym: AExpr
        - tuple:
          - ident
          - ty
          - loc
      - ERROR:
        - missing
        - (411:38)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - .TyDecl: HExpr
        - tuple:
          - serial
          - bin:
            - .Synonym: TyDecl
            - tuple:
              - ty
              - loc
          - loc
      - nameCtx
    - arm:
      - call:
        - .TyUnion: AExpr
        - tuple:
          - ident
          - variants
          - loc
      - ERROR:
        - missing
        - (416:42)
      let:
      - fun:
        - onVariant
        - tuple:
          - call:
            - AVariant
            - tuple:
              - ident
              - payloadTy
              - _variantLoc
          - nameCtx
      - let:
        - tuple:
          - serial
          - nameCtx
        - bin:
          - nameCtx
          - bin:
            - nameCtxAdd
            - ident
        let:
        - tuple:
          - hasPayload
          - payloadTy
          - nameCtx
        - match:
          - payloadTy
          - arm:
            - call:
              - Some
              - ty
            - ERROR:
              - missing
              - (421:19)
            let:
            - tuple:
              - ty
              - nameCtx
            - bin:
              - tuple:
                - ty
                - nameCtx
              - onTy
            tuple:
            - true
            - ty
            - nameCtx
          - arm:
            - None
            - ERROR:
              - missing
              - (424:16)
            tuple:
            - false
            - tyUnit
            - nameCtx
        tuple:
        - tuple:
          - ident
          - serial
          - hasPayload
          - payloadTy
        - nameCtx
      let:
      - tuple:
        - unionSerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - variants
        - nameCtx
      - bin:
        - tuple:
          - variants
          - nameCtx
        - bin:
          - stMap
          - onVariant
      tuple:
      - bin:
        - .TyDecl: HExpr
        - tuple:
          - unionSerial
          - bin:
            - .Union: TyDecl
            - tuple:
              - ident
              - variants
              - loc
          - loc
      - nameCtx
    - arm:
      - call:
        - .Open: AExpr
        - tuple:
          - path
          - loc
      - ERROR:
        - missing
        - (433:28)
      tuple:
      - bin:
        - .Open: HExpr
        - tuple:
          - path
          - loc
      - nameCtx
  let:
  - anno:
    - fun:
      - astToHir
      - tuple:
        - anno:
          - expr
          - AExpr
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HExpr
      - NameCtx
  - bin:
    - tuple:
      - expr
      - nameCtx
    - onExpr
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let-fun:
  - opToPrim
  - match: op
  let-fun:
  - desugarListLitPat
  - inf:
    - inf:
      - assert
      - inf:
        - not
        - inf:
          - listIsEmpty
          - pats
    - let-fun:
      - go
      - match: pats
      inf:
      - go
      - pats
  let-fun:
  - desugarListLitExpr
  - inf:
    - inf:
      - assert
      - inf:
        - not
        - inf:
          - listIsEmpty
          - items
    - let-fun:
      - go
      - match: items
      inf:
      - go
      - items
  let-fun:
  - desugarIf
  - let-val:
    - match: alt
    let-val:
    - inf:
      - inf:
        - prim
        - inf:
          - AArm
          - inf:
            - inf:
              - apTrue
              - loc
            - inf:
              - axTrue
              - loc
            - body
            - loc
      - inf:
        - inf:
          - prim
          - inf:
            - AArm
            - inf:
              - inf:
                - apFalse
                - loc
              - inf:
                - axTrue
                - loc
              - alt
              - loc
        - prim
    inf:
    - .Match: AExpr
    - inf:
      - cond
      - arms
      - loc
  let-fun:
  - desugarFun
  - let-val: \"fun\"
    let-val:
    - inf:
      - .Fun: APat
      - inf:
        - ident
        - pats
        - loc
    let-val:
    - inf:
      - .Ident: AExpr
      - inf:
        - ident
        - loc
    inf:
    - .Let: AExpr
    - inf:
      - pat
      - body
      - next
      - loc
  let-fun:
  - desugarUniNeg
  - let-val:
    - inf:
      - .Lit: AExpr
      - inf:
        - inf:
          - .Int: Lit
          - 0
        - loc
    inf:
    - .Bin: AExpr
    - inf:
      - .Sub: Op
      - zero
      - arg
      - loc
  let-fun:
  - desugarBinNe
  - let-val:
    - inf:
      - .Bin: AExpr
      - inf:
        - .Eq: Op
        - l
        - r
        - loc
    inf:
    - inf:
      - axNot
      - eqExpr
    - loc
  let-fun:
  - desugarBinLe
  - let-val:
    - inf:
      - .Bin: AExpr
      - inf:
        - .Lt: Op
        - r
        - l
        - loc
    inf:
    - inf:
      - axNot
      - ltExpr
    - loc
  let-fun:
  - desugarBinGt
  - inf:
    - .Bin: AExpr
    - inf:
      - .Lt: Op
      - r
      - l
      - loc
  let-fun:
  - desugarBinGe
  - let-val:
    - inf:
      - .Bin: AExpr
      - inf:
        - .Lt: Op
        - l
        - r
        - loc
    inf:
    - inf:
      - axNot
      - ltExpr
    - loc
  let-fun:
  - desugarBinAnd
  - inf:
    - inf:
      - inf:
        - inf:
          - desugarIf
          - l
        - r
      - inf:
        - axFalse
        - loc
    - loc
  let-fun:
  - desugarBinOr
  - inf:
    - inf:
      - inf:
        - inf:
          - desugarIf
          - l
        - inf:
          - axTrue
          - loc
      - r
    - loc
  let-fun:
  - desugarBinPipe
  - inf:
    - .Bin: AExpr
    - inf:
      - .App: Op
      - r
      - l
      - loc
  let-fun:
  - tryDesugarIndexRange
  - match: expr
  let-fun:
  - desugarLet
  - match: pat
  let-fun:
  - onTy
  - inf:
    - match: ty
  let-fun:
  - onPat
  - inf:
    - match: pat
  let-fun:
  - onExpr
  - inf:
    - match: expr
  let-fun:
  - astToHir
  - inf:
    - inf:
      - onExpr
      - inf:
        - expr
        - nameCtx
  inf
$? = 0
