module (29, 0)
rec (29, 7)
"MiloneLang" (29, 11)
. (29, 21)
"Lexing" (29, 22)
open (31, 0)
"MiloneLang" (31, 5)
. (31, 15)
"Types" (31, 16)
open (32, 0)
"MiloneLang" (32, 5)
. (32, 15)
"Helpers" (32, 16)
type (35, 0)
"TokenizeCtx" (35, 5)
= (35, 17)
"string" (35, 19)
* (35, 26)
"int" (35, 28)
* (35, 32)
"Loc" (35, 34)
* (35, 38)
( (35, 40)
"Token" (35, 41)
* (35, 47)
"Loc" (35, 49)
) (35, 52)
"list" (35, 54)
let (39, 0)
"locShift" (39, 4)
( (39, 13)
"text" (39, 14)
: (39, 18)
"string" (39, 20)
) (39, 26)
( (39, 28)
"l" (39, 29)
: (39, 30)
"int" (39, 32)
) (39, 35)
( (39, 37)
"r" (39, 38)
: (39, 39)
"int" (39, 41)
) (39, 44)
( (39, 46)
( (39, 47)
"y" (39, 48)
, (39, 49)
"x" (39, 51)
) (39, 52)
: (39, 53)
"Loc" (39, 55)
) (39, 58)
= (39, 60)
"assert" (40, 2)
( (40, 9)
0 (40, 10)
<= (40, 12)
"l" (40, 15)
&& (40, 17)
"l" (40, 20)
<= (40, 22)
"r" (40, 25)
&& (40, 27)
"r" (40, 30)
<= (40, 32)
"text" (40, 35)
. (40, 39)
"Length" (40, 40)
) (40, 46)
let (41, 2)
rec (41, 6)
"go" (41, 10)
"y" (41, 13)
"x" (41, 15)
"i" (41, 17)
= (41, 19)
if (42, 4)
"i" (42, 7)
= (42, 9)
"r" (42, 11)
then (42, 13)
"y" (43, 6)
, (43, 7)
"x" (43, 9)
else (44, 4)
if (44, 9)
"text" (44, 12)
. (44, 16)
[ (44, 17)
"i" (44, 18)
] (44, 19)
= (44, 21)
'?' (44, 23)
then (44, 28)
"go" (45, 6)
( (45, 9)
"y" (45, 10)
+ (45, 12)
1 (45, 14)
) (45, 15)
0 (45, 17)
( (45, 19)
"i" (45, 20)
+ (45, 22)
1 (45, 24)
) (45, 25)
else (46, 4)
"go" (47, 6)
"y" (47, 9)
( (47, 11)
"x" (47, 12)
+ (47, 14)
1 (47, 16)
) (47, 17)
( (47, 19)
"i" (47, 20)
+ (47, 22)
1 (47, 24)
) (47, 25)
"go" (48, 2)
"y" (48, 5)
"x" (48, 7)
"l" (48, 9)
let (54, 0)
"charNull" (54, 4)
: (54, 12)
"char" (54, 14)
= (54, 19)
"char" (54, 21)
0 (54, 26)
let (56, 0)
"charIsSpace" (56, 4)
( (56, 16)
"c" (56, 17)
: (56, 18)
"char" (56, 20)
) (56, 24)
: (56, 25)
"bool" (56, 27)
= (56, 32)
"c" (57, 2)
= (57, 4)
'?' (57, 6)
|| (57, 10)
"c" (57, 13)
= (57, 15)
'?' (57, 17)
|| (57, 22)
"c" (57, 25)
= (57, 27)
'?' (57, 29)
|| (57, 34)
"c" (57, 37)
= (57, 39)
'?' (57, 41)
let (59, 0)
"charIsDigit" (59, 4)
( (59, 16)
"c" (59, 17)
: (59, 18)
"char" (59, 20)
) (59, 24)
: (59, 25)
"bool" (59, 27)
= (59, 32)
'?' (60, 2)
<= (60, 6)
"c" (60, 9)
&& (60, 11)
"c" (60, 14)
<= (60, 16)
'?' (60, 19)
let (62, 0)
"charIsAlpha" (62, 4)
( (62, 16)
"c" (62, 17)
: (62, 18)
"char" (62, 20)
) (62, 24)
: (62, 25)
"bool" (62, 27)
= (62, 32)
( (63, 2)
'?' (63, 3)
<= (63, 7)
"c" (63, 10)
&& (63, 12)
"c" (63, 15)
<= (63, 17)
'?' (63, 20)
) (63, 23)
|| (63, 25)
( (63, 28)
'?' (63, 29)
<= (63, 33)
"c" (63, 36)
&& (63, 38)
"c" (63, 41)
<= (63, 43)
'?' (63, 46)
) (63, 49)
let (65, 0)
"charIsIdent" (65, 4)
( (65, 16)
"c" (65, 17)
: (65, 18)
"char" (65, 20)
) (65, 24)
: (65, 25)
"bool" (65, 27)
= (65, 32)
"c" (66, 2)
= (66, 4)
'?' (66, 6)
|| (66, 10)
"charIsDigit" (66, 13)
"c" (66, 25)
|| (66, 27)
"charIsAlpha" (66, 30)
"c" (66, 42)
let (68, 0)
"charIsOp" (68, 4)
( (68, 13)
"c" (68, 14)
: (68, 15)
"char" (68, 17)
) (68, 21)
: (68, 22)
"bool" (68, 24)
= (68, 29)
"c" (69, 2)
= (69, 4)
'?' (69, 6)
|| (69, 10)
"c" (69, 13)
= (69, 15)
'?' (69, 17)
|| (69, 21)
"c" (69, 24)
= (69, 26)
'?' (69, 28)
|| (69, 32)
"c" (69, 35)
= (69, 37)
'?' (69, 39)
|| (69, 43)
"c" (69, 46)
= (69, 48)
'?' (69, 50)
|| (69, 54)
"c" (70, 2)
= (70, 4)
'?' (70, 6)
|| (70, 10)
"c" (70, 13)
= (70, 15)
'?' (70, 17)
|| (70, 21)
"c" (70, 24)
= (70, 26)
'?' (70, 28)
|| (70, 32)
"c" (70, 35)
= (70, 37)
'?' (70, 39)
|| (70, 43)
"c" (70, 46)
= (70, 48)
'?' (70, 50)
|| (70, 54)
"c" (71, 2)
= (71, 4)
'?' (71, 6)
|| (71, 10)
"c" (71, 13)
= (71, 15)
'?' (71, 17)
|| (71, 21)
"c" (71, 24)
= (71, 26)
'?' (71, 28)
|| (71, 32)
"c" (71, 35)
= (71, 37)
'?' (71, 39)
|| (71, 43)
"c" (71, 46)
= (71, 48)
'?' (71, 50)
let (73, 0)
"charIsPun" (73, 4)
( (73, 14)
"c" (73, 15)
: (73, 16)
"char" (73, 18)
) (73, 22)
: (73, 23)
"bool" (73, 25)
= (73, 30)
"c" (74, 2)
= (74, 4)
'?' (74, 6)
|| (74, 10)
"c" (74, 13)
= (74, 15)
'?' (74, 17)
|| (74, 21)
"c" (74, 24)
= (74, 26)
'?' (74, 28)
|| (74, 32)
"c" (74, 35)
= (74, 37)
'?' (74, 39)
|| (74, 43)
"c" (74, 46)
= (74, 48)
'?' (74, 50)
let (81, 0)
"strIsFollowedBy" (81, 4)
( (81, 20)
"i" (81, 21)
: (81, 22)
"int" (81, 24)
) (81, 27)
( (81, 29)
"prefix" (81, 30)
: (81, 36)
"string" (81, 38)
) (81, 44)
( (81, 46)
"s" (81, 47)
: (81, 48)
"string" (81, 50)
) (81, 56)
: (81, 57)
"bool" (81, 59)
= (81, 64)
let (83, 2)
rec (83, 6)
"go" (83, 10)
"pi" (83, 13)
"si" (83, 16)
= (83, 19)
"pi" (84, 4)
= (84, 7)
"prefix" (84, 9)
. (84, 15)
"Length" (84, 16)
|| (84, 23)
( (84, 26)
"si" (85, 6)
< (85, 9)
"s" (85, 11)
. (85, 12)
"Length" (85, 13)
&& (86, 6)
"prefix" (86, 9)
. (86, 15)
[ (86, 16)
"pi" (86, 17)
] (86, 19)
= (86, 21)
"s" (86, 23)
. (86, 24)
[ (86, 25)
"si" (86, 26)
] (86, 28)
&& (87, 6)
"go" (87, 9)
( (87, 12)
"pi" (87, 13)
+ (87, 16)
1 (87, 18)
) (87, 19)
( (87, 21)
"si" (87, 22)
+ (87, 25)
1 (87, 27)
) (87, 28)
) (88, 4)
"i" (89, 2)
+ (89, 4)
"prefix" (89, 6)
. (89, 12)
"Length" (89, 13)
<= (89, 20)
"s" (89, 23)
. (89, 24)
"Length" (89, 25)
&& (89, 32)
"go" (89, 35)
0 (89, 38)
"i" (89, 40)
let (92, 0)
"strIsFollowedByRawQuotes" (92, 4)
( (92, 29)
"i" (92, 30)
: (92, 31)
"int" (92, 33)
) (92, 36)
( (92, 38)
"s" (92, 39)
: (92, 40)
"string" (92, 42)
) (92, 48)
: (92, 49)
"bool" (92, 51)
= (92, 56)
"strIsFollowedBy" (93, 2)
"i" (93, 18)
"?" (93, 20)
"s" (93, 29)
let (99, 0)
"scanError" (99, 4)
( (99, 14)
"_" (99, 15)
: (99, 16)
"string" (99, 18)
) (99, 24)
( (99, 26)
"i" (99, 27)
: (99, 28)
"int" (99, 30)
) (99, 33)
= (99, 35)
"i" (101, 2)
+ (101, 4)
1 (101, 6)
let (103, 0)
"lookEof" (103, 4)
( (103, 12)
"text" (103, 13)
: (103, 17)
"string" (103, 19)
) (103, 25)
( (103, 27)
"i" (103, 28)
: (103, 29)
"int" (103, 31)
) (103, 34)
= (103, 36)
"i" (104, 2)
>= (104, 4)
"text" (104, 7)
. (104, 11)
"Length" (104, 12)
let (107, 0)
"lookSpace" (107, 4)
( (107, 14)
"text" (107, 15)
: (107, 19)
"string" (107, 21)
) (107, 27)
( (107, 29)
"i" (107, 30)
: (107, 31)
"int" (107, 33)
) (107, 36)
= (107, 38)
"text" (108, 2)
. (108, 6)
[ (108, 7)
"i" (108, 8)
] (108, 9)
|> (108, 11)
"charIsSpace" (108, 14)
let (111, 0)
"scanSpace" (111, 4)
( (111, 14)
"text" (111, 15)
: (111, 19)
"string" (111, 21)
) (111, 27)
( (111, 29)
"i" (111, 30)
: (111, 31)
"int" (111, 33)
) (111, 36)
= (111, 38)
"assert" (112, 2)
( (112, 9)
"lookSpace" (112, 10)
"text" (112, 20)
"i" (112, 25)
) (112, 26)
let (113, 2)
rec (113, 6)
"go" (113, 10)
"i" (113, 13)
= (113, 15)
if (114, 4)
"i" (114, 7)
< (114, 9)
"text" (114, 11)
. (114, 15)
"Length" (114, 16)
&& (114, 23)
"text" (114, 26)
. (114, 30)
[ (114, 31)
"i" (114, 32)
] (114, 33)
|> (114, 35)
"charIsSpace" (114, 38)
then (114, 50)
"go" (115, 6)
( (115, 9)
"i" (115, 10)
+ (115, 12)
1 (115, 14)
) (115, 15)
else (116, 4)
"i" (117, 6)
"go" (118, 2)
"i" (118, 5)
let (120, 0)
"lookComment" (120, 4)
( (120, 16)
"text" (120, 17)
: (120, 21)
"string" (120, 23)
) (120, 29)
( (120, 31)
"i" (120, 32)
: (120, 33)
"int" (120, 35)
) (120, 38)
= (120, 40)
"text" (122, 2)
|> (122, 7)
"strIsFollowedBy" (122, 10)
"i" (122, 26)
"?" (122, 28)
|| (123, 2)
"text" (123, 5)
|> (123, 10)
"strIsFollowedBy" (123, 13)
"i" (123, 29)
"?" (123, 31)
let (125, 0)
"scanLine" (125, 4)
( (125, 13)
"text" (125, 14)
: (125, 18)
"string" (125, 20)
) (125, 26)
( (125, 28)
"i" (125, 29)
: (125, 30)
"int" (125, 32)
) (125, 35)
= (125, 37)
"assert" (126, 2)
( (126, 9)
"lookComment" (126, 10)
"text" (126, 22)
"i" (126, 27)
) (126, 28)
let (127, 2)
rec (127, 6)
"go" (127, 10)
"i" (127, 13)
= (127, 15)
if (128, 4)
"i" (128, 7)
= (128, 9)
"text" (128, 11)
. (128, 15)
"Length" (128, 16)
then (128, 23)
"i" (129, 6)
else (130, 4)
if (130, 9)
"text" (130, 12)
. (130, 16)
[ (130, 17)
"i" (130, 18)
] (130, 19)
= (130, 21)
'?' (130, 23)
then (130, 28)
"i" (131, 6)
+ (131, 8)
1 (131, 10)
else (132, 4)
"go" (133, 6)
( (133, 9)
"i" (133, 10)
+ (133, 12)
1 (133, 14)
) (133, 15)
"go" (134, 2)
"i" (134, 5)
let (136, 0)
"lookPun" (136, 4)
( (136, 12)
"text" (136, 13)
: (136, 17)
"string" (136, 19)
) (136, 25)
( (136, 27)
"i" (136, 28)
: (136, 29)
"int" (136, 31)
) (136, 34)
= (136, 36)
"text" (137, 2)
. (137, 6)
[ (137, 7)
"i" (137, 8)
] (137, 9)
|> (137, 11)
"charIsPun" (137, 14)
let (139, 0)
"scanPun" (139, 4)
( (139, 12)
"text" (139, 13)
: (139, 17)
"string" (139, 19)
) (139, 25)
( (139, 27)
"i" (139, 28)
: (139, 29)
"int" (139, 31)
) (139, 34)
= (139, 36)
"assert" (140, 2)
( (140, 9)
"lookPun" (140, 10)
"text" (140, 18)
"i" (140, 23)
) (140, 24)
"i" (141, 2)
+ (141, 4)
1 (141, 6)
let (143, 0)
"lookOp" (143, 4)
( (143, 11)
"text" (143, 12)
: (143, 16)
"string" (143, 18)
) (143, 24)
( (143, 26)
"i" (143, 27)
: (143, 28)
"int" (143, 30)
) (143, 33)
= (143, 35)
"text" (144, 2)
. (144, 6)
[ (144, 7)
"i" (144, 8)
] (144, 9)
|> (144, 11)
"charIsOp" (144, 14)
let (146, 0)
"scanOp" (146, 4)
( (146, 11)
"text" (146, 12)
: (146, 16)
"string" (146, 18)
) (146, 24)
( (146, 26)
"i" (146, 27)
: (146, 28)
"int" (146, 30)
) (146, 33)
= (146, 35)
"assert" (147, 2)
( (147, 9)
"lookOp" (147, 10)
"text" (147, 17)
"i" (147, 22)
) (147, 23)
let (148, 2)
rec (148, 6)
"go" (148, 10)
"i" (148, 13)
= (148, 15)
if (149, 4)
"i" (149, 7)
< (149, 9)
"text" (149, 11)
. (149, 15)
"Length" (149, 16)
&& (149, 23)
"text" (149, 26)
. (149, 30)
[ (149, 31)
"i" (149, 32)
] (149, 33)
|> (149, 35)
"charIsOp" (149, 38)
then (149, 47)
"go" (150, 6)
( (150, 9)
"i" (150, 10)
+ (150, 12)
1 (150, 14)
) (150, 15)
else (151, 4)
"i" (152, 6)
"go" (153, 2)
"i" (153, 5)
let (155, 0)
"lookIdent" (155, 4)
( (155, 14)
"text" (155, 15)
: (155, 19)
"string" (155, 21)
) (155, 27)
( (155, 29)
"i" (155, 30)
: (155, 31)
"int" (155, 33)
) (155, 36)
= (155, 38)
"text" (156, 2)
. (156, 6)
[ (156, 7)
"i" (156, 8)
] (156, 9)
|> (156, 11)
"charIsIdent" (156, 14)
&& (157, 2)
"text" (157, 5)
. (157, 9)
[ (157, 10)
"i" (157, 11)
] (157, 12)
|> (157, 14)
"charIsDigit" (157, 17)
|> (157, 29)
"not" (157, 32)
let (159, 0)
"scanIdent" (159, 4)
( (159, 14)
"text" (159, 15)
: (159, 19)
"string" (159, 21)
) (159, 27)
( (159, 29)
"i" (159, 30)
: (159, 31)
"int" (159, 33)
) (159, 36)
= (159, 38)
"assert" (160, 2)
( (160, 9)
"lookIdent" (160, 10)
"text" (160, 20)
"i" (160, 25)
) (160, 26)
let (161, 2)
rec (161, 6)
"go" (161, 10)
"i" (161, 13)
= (161, 15)
if (162, 4)
"i" (162, 7)
< (162, 9)
"text" (162, 11)
. (162, 15)
"Length" (162, 16)
&& (162, 23)
"text" (162, 26)
. (162, 30)
[ (162, 31)
"i" (162, 32)
] (162, 33)
|> (162, 35)
"charIsIdent" (162, 38)
then (162, 50)
"go" (163, 6)
( (163, 9)
"i" (163, 10)
+ (163, 12)
1 (163, 14)
) (163, 15)
else (164, 4)
"i" (165, 6)
"go" (166, 2)
"i" (166, 5)
let (168, 0)
"lookIntLit" (168, 4)
( (168, 15)
"text" (168, 16)
: (168, 20)
"string" (168, 22)
) (168, 28)
( (168, 30)
"i" (168, 31)
: (168, 32)
"int" (168, 34)
) (168, 37)
= (168, 39)
"text" (169, 2)
. (169, 6)
[ (169, 7)
"i" (169, 8)
] (169, 9)
|> (169, 11)
"charIsDigit" (169, 14)
let (171, 0)
"scanIntLit" (171, 4)
( (171, 15)
"text" (171, 16)
: (171, 20)
"string" (171, 22)
) (171, 28)
( (171, 30)
"i" (171, 31)
: (171, 32)
"int" (171, 34)
) (171, 37)
= (171, 39)
"assert" (172, 2)
( (172, 9)
"lookIntLit" (172, 10)
"text" (172, 21)
"i" (172, 26)
) (172, 27)
let (173, 2)
rec (173, 6)
"go" (173, 10)
"i" (173, 13)
= (173, 15)
if (174, 4)
"i" (174, 7)
< (174, 9)
"text" (174, 11)
. (174, 15)
"Length" (174, 16)
&& (174, 23)
"text" (174, 26)
. (174, 30)
[ (174, 31)
"i" (174, 32)
] (174, 33)
|> (174, 35)
"charIsDigit" (174, 38)
then (174, 50)
"go" (175, 6)
( (175, 9)
"i" (175, 10)
+ (175, 12)
1 (175, 14)
) (175, 15)
else (176, 4)
"i" (177, 6)
"go" (178, 2)
"i" (178, 5)
let (180, 0)
"lookCharLit" (180, 4)
( (180, 16)
"text" (180, 17)
: (180, 21)
"string" (180, 23)
) (180, 29)
( (180, 31)
"i" (180, 32)
: (180, 33)
"int" (180, 35)
) (180, 38)
= (180, 40)
"text" (181, 2)
. (181, 6)
[ (181, 7)
"i" (181, 8)
] (181, 9)
= (181, 11)
'?' (181, 13)
let (183, 0)
"scanCharLit" (183, 4)
( (183, 16)
"text" (183, 17)
: (183, 21)
"string" (183, 23)
) (183, 29)
( (183, 31)
"i" (183, 32)
: (183, 33)
"int" (183, 35)
) (183, 38)
= (183, 40)
"assert" (184, 2)
( (184, 9)
"lookCharLit" (184, 10)
"text" (184, 22)
"i" (184, 27)
) (184, 28)
let (185, 2)
rec (185, 6)
"go" (185, 10)
"i" (185, 13)
= (185, 15)
if (186, 4)
"i" (186, 7)
+ (186, 9)
1 (186, 11)
< (186, 13)
"text" (186, 15)
. (186, 19)
"Length" (186, 20)
&& (186, 27)
"text" (186, 30)
. (186, 34)
[ (186, 35)
"i" (186, 36)
] (186, 37)
= (186, 39)
'?' (186, 41)
then (186, 46)
"go" (188, 6)
( (188, 9)
"i" (188, 10)
+ (188, 12)
2 (188, 14)
) (188, 15)
else (189, 4)
if (189, 9)
"i" (189, 12)
< (189, 14)
"text" (189, 16)
. (189, 20)
"Length" (189, 21)
&& (189, 28)
"text" (189, 31)
. (189, 35)
[ (189, 36)
"i" (189, 37)
] (189, 38)
= (189, 40)
'?' (189, 42)
then (189, 47)
true (191, 6)
, (191, 10)
"i" (191, 12)
+ (191, 14)
1 (191, 16)
else (192, 4)
if (192, 9)
"i" (192, 12)
< (192, 14)
"text" (192, 16)
. (192, 20)
"Length" (192, 21)
&& (192, 28)
"text" (192, 31)
. (192, 35)
[ (192, 36)
"i" (192, 37)
] (192, 38)
<> (192, 40)
'?' (192, 43)
then (192, 48)
"go" (194, 6)
( (194, 9)
"i" (194, 10)
+ (194, 12)
1 (194, 14)
) (194, 15)
else (195, 4)
"assert" (197, 6)
( (197, 13)
"i" (197, 14)
= (197, 16)
"text" (197, 18)
. (197, 22)
"Length" (197, 23)
|| (197, 30)
"text" (197, 33)
. (197, 37)
[ (197, 38)
"i" (197, 39)
] (197, 40)
= (197, 42)
'?' (197, 44)
) (197, 48)
false (198, 6)
, (198, 11)
"i" (198, 13)
"go" (199, 2)
( (199, 5)
"i" (199, 6)
+ (199, 8)
1 (199, 10)
) (199, 11)
let (201, 0)
"lookStrLit" (201, 4)
( (201, 15)
"text" (201, 16)
: (201, 20)
"string" (201, 22)
) (201, 28)
( (201, 30)
"i" (201, 31)
: (201, 32)
"int" (201, 34)
) (201, 37)
= (201, 39)
"text" (202, 2)
. (202, 6)
[ (202, 7)
"i" (202, 8)
] (202, 9)
= (202, 11)
'?' (202, 13)
let (204, 0)
"scanStrLit" (204, 4)
( (204, 15)
"text" (204, 16)
: (204, 20)
"string" (204, 22)
) (204, 28)
( (204, 30)
"i" (204, 31)
: (204, 32)
"int" (204, 34)
) (204, 37)
= (204, 39)
"assert" (205, 2)
( (205, 9)
"lookStrLit" (205, 10)
"text" (205, 21)
"i" (205, 26)
) (205, 27)
let (206, 2)
rec (206, 6)
"go" (206, 10)
"i" (206, 13)
= (206, 15)
if (207, 4)
"i" (207, 7)
+ (207, 9)
1 (207, 11)
< (207, 13)
"text" (207, 15)
. (207, 19)
"Length" (207, 20)
&& (207, 27)
"text" (207, 30)
. (207, 34)
[ (207, 35)
"i" (207, 36)
] (207, 37)
= (207, 39)
'?' (207, 41)
then (207, 46)
"go" (209, 6)
( (209, 9)
"i" (209, 10)
+ (209, 12)
2 (209, 14)
) (209, 15)
else (210, 4)
if (210, 9)
"i" (210, 12)
< (210, 14)
"text" (210, 16)
. (210, 20)
"Length" (210, 21)
&& (210, 28)
"text" (210, 31)
. (210, 35)
[ (210, 36)
"i" (210, 37)
] (210, 38)
= (210, 40)
'?' (210, 42)
then (210, 46)
true (212, 6)
, (212, 10)
"i" (212, 12)
+ (212, 14)
1 (212, 16)
else (213, 4)
if (213, 9)
"i" (213, 12)
< (213, 14)
"text" (213, 16)
. (213, 20)
"Length" (213, 21)
&& (213, 28)
"text" (213, 31)
. (213, 35)
[ (213, 36)
"i" (213, 37)
] (213, 38)
<> (213, 40)
'?' (213, 43)
then (213, 48)
"go" (215, 6)
( (215, 9)
"i" (215, 10)
+ (215, 12)
1 (215, 14)
) (215, 15)
else (216, 4)
"assert" (218, 6)
( (218, 13)
"i" (218, 14)
= (218, 16)
"text" (218, 18)
. (218, 22)
"Length" (218, 23)
|| (218, 30)
"text" (218, 33)
. (218, 37)
[ (218, 38)
"i" (218, 39)
] (218, 40)
= (218, 42)
'?' (218, 44)
) (218, 48)
false (219, 6)
, (219, 11)
"i" (219, 13)
"go" (220, 2)
( (220, 5)
"i" (220, 6)
+ (220, 8)
1 (220, 10)
) (220, 11)
let (222, 0)
"lookStrLitRaw" (222, 4)
( (222, 18)
"text" (222, 19)
: (222, 23)
"string" (222, 25)
) (222, 31)
( (222, 33)
"i" (222, 34)
: (222, 35)
"int" (222, 37)
) (222, 40)
= (222, 42)
"text" (223, 2)
|> (223, 7)
"strIsFollowedByRawQuotes" (223, 10)
"i" (223, 35)
let (225, 0)
"scanStrLitRaw" (225, 4)
( (225, 18)
"text" (225, 19)
: (225, 23)
"string" (225, 25)
) (225, 31)
( (225, 33)
"i" (225, 34)
: (225, 35)
"int" (225, 37)
) (225, 40)
= (225, 42)
"assert" (226, 2)
( (226, 9)
"lookStrLitRaw" (226, 10)
"text" (226, 24)
"i" (226, 29)
) (226, 30)
let (227, 2)
rec (227, 6)
"go" (227, 10)
"i" (227, 13)
= (227, 15)
if (228, 4)
"text" (228, 7)
|> (228, 12)
"strIsFollowedByRawQuotes" (228, 15)
"i" (228, 40)
then (228, 42)
true (229, 6)
, (229, 10)
"i" (229, 12)
+ (229, 14)
3 (229, 16)
else (230, 4)
if (230, 9)
"i" (230, 12)
+ (230, 14)
1 (230, 16)
< (230, 18)
"text" (230, 20)
. (230, 24)
"Length" (230, 25)
then (230, 32)
"go" (231, 6)
( (231, 9)
"i" (231, 10)
+ (231, 12)
1 (231, 14)
) (231, 15)
else (232, 4)
"assert" (233, 6)
( (233, 13)
"i" (233, 14)
= (233, 16)
"text" (233, 18)
. (233, 22)
"Length" (233, 23)
) (233, 29)
false (234, 6)
, (234, 11)
"i" (234, 13)
"go" (235, 2)
( (235, 5)
"i" (235, 6)
+ (235, 8)
3 (235, 10)
) (235, 11)
let (241, 0)
"tokenFromIdent" (241, 4)
( (241, 19)
"text" (241, 20)
: (241, 24)
"string" (241, 26)
) (241, 32)
"l" (241, 34)
"r" (241, 36)
: (241, 37)
"Token" (241, 39)
= (241, 45)
match (242, 2)
"text" (242, 8)
|> (242, 13)
"strSlice" (242, 16)
"l" (242, 25)
"r" (242, 27)
with (242, 29)
| (243, 2)
"?" (243, 4)
-> (243, 11)
"Token" (244, 4)
. (244, 9)
"Bool" (244, 10)
true (244, 15)
| (245, 2)
"?" (245, 4)
-> (245, 12)
"Token" (246, 4)
. (246, 9)
"Bool" (246, 10)
false (246, 15)
| (247, 2)
"?" (247, 4)
-> (247, 9)
"Token" (248, 4)
. (248, 9)
"Do" (248, 10)
| (249, 2)
"?" (249, 4)
-> (249, 10)
"Token" (250, 4)
. (250, 9)
"Let" (250, 10)
| (251, 2)
"?" (251, 4)
-> (251, 9)
"Token" (252, 4)
. (252, 9)
"If" (252, 10)
| (253, 2)
"?" (253, 4)
-> (253, 11)
"Token" (254, 4)
. (254, 9)
"Then" (254, 10)
| (255, 2)
"?" (255, 4)
-> (255, 11)
"Token" (256, 4)
. (256, 9)
"Else" (256, 10)
| (257, 2)
"?" (257, 4)
-> (257, 12)
"Token" (258, 4)
. (258, 9)
"Match" (258, 10)
| (259, 2)
"?" (259, 4)
-> (259, 11)
"Token" (260, 4)
. (260, 9)
"With" (260, 10)
| (261, 2)
"?" (261, 4)
-> (261, 9)
"Token" (262, 4)
. (262, 9)
"As" (262, 10)
| (263, 2)
"?" (263, 4)
-> (263, 11)
"Token" (264, 4)
. (264, 9)
"When" (264, 10)
| (265, 2)
"?" (265, 4)
-> (265, 10)
"Token" (266, 4)
. (266, 9)
"Rec" (266, 10)
| (267, 2)
"?" (267, 4)
-> (267, 14)
"Token" (268, 4)
. (268, 9)
"Private" (268, 10)
| (269, 2)
"?" (269, 4)
-> (269, 15)
"Token" (270, 4)
. (270, 9)
"Internal" (270, 10)
| (271, 2)
"?" (271, 4)
-> (271, 13)
"Token" (272, 4)
. (272, 9)
"Public" (272, 10)
| (273, 2)
"?" (273, 4)
-> (273, 13)
"Token" (274, 4)
. (274, 9)
"Module" (274, 10)
| (275, 2)
"?" (275, 4)
-> (275, 16)
"Token" (276, 4)
. (276, 9)
"Namespace" (276, 10)
| (277, 2)
"?" (277, 4)
-> (277, 11)
"Token" (278, 4)
. (278, 9)
"Open" (278, 10)
| (279, 2)
"?" (279, 4)
-> (279, 11)
"Token" (280, 4)
. (280, 9)
"Type" (280, 10)
| (281, 2)
"?" (281, 4)
-> (281, 9)
"Token" (282, 4)
. (282, 9)
"Of" (282, 10)
| (283, 2)
"?" (283, 4)
-> (283, 10)
"Token" (284, 4)
. (284, 9)
"Fun" (284, 10)
| (285, 2)
"?" (285, 4)
-> (285, 9)
"Token" (286, 4)
. (286, 9)
"In" (286, 10)
| (287, 2)
"s" (287, 4)
-> (287, 6)
"Token" (288, 4)
. (288, 9)
"Ident" (288, 10)
"s" (288, 16)
let (290, 0)
"tokenFromOp" (290, 4)
( (290, 16)
"text" (290, 17)
: (290, 21)
"string" (290, 23)
) (290, 29)
"l" (290, 31)
"r" (290, 33)
: (290, 34)
"Token" (290, 36)
= (290, 42)
match (291, 2)
"text" (291, 8)
|> (291, 13)
"strSlice" (291, 16)
"l" (291, 25)
"r" (291, 27)
with (291, 29)
| (292, 2)
"?" (292, 4)
-> (292, 8)
"Token" (293, 4)
. (293, 9)
"Amp" (293, 10)
| (294, 2)
"?" (294, 4)
-> (294, 9)
"Token" (295, 4)
. (295, 9)
"AmpAmp" (295, 10)
| (296, 2)
"?" (296, 4)
-> (296, 9)
"Token" (297, 4)
. (297, 9)
"Arrow" (297, 10)
| (298, 2)
"?" (298, 4)
-> (298, 8)
"Token" (299, 4)
. (299, 9)
"Colon" (299, 10)
| (300, 2)
"?" (300, 4)
-> (300, 9)
"Token" (301, 4)
. (301, 9)
"ColonColon" (301, 10)
| (302, 2)
"?" (302, 4)
-> (302, 8)
"Token" (303, 4)
. (303, 9)
"Dot" (303, 10)
| (304, 2)
"?" (304, 4)
-> (304, 9)
"Token" (305, 4)
. (305, 9)
"DotDot" (305, 10)
| (306, 2)
"?" (306, 4)
-> (306, 8)
"Token" (307, 4)
. (307, 9)
"Eq" (307, 10)
| (308, 2)
"?" (308, 4)
-> (308, 8)
"Token" (309, 4)
. (309, 9)
"Gt" (309, 10)
| (310, 2)
"?" (310, 4)
-> (310, 9)
"Token" (311, 4)
. (311, 9)
"GtEq" (311, 10)
| (312, 2)
"?" (312, 4)
-> (312, 8)
"Token" (313, 4)
. (313, 9)
"Lt" (313, 10)
| (314, 2)
"?" (314, 4)
-> (314, 9)
"Token" (315, 4)
. (315, 9)
"LtEq" (315, 10)
| (316, 2)
"?" (316, 4)
-> (316, 9)
"Token" (317, 4)
. (317, 9)
"LtGt" (317, 10)
| (318, 2)
"?" (318, 4)
-> (318, 8)
"Token" (319, 4)
. (319, 9)
"Minus" (319, 10)
| (320, 2)
"?" (320, 4)
-> (320, 8)
"Token" (321, 4)
. (321, 9)
"Percent" (321, 10)
| (322, 2)
"?" (322, 4)
-> (322, 8)
"Token" (323, 4)
. (323, 9)
"Pipe" (323, 10)
| (324, 2)
"?" (324, 4)
-> (324, 9)
"Token" (325, 4)
. (325, 9)
"PipeGt" (325, 10)
| (326, 2)
"?" (326, 4)
-> (326, 9)
"Token" (327, 4)
. (327, 9)
"PipePipe" (327, 10)
| (328, 2)
"?" (328, 4)
-> (328, 8)
"Token" (329, 4)
. (329, 9)
"Plus" (329, 10)
| (330, 2)
"?" (330, 4)
-> (330, 8)
"Token" (331, 4)
. (331, 9)
"Semi" (331, 10)
| (332, 2)
"?" (332, 4)
-> (332, 8)
"Token" (333, 4)
. (333, 9)
"Star" (333, 10)
| (334, 2)
"?" (334, 4)
-> (334, 8)
"Token" (335, 4)
. (335, 9)
"Slash" (335, 10)
| (336, 2)
"_" (336, 4)
-> (336, 6)
"Token" (337, 4)
. (337, 9)
"Error" (337, 10)
let (339, 0)
"tokenFromPun" (339, 4)
( (339, 17)
"text" (339, 18)
: (339, 22)
"string" (339, 24)
) (339, 30)
( (339, 32)
"l" (339, 33)
: (339, 34)
"int" (339, 36)
) (339, 39)
"r" (339, 41)
= (339, 43)
"assert" (340, 2)
( (340, 9)
"r" (340, 10)
- (340, 12)
"l" (340, 14)
= (340, 16)
1 (340, 18)
) (340, 19)
match (341, 2)
"text" (341, 8)
. (341, 12)
[ (341, 13)
"l" (341, 14)
] (341, 15)
with (341, 17)
| (342, 2)
'?' (342, 4)
-> (342, 8)
"Token" (343, 4)
. (343, 9)
"Comma" (343, 10)
| (344, 2)
'?' (344, 4)
-> (344, 8)
"Token" (345, 4)
. (345, 9)
"ParenL" (345, 10)
| (346, 2)
'?' (346, 4)
-> (346, 8)
"Token" (347, 4)
. (347, 9)
"ParenR" (347, 10)
| (348, 2)
'?' (348, 4)
-> (348, 8)
"Token" (349, 4)
. (349, 9)
"BracketL" (349, 10)
| (350, 2)
'?' (350, 4)
-> (350, 8)
"Token" (351, 4)
. (351, 9)
"BracketR" (351, 10)
| (352, 2)
"_" (352, 4)
-> (352, 6)
"failwith" (353, 4)
"?" (353, 13)
let (355, 0)
"tokenFromIntLit" (355, 4)
( (355, 20)
"text" (355, 21)
: (355, 25)
"string" (355, 27)
) (355, 33)
"l" (355, 35)
"r" (355, 37)
: (355, 38)
"Token" (355, 40)
= (355, 46)
let (356, 2)
"value" (356, 6)
= (356, 12)
"text" (356, 14)
|> (356, 19)
"strSlice" (356, 22)
"l" (356, 31)
"r" (356, 33)
|> (356, 35)
"int" (356, 38)
"Token" (357, 2)
. (357, 7)
"Int" (357, 8)
"value" (357, 12)
let (359, 0)
"tokenFromCharLit" (359, 4)
( (359, 21)
"text" (359, 22)
: (359, 26)
"string" (359, 28)
) (359, 34)
"l" (359, 36)
"r" (359, 38)
: (359, 39)
"Token" (359, 41)
= (359, 47)
"assert" (360, 2)
( (360, 9)
"l" (360, 10)
+ (360, 12)
2 (360, 14)
<= (360, 16)
"r" (360, 19)
&& (360, 21)
"text" (360, 24)
. (360, 28)
[ (360, 29)
"l" (360, 30)
] (360, 31)
= (360, 33)
'?' (360, 35)
&& (360, 40)
"text" (360, 43)
. (360, 47)
[ (360, 48)
"r" (360, 49)
- (360, 51)
1 (360, 53)
] (360, 54)
= (360, 56)
'?' (360, 58)
) (360, 62)
let (363, 2)
"i" (363, 6)
= (363, 8)
"l" (363, 10)
+ (363, 12)
1 (363, 14)
let (364, 2)
"value" (364, 6)
= (364, 12)
match (365, 4)
"text" (365, 10)
. (365, 14)
[ (365, 15)
"i" (365, 16)
] (365, 17)
with (365, 19)
| (366, 4)
'?' (366, 6)
-> (366, 11)
match (367, 6)
"text" (367, 12)
. (367, 16)
[ (367, 17)
"i" (367, 18)
+ (367, 20)
1 (367, 22)
] (367, 23)
with (367, 25)
| (368, 6)
'?' (368, 8)
-> (368, 12)
"charNull" (369, 8)
| (370, 6)
'?' (370, 8)
-> (370, 12)
'?' (371, 8)
| (372, 6)
'?' (372, 8)
-> (372, 12)
'?' (373, 8)
| (374, 6)
'?' (374, 8)
-> (374, 12)
'?' (375, 8)
| (376, 6)
"c" (376, 8)
-> (376, 10)
"c" (377, 8)
| (378, 4)
"c" (378, 6)
-> (378, 8)
"c" (379, 6)
"Token" (381, 2)
. (381, 7)
"Char" (381, 8)
"value" (381, 13)
let (383, 0)
"tokenFromStrLit" (383, 4)
( (383, 20)
"text" (383, 21)
: (383, 25)
"string" (383, 27)
) (383, 33)
"l" (383, 35)
"r" (383, 37)
: (383, 38)
"Token" (383, 40)
= (383, 46)
"assert" (384, 2)
( (384, 9)
"l" (384, 10)
+ (384, 12)
2 (384, 14)
<= (384, 16)
"r" (384, 19)
&& (384, 21)
"text" (384, 24)
. (384, 28)
[ (384, 29)
"l" (384, 30)
] (384, 31)
= (384, 33)
'?' (384, 35)
&& (384, 39)
"text" (384, 42)
. (384, 46)
[ (384, 47)
"r" (384, 48)
- (384, 50)
1 (384, 52)
] (384, 53)
= (384, 55)
'?' (384, 57)
) (384, 60)
let (388, 2)
rec (388, 6)
"go" (388, 10)
"acc" (388, 13)
"i" (388, 17)
= (388, 19)
let (390, 4)
rec (390, 8)
"next" (390, 12)
"i" (390, 17)
= (390, 19)
if (391, 6)
"i" (391, 9)
= (391, 11)
"r" (391, 13)
- (391, 15)
1 (391, 17)
|| (391, 19)
"text" (391, 22)
. (391, 26)
[ (391, 27)
"i" (391, 28)
] (391, 29)
= (391, 31)
'?' (391, 33)
then (391, 38)
"i" (392, 8)
else (393, 6)
"next" (394, 8)
( (394, 13)
"i" (394, 14)
+ (394, 16)
1 (394, 18)
) (394, 19)
let (395, 4)
"endIndex" (395, 8)
= (395, 17)
"next" (395, 19)
"i" (395, 24)
let (396, 4)
"acc" (396, 8)
= (396, 12)
( (396, 14)
"text" (396, 15)
|> (396, 20)
"strSlice" (396, 23)
"i" (396, 32)
"endIndex" (396, 34)
) (396, 42)
:: (396, 44)
"acc" (396, 47)
let (397, 4)
"i" (397, 8)
= (397, 10)
"endIndex" (397, 12)
if (400, 4)
"i" (400, 7)
= (400, 9)
"r" (400, 11)
- (400, 13)
1 (400, 15)
then (400, 17)
"acc" (401, 6)
|> (401, 10)
"listRev" (401, 13)
|> (401, 21)
"strConcat" (401, 24)
else (402, 4)
"assert" (403, 6)
( (403, 13)
"text" (403, 14)
. (403, 18)
[ (403, 19)
"i" (403, 20)
] (403, 21)
= (403, 23)
'?' (403, 25)
) (403, 29)
match (404, 6)
"text" (404, 12)
. (404, 16)
[ (404, 17)
"i" (404, 18)
+ (404, 20)
1 (404, 22)
] (404, 23)
with (404, 25)
| (405, 6)
'?' (405, 8)
-> (405, 12)
"go" (406, 8)
( (406, 11)
"?" (406, 12)
:: (406, 21)
"acc" (406, 24)
) (406, 27)
( (406, 29)
"i" (406, 30)
+ (406, 32)
6 (406, 34)
) (406, 35)
| (407, 6)
'?' (407, 8)
-> (407, 12)
"go" (408, 8)
( (408, 11)
"?" (408, 12)
:: (408, 17)
"acc" (408, 20)
) (408, 23)
( (408, 25)
"i" (408, 26)
+ (408, 28)
2 (408, 30)
) (408, 31)
| (409, 6)
'?' (409, 8)
-> (409, 12)
"go" (410, 8)
( (410, 11)
"?" (410, 12)
:: (410, 17)
"acc" (410, 20)
) (410, 23)
( (410, 25)
"i" (410, 26)
+ (410, 28)
2 (410, 30)
) (410, 31)
| (411, 6)
'?' (411, 8)
-> (411, 12)
"go" (412, 8)
( (412, 11)
"?" (412, 12)
:: (412, 17)
"acc" (412, 20)
) (412, 23)
( (412, 25)
"i" (412, 26)
+ (412, 28)
2 (412, 30)
) (412, 31)
| (413, 6)
"_" (413, 8)
-> (413, 10)
"go" (414, 8)
( (414, 11)
( (414, 12)
"text" (414, 13)
|> (414, 18)
"strSlice" (414, 21)
( (414, 30)
"i" (414, 31)
+ (414, 33)
1 (414, 35)
) (414, 36)
( (414, 38)
"i" (414, 39)
+ (414, 41)
2 (414, 43)
) (414, 44)
) (414, 45)
:: (414, 47)
"acc" (414, 50)
) (414, 53)
( (414, 55)
"i" (414, 56)
+ (414, 58)
2 (414, 60)
) (414, 61)
let (415, 2)
"value" (415, 6)
= (415, 12)
"go" (415, 14)
[ (415, 17)
] (415, 18)
( (415, 20)
"l" (415, 21)
+ (415, 23)
1 (415, 25)
) (415, 26)
"Token" (417, 2)
. (417, 7)
"Str" (417, 8)
"value" (417, 12)
let (419, 0)
"tokenFromStrLitRaw" (419, 4)
( (419, 23)
"text" (419, 24)
: (419, 28)
"string" (419, 30)
) (419, 36)
"l" (419, 38)
"r" (419, 40)
= (419, 42)
"assert" (420, 2)
( (420, 9)
"l" (420, 10)
+ (420, 12)
6 (420, 14)
<= (420, 16)
"r" (420, 19)
&& (420, 21)
"text" (420, 24)
|> (420, 29)
"strIsFollowedByRawQuotes" (420, 32)
"l" (420, 57)
&& (420, 59)
"text" (420, 62)
|> (420, 67)
"strIsFollowedByRawQuotes" (420, 70)
( (420, 95)
"r" (420, 96)
- (420, 98)
3 (420, 100)
) (420, 101)
) (420, 102)
"Token" (421, 2)
. (421, 7)
"Str" (421, 8)
( (421, 12)
"text" (421, 13)
|> (421, 18)
"strSlice" (421, 21)
( (421, 30)
"l" (421, 31)
+ (421, 33)
3 (421, 35)
) (421, 36)
( (421, 38)
"r" (421, 39)
- (421, 41)
3 (421, 43)
) (421, 44)
) (421, 45)
let (427, 0)
"tokCtxToTextIndex" (427, 4)
( (427, 22)
( (427, 23)
"text" (427, 24)
, (427, 28)
"i" (427, 30)
, (427, 31)
"_" (427, 33)
, (427, 34)
"_" (427, 36)
) (427, 37)
: (427, 38)
"TokenizeCtx" (427, 40)
) (427, 51)
= (427, 53)
"text" (428, 2)
, (428, 6)
"i" (428, 8)
let (432, 0)
"tokCtxSkip" (432, 4)
"r" (432, 15)
( (432, 17)
( (432, 18)
"text" (432, 19)
, (432, 23)
"i" (432, 25)
, (432, 26)
"loc" (432, 28)
, (432, 31)
"acc" (432, 33)
) (432, 36)
: (432, 37)
"TokenizeCtx" (432, 39)
) (432, 50)
: (432, 51)
"TokenizeCtx" (432, 53)
= (432, 65)
"assert" (433, 2)
( (433, 9)
0 (433, 10)
<= (433, 12)
"i" (433, 15)
&& (433, 17)
"i" (433, 20)
<= (433, 22)
"r" (433, 25)
&& (433, 27)
"r" (433, 30)
<= (433, 32)
"text" (433, 35)
. (433, 39)
"Length" (433, 40)
) (433, 46)
let (434, 2)
"newLoc" (434, 6)
= (434, 13)
"loc" (434, 15)
|> (434, 19)
"locShift" (434, 22)
"text" (434, 31)
"i" (434, 36)
"r" (434, 38)
"text" (435, 2)
, (435, 6)
"r" (435, 8)
, (435, 9)
"newLoc" (435, 11)
, (435, 17)
"acc" (435, 19)
let (439, 0)
"tokCtxPush" (439, 4)
"kind" (439, 15)
"r" (439, 20)
( (439, 22)
( (439, 23)
"text" (439, 24)
, (439, 28)
"i" (439, 30)
, (439, 31)
"loc" (439, 33)
, (439, 36)
"acc" (439, 38)
) (439, 41)
: (439, 42)
"TokenizeCtx" (439, 44)
) (439, 55)
: (439, 56)
"TokenizeCtx" (439, 58)
= (439, 70)
"assert" (440, 2)
( (440, 9)
0 (440, 10)
<= (440, 12)
"i" (440, 15)
&& (440, 17)
"i" (440, 20)
<= (440, 22)
"r" (440, 25)
&& (440, 27)
"r" (440, 30)
<= (440, 32)
"text" (440, 35)
. (440, 39)
"Length" (440, 40)
) (440, 46)
let (441, 2)
"newAcc" (441, 6)
= (441, 13)
( (441, 15)
"kind" (441, 16)
, (441, 20)
"loc" (441, 22)
) (441, 25)
:: (441, 27)
"acc" (441, 30)
let (442, 2)
"newLoc" (442, 6)
= (442, 13)
"loc" (442, 15)
|> (442, 19)
"locShift" (442, 22)
"text" (442, 31)
"i" (442, 36)
"r" (442, 38)
"text" (443, 2)
, (443, 6)
"r" (443, 8)
, (443, 9)
"newLoc" (443, 11)
, (443, 17)
"newAcc" (443, 19)
let (445, 0)
"tokEof" (445, 4)
( (445, 11)
( (445, 12)
"text" (445, 13)
, (445, 17)
"i" (445, 19)
, (445, 20)
"_" (445, 22)
, (445, 23)
"acc" (445, 25)
) (445, 28)
: (445, 29)
"TokenizeCtx" (445, 31)
) (445, 42)
= (445, 44)
"assert" (446, 2)
( (446, 9)
"lookEof" (446, 10)
"text" (446, 18)
"i" (446, 23)
) (446, 24)
"acc" (447, 2)
|> (447, 6)
"listRev" (447, 9)
let (449, 0)
"tokError" (449, 4)
"t" (449, 13)
= (449, 15)
let (450, 2)
"text" (450, 6)
, (450, 10)
"i" (450, 12)
= (450, 14)
"t" (450, 16)
|> (450, 18)
"tokCtxToTextIndex" (450, 21)
let (451, 2)
"r" (451, 6)
= (451, 8)
"scanError" (451, 10)
"text" (451, 20)
"i" (451, 25)
"t" (452, 2)
|> (452, 4)
"tokCtxSkip" (452, 7)
"r" (452, 18)
let (454, 0)
"tokComment" (454, 4)
( (454, 15)
"t" (454, 16)
: (454, 17)
"TokenizeCtx" (454, 19)
) (454, 30)
= (454, 32)
let (455, 2)
"text" (455, 6)
, (455, 10)
"i" (455, 12)
= (455, 14)
"t" (455, 16)
|> (455, 18)
"tokCtxToTextIndex" (455, 21)
let (456, 2)
"r" (456, 6)
= (456, 8)
"scanLine" (456, 10)
"text" (456, 19)
"i" (456, 24)
"t" (457, 2)
|> (457, 4)
"tokCtxSkip" (457, 7)
"r" (457, 18)
let (459, 0)
"tokSpace" (459, 4)
( (459, 13)
"t" (459, 14)
: (459, 15)
"TokenizeCtx" (459, 17)
) (459, 28)
= (459, 30)
let (460, 2)
"text" (460, 6)
, (460, 10)
"i" (460, 12)
= (460, 14)
"t" (460, 16)
|> (460, 18)
"tokCtxToTextIndex" (460, 21)
let (461, 2)
"r" (461, 6)
= (461, 8)
"scanSpace" (461, 10)
"text" (461, 20)
"i" (461, 25)
"t" (462, 2)
|> (462, 4)
"tokCtxSkip" (462, 7)
"r" (462, 18)
let (464, 0)
"tokPun" (464, 4)
"t" (464, 11)
= (464, 13)
let (465, 2)
"text" (465, 6)
, (465, 10)
"i" (465, 12)
= (465, 14)
"t" (465, 16)
|> (465, 18)
"tokCtxToTextIndex" (465, 21)
let (466, 2)
"r" (466, 6)
= (466, 8)
"scanPun" (466, 10)
"text" (466, 18)
"i" (466, 23)
let (467, 2)
"token" (467, 6)
= (467, 12)
"tokenFromPun" (467, 14)
"text" (467, 27)
"i" (467, 32)
"r" (467, 34)
"t" (468, 2)
|> (468, 4)
"tokCtxPush" (468, 7)
"token" (468, 18)
"r" (468, 24)
let (470, 0)
"tokOp" (470, 4)
"t" (470, 10)
= (470, 12)
let (471, 2)
"text" (471, 6)
, (471, 10)
"i" (471, 12)
= (471, 14)
"t" (471, 16)
|> (471, 18)
"tokCtxToTextIndex" (471, 21)
let (472, 2)
"r" (472, 6)
= (472, 8)
"scanOp" (472, 10)
"text" (472, 17)
"i" (472, 22)
let (473, 2)
"token" (473, 6)
= (473, 12)
"tokenFromOp" (473, 14)
"text" (473, 26)
"i" (473, 31)
"r" (473, 33)
"t" (474, 2)
|> (474, 4)
"tokCtxPush" (474, 7)
"token" (474, 18)
"r" (474, 24)
let (476, 0)
"tokIdent" (476, 4)
"t" (476, 13)
= (476, 15)
let (477, 2)
"text" (477, 6)
, (477, 10)
"i" (477, 12)
= (477, 14)
"t" (477, 16)
|> (477, 18)
"tokCtxToTextIndex" (477, 21)
let (478, 2)
"r" (478, 6)
= (478, 8)
"scanIdent" (478, 10)
"text" (478, 20)
"i" (478, 25)
let (479, 2)
"token" (479, 6)
= (479, 12)
"tokenFromIdent" (479, 14)
"text" (479, 29)
"i" (479, 34)
"r" (479, 36)
"t" (480, 2)
|> (480, 4)
"tokCtxPush" (480, 7)
"token" (480, 18)
"r" (480, 24)
let (482, 0)
"tokIntLit" (482, 4)
"t" (482, 14)
= (482, 16)
let (483, 2)
"text" (483, 6)
, (483, 10)
"i" (483, 12)
= (483, 14)
"t" (483, 16)
|> (483, 18)
"tokCtxToTextIndex" (483, 21)
let (484, 2)
"r" (484, 6)
= (484, 8)
"scanIntLit" (484, 10)
"text" (484, 21)
"i" (484, 26)
let (485, 2)
"token" (485, 6)
= (485, 12)
"tokenFromIntLit" (485, 14)
"text" (485, 30)
"i" (485, 35)
"r" (485, 37)
"t" (486, 2)
|> (486, 4)
"tokCtxPush" (486, 7)
"token" (486, 18)
"r" (486, 24)
let (488, 0)
"tokCharLit" (488, 4)
"t" (488, 15)
= (488, 17)
let (489, 2)
"text" (489, 6)
, (489, 10)
"i" (489, 12)
= (489, 14)
"t" (489, 16)
|> (489, 18)
"tokCtxToTextIndex" (489, 21)
let (490, 2)
"ok" (490, 6)
, (490, 8)
"r" (490, 10)
= (490, 12)
"scanCharLit" (490, 14)
"text" (490, 26)
"i" (490, 31)
let (491, 2)
"token" (491, 6)
= (491, 12)
if (491, 14)
"ok" (491, 17)
then (491, 20)
"tokenFromCharLit" (491, 25)
"text" (491, 42)
"i" (491, 47)
"r" (491, 49)
else (491, 51)
"Token" (491, 56)
. (491, 61)
"Error" (491, 62)
"t" (492, 2)
|> (492, 4)
"tokCtxPush" (492, 7)
"token" (492, 18)
"r" (492, 24)
let (494, 0)
"tokStrLit" (494, 4)
"t" (494, 14)
= (494, 16)
let (495, 2)
"text" (495, 6)
, (495, 10)
"i" (495, 12)
= (495, 14)
"t" (495, 16)
|> (495, 18)
"tokCtxToTextIndex" (495, 21)
let (496, 2)
"ok" (496, 6)
, (496, 8)
"r" (496, 10)
= (496, 12)
"scanStrLit" (496, 14)
"text" (496, 25)
"i" (496, 30)
let (497, 2)
"token" (497, 6)
= (497, 12)
if (497, 14)
"ok" (497, 17)
then (497, 20)
"tokenFromStrLit" (497, 25)
"text" (497, 41)
"i" (497, 46)
"r" (497, 48)
else (497, 50)
"Token" (497, 55)
. (497, 60)
"Error" (497, 61)
"t" (498, 2)
|> (498, 4)
"tokCtxPush" (498, 7)
"token" (498, 18)
"r" (498, 24)
let (500, 0)
"tokStrLitRaw" (500, 4)
"t" (500, 17)
= (500, 19)
let (501, 2)
"text" (501, 6)
, (501, 10)
"i" (501, 12)
= (501, 14)
"t" (501, 16)
|> (501, 18)
"tokCtxToTextIndex" (501, 21)
let (502, 2)
"ok" (502, 6)
, (502, 8)
"r" (502, 10)
= (502, 12)
"scanStrLitRaw" (502, 14)
"text" (502, 28)
"i" (502, 33)
let (503, 2)
"token" (503, 6)
= (503, 12)
if (503, 14)
"ok" (503, 17)
then (503, 20)
"tokenFromStrLitRaw" (503, 25)
"text" (503, 44)
"i" (503, 49)
"r" (503, 51)
else (503, 53)
"Token" (503, 58)
. (503, 63)
"Error" (503, 64)
"t" (504, 2)
|> (504, 4)
"tokCtxPush" (504, 7)
"token" (504, 18)
"r" (504, 24)
let (506, 0)
"tokenize" (506, 4)
( (506, 13)
"text" (506, 14)
: (506, 18)
"string" (506, 20)
) (506, 26)
: (506, 27)
( (506, 29)
"Token" (506, 30)
* (506, 36)
"Loc" (506, 38)
) (506, 41)
"list" (506, 43)
= (506, 48)
let (507, 2)
rec (507, 6)
"go" (507, 10)
"t" (507, 13)
= (507, 15)
let (508, 4)
"text" (508, 8)
, (508, 12)
"i" (508, 14)
= (508, 16)
"t" (508, 18)
|> (508, 20)
"tokCtxToTextIndex" (508, 23)
if (510, 4)
"lookEof" (510, 7)
"text" (510, 15)
"i" (510, 20)
then (510, 22)
"t" (511, 6)
|> (511, 8)
"tokEof" (511, 11)
else (513, 4)
if (513, 9)
"lookComment" (513, 12)
"text" (513, 24)
"i" (513, 29)
then (513, 31)
"t" (514, 6)
|> (514, 8)
"tokComment" (514, 11)
|> (514, 22)
"go" (514, 25)
else (516, 4)
if (516, 9)
"lookSpace" (516, 12)
"text" (516, 22)
"i" (516, 27)
then (516, 29)
"t" (517, 6)
|> (517, 8)
"tokSpace" (517, 11)
|> (517, 20)
"go" (517, 23)
else (519, 4)
if (519, 9)
"lookOp" (519, 12)
"text" (519, 19)
"i" (519, 24)
then (519, 26)
"t" (520, 6)
|> (520, 8)
"tokOp" (520, 11)
|> (520, 17)
"go" (520, 20)
else (522, 4)
if (522, 9)
"lookIntLit" (522, 12)
"text" (522, 23)
"i" (522, 28)
then (522, 30)
"t" (523, 6)
|> (523, 8)
"tokIntLit" (523, 11)
|> (523, 21)
"go" (523, 24)
else (525, 4)
if (525, 9)
"lookIdent" (525, 12)
"text" (525, 22)
"i" (525, 27)
then (525, 29)
"t" (526, 6)
|> (526, 8)
"tokIdent" (526, 11)
|> (526, 20)
"go" (526, 23)
else (528, 4)
if (528, 9)
"lookCharLit" (528, 12)
"text" (528, 24)
"i" (528, 29)
then (528, 31)
"t" (529, 6)
|> (529, 8)
"tokCharLit" (529, 11)
|> (529, 22)
"go" (529, 25)
else (531, 4)
if (531, 9)
"lookStrLitRaw" (531, 12)
"text" (531, 26)
"i" (531, 31)
then (531, 33)
"t" (532, 6)
|> (532, 8)
"tokStrLitRaw" (532, 11)
|> (532, 24)
"go" (532, 27)
else (534, 4)
if (534, 9)
"lookStrLit" (534, 12)
"text" (534, 23)
"i" (534, 28)
then (534, 30)
"t" (535, 6)
|> (535, 8)
"tokStrLit" (535, 11)
|> (535, 21)
"go" (535, 24)
else (537, 4)
if (537, 9)
"lookPun" (537, 12)
"text" (537, 20)
"i" (537, 25)
then (537, 27)
"t" (538, 6)
|> (538, 8)
"tokPun" (538, 11)
|> (538, 18)
"go" (538, 21)
else (540, 4)
"t" (541, 6)
|> (541, 8)
"tokError" (541, 11)
|> (541, 20)
"go" (541, 23)
"go" (543, 2)
( (543, 5)
"text" (543, 6)
, (543, 10)
0 (543, 12)
, (543, 13)
( (543, 15)
0 (543, 16)
, (543, 17)
0 (543, 19)
) (543, 20)
, (543, 21)
[ (543, 23)
] (543, 24)
) (543, 25)
AST:
semi:
- FIXME: TBD
- FIXME: TBD
- FIXME: TBD
- let:
  - fun:
    - locShift
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - anno:
      - r
      - int
    - anno:
      - tuple:
        - y
        - x
      - Loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - l
          - bin:
            - l
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - fun:
        - go
        - y
        - x
        - i
      - if:
        - bin:
          - i
          - r
        - tuple:
          - y
          - x
        - if:
          - bin:
            - index: text
            - char 10
          - bin:
            - bin:
              - bin:
                - go
                - bin:
                  - y
                  - 1
              - 0
            - bin:
              - i
              - 1
          - bin:
            - bin:
              - bin:
                - go
                - y
              - bin:
                - x
                - 1
            - bin:
              - i
              - 1
      bin:
      - bin:
        - bin:
          - go
          - y
        - x
      - l
  let:
  - anno:
    - charNull
    - char
  - bin:
    - char
    - 0
  let:
  - anno:
    - fun:
      - charIsSpace
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - c
          - char 32
        - bin:
          - c
          - char 9
      - bin:
        - c
        - char 13
    - bin:
      - c
      - char 10
  let:
  - anno:
    - fun:
      - charIsDigit
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - char 48
      - c
    - bin:
      - c
      - char 57
  let:
  - anno:
    - fun:
      - charIsAlpha
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - char 97
        - c
      - bin:
        - c
        - char 122
    - bin:
      - bin:
        - char 65
        - c
      - bin:
        - c
        - char 90
  let:
  - anno:
    - fun:
      - charIsIdent
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - c
        - char 95
      - bin:
        - charIsDigit
        - c
    - bin:
      - charIsAlpha
      - c
  let:
  - anno:
    - fun:
      - charIsOp
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - bin:
                          - bin:
                            - bin:
                              - bin:
                                - c
                                - char 43
                              - bin:
                                - c
                                - char 45
                            - bin:
                              - c
                              - char 42
                          - bin:
                            - c
                            - char 47
                        - bin:
                          - c
                          - char 37
                      - bin:
                        - c
                        - char 61
                    - bin:
                      - c
                      - char 60
                  - bin:
                    - c
                    - char 62
                - bin:
                  - c
                  - char 94
              - bin:
                - c
                - char 38
            - bin:
              - c
              - char 124
          - bin:
            - c
            - char 58
        - bin:
          - c
          - char 64
      - bin:
        - c
        - char 59
    - bin:
      - c
      - char 46
  let:
  - anno:
    - fun:
      - charIsPun
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - c
            - char 44
          - bin:
            - c
            - char 40
        - bin:
          - c
          - char 41
      - bin:
        - c
        - char 91
    - bin:
      - c
      - char 93
  let:
  - anno:
    - fun:
      - strIsFollowedBy
      - anno:
        - i
        - int
      - anno:
        - prefix
        - string
      - anno:
        - s
        - string
    - bool
  - let:
    - fun:
      - go
      - pi
      - si
    - bin:
      - bin:
        - pi
        - .Length: prefix
      - bin:
        - bin:
          - bin:
            - si
            - .Length: s
          - bin:
            - index: prefix
            - index: s
        - bin:
          - bin:
            - go
            - bin:
              - pi
              - 1
          - bin:
            - si
            - 1
    bin:
    - bin:
      - bin:
        - i
        - .Length: prefix
      - .Length: s
    - bin:
      - bin:
        - go
        - 0
      - i
  let:
  - anno:
    - fun:
      - strIsFollowedByRawQuotes
      - anno:
        - i
        - int
      - anno:
        - s
        - string
    - bool
  - bin:
    - bin:
      - bin:
        - strIsFollowedBy
        - i
      - \"...\"
    - s
  let:
  - fun:
    - scanError
    - anno:
      - _
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - 1
  let:
  - fun:
    - lookEof
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - .Length: text
  let:
  - fun:
    - lookSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsSpace
  let:
  - fun:
    - scanSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookSpace
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsSpace
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookComment
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"...\"
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"...\"
  let:
  - fun:
    - scanLine
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookComment
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - i
          - .Length: text
        - i
        - if:
          - bin:
            - index: text
            - char 10
          - bin:
            - i
            - 1
          - bin:
            - go
            - bin:
              - i
              - 1
      bin:
      - go
      - i
  let:
  - fun:
    - lookPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsPun
  let:
  - fun:
    - scanPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookPun
          - text
        - i
    - bin:
      - i
      - 1
  let:
  - fun:
    - lookOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsOp
  let:
  - fun:
    - scanOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookOp
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsOp
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - index: text
      - charIsIdent
    - bin:
      - bin:
        - index: text
        - charIsDigit
      - not
  let:
  - fun:
    - scanIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIdent
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsIdent
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsDigit
  let:
  - fun:
    - scanIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIntLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsDigit
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - char 39
  let:
  - fun:
    - scanCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookCharLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - char 92
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - char 39
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - char 10
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - char 10
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - char 34
  let:
  - fun:
    - scanStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - char 92
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - char 34
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - char 10
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - char 10
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - text
    - bin:
      - strIsFollowedByRawQuotes
      - i
  let:
  - fun:
    - scanStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLitRaw
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - i
        - tuple:
          - true
          - bin:
            - i
            - 3
        - if:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - go
            - bin:
              - i
              - 1
          - semi:
            - bin:
              - assert
              - bin:
                - i
                - .Length: text
            - tuple:
              - false
              - i
      bin:
      - go
      - bin:
        - i
        - 3
  let:
  - anno:
    - fun:
      - tokenFromIdent
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
  let:
  - anno:
    - fun:
      - tokenFromOp
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
  let:
  - fun:
    - tokenFromPun
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - r
          - l
        - 1
    - match:
      - index: text
  let:
  - anno:
    - fun:
      - tokenFromIntLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - let:
    - value
    - bin:
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - l
          - r
      - int
    bin:
    - .Int: Token
    - value
  let:
  - anno:
    - fun:
      - tokenFromCharLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - char 39
        - bin:
          - index: text
          - char 39
    - let:
      - i
      - bin:
        - l
        - 1
      let:
      - value
      - match:
        - index: text
      bin:
      - .Char: Token
      - value
  let:
  - anno:
    - fun:
      - tokenFromStrLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - char 34
        - bin:
          - index: text
          - char 34
    - let:
      - fun:
        - go
        - acc
        - i
      - let:
        - fun:
          - next
          - i
        - if:
          - bin:
            - bin:
              - i
              - bin:
                - r
                - 1
            - bin:
              - index: text
              - char 92
          - i
          - bin:
            - next
            - bin:
              - i
              - 1
        let:
        - endIndex
        - bin:
          - next
          - i
        let:
        - acc
        - bin:
          - bin:
            - text
            - bin:
              - bin:
                - strSlice
                - i
              - endIndex
          - acc
        let:
        - i
        - endIndex
        if:
        - bin:
          - i
          - bin:
            - r
            - 1
        - bin:
          - bin:
            - acc
            - listRev
          - strConcat
        - semi:
          - bin:
            - assert
            - bin:
              - index: text
              - char 92
          - match:
            - index: text
      let:
      - value
      - bin:
        - bin:
          - go
          - list
        - bin:
          - l
          - 1
      bin:
      - .Str: Token
      - value
  let:
  - fun:
    - tokenFromStrLitRaw
    - anno:
      - text
      - string
    - l
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 6
            - r
          - bin:
            - text
            - bin:
              - strIsFollowedByRawQuotes
              - l
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - bin:
              - r
              - 3
    - bin:
      - .Str: Token
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - bin:
              - l
              - 3
          - bin:
            - r
            - 3
  let:
  - fun:
    - tokCtxToTextIndex
    - anno:
      - tuple:
        - text
        - i
        - _
        - _
      - TokenizeCtx
  - tuple:
    - text
    - i
  let:
  - anno:
    - fun:
      - tokCtxSkip
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - acc
  let:
  - anno:
    - fun:
      - tokCtxPush
      - kind
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newAcc
      - bin:
        - tuple:
          - kind
          - loc
        - acc
      let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - newAcc
  let:
  - fun:
    - tokEof
    - anno:
      - tuple:
        - text
        - i
        - _
        - acc
      - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookEof
          - text
        - i
    - bin:
      - acc
      - listRev
  let:
  - fun:
    - tokError
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanError
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokComment
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanLine
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokSpace
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanSpace
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokPun
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanPun
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromPun
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokOp
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanOp
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromOp
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIdent
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIdent
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIdent
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIntLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIntLit
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIntLit
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokCharLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanCharLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromCharLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLitRaw
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLitRaw
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLitRaw
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - anno:
    - fun:
      - tokenize
      - anno:
        - text
        - string
    - list:
      - tuple:
        - Token
        - Loc
  - let:
    - fun:
      - go
      - t
    - let:
      - tuple:
        - text
        - i
      - bin:
        - t
        - tokCtxToTextIndex
      if:
      - bin:
        - bin:
          - lookEof
          - text
        - i
      - bin:
        - t
        - tokEof
      - if:
        - bin:
          - bin:
            - lookComment
            - text
          - i
        - bin:
          - bin:
            - t
            - tokComment
          - go
        - if:
          - bin:
            - bin:
              - lookSpace
              - text
            - i
          - bin:
            - bin:
              - t
              - tokSpace
            - go
          - if:
            - bin:
              - bin:
                - lookOp
                - text
              - i
            - bin:
              - bin:
                - t
                - tokOp
              - go
            - if:
              - bin:
                - bin:
                  - lookIntLit
                  - text
                - i
              - bin:
                - bin:
                  - t
                  - tokIntLit
                - go
              - if:
                - bin:
                  - bin:
                    - lookIdent
                    - text
                  - i
                - bin:
                  - bin:
                    - t
                    - tokIdent
                  - go
                - if:
                  - bin:
                    - bin:
                      - lookCharLit
                      - text
                    - i
                  - bin:
                    - bin:
                      - t
                      - tokCharLit
                    - go
                  - if:
                    - bin:
                      - bin:
                        - lookStrLitRaw
                        - text
                      - i
                    - bin:
                      - bin:
                        - t
                        - tokStrLitRaw
                      - go
                    - if:
                      - bin:
                        - bin:
                          - lookStrLit
                          - text
                        - i
                      - bin:
                        - bin:
                          - t
                          - tokStrLit
                        - go
                      - if:
                        - bin:
                          - bin:
                            - lookPun
                            - text
                          - i
                        - bin:
                          - bin:
                            - t
                            - tokPun
                          - go
                        - bin:
                          - bin:
                            - t
                            - tokError
                          - go
    bin:
    - go
    - tuple:
      - text
      - 0
      - tuple:
        - 0
        - 0
      - list
  tuple
$? = 0
