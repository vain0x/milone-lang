module (4, 0)
rec (4, 7)
MiloneLang (4, 11)
. (4, 21)
Lexing (4, 22)
open (6, 0)
MiloneLang (6, 5)
. (6, 15)
Types (6, 16)
open (7, 0)
MiloneLang (7, 5)
type (37, 0)
TokenKind (37, 5)
= (37, 15)
| (38, 2)
Error (38, 4)
| (39, 2)
Ident (39, 4)
| (40, 2)
IntLit (40, 4)
| (41, 2)
CharLit (41, 4)
| (42, 2)
StrLit (42, 4)
| (43, 2)
Op (43, 4)
| (44, 2)
Pun (44, 4)
type (48, 0)
ScanAcc (48, 5)
= (48, 13)
( (48, 15)
TokenKind (48, 16)
* (48, 26)
int (48, 28)
* (48, 32)
int (48, 34)
) (48, 37)
list (48, 39)
let (50, 0)
charNull (50, 4)
: (50, 12)
char (50, 14)
= (50, 19)
char (50, 21)
0 (50, 26)
let (52, 0)
charIsSpace (52, 4)
( (52, 16)
c (52, 17)
: (52, 18)
char (52, 20)
) (52, 24)
: (52, 25)
bool (52, 27)
= (52, 32)
c (53, 2)
= (53, 4)
'?' (53, 6)
|| (53, 10)
c (53, 13)
= (53, 15)
'?' (53, 17)
|| (53, 22)
c (53, 25)
= (53, 27)
'?' (53, 29)
|| (53, 34)
c (53, 37)
= (53, 39)
'?' (53, 41)
let (55, 0)
charIsDigit (55, 4)
( (55, 16)
c (55, 17)
: (55, 18)
char (55, 20)
) (55, 24)
: (55, 25)
bool (55, 27)
= (55, 32)
'?' (56, 2)
<= (56, 6)
c (56, 9)
&& (56, 11)
c (56, 14)
<= (56, 16)
'?' (56, 19)
let (58, 0)
charIsAlpha (58, 4)
( (58, 16)
c (58, 17)
: (58, 18)
char (58, 20)
) (58, 24)
: (58, 25)
bool (58, 27)
= (58, 32)
( (59, 2)
'?' (59, 3)
<= (59, 7)
c (59, 10)
&& (59, 12)
c (59, 15)
<= (59, 17)
'?' (59, 20)
) (59, 23)
|| (59, 25)
( (59, 28)
'?' (59, 29)
<= (59, 33)
c (59, 36)
&& (59, 38)
c (59, 41)
<= (59, 43)
'?' (59, 46)
) (59, 49)
let (61, 0)
charIsIdent (61, 4)
( (61, 16)
c (61, 17)
: (61, 18)
char (61, 20)
) (61, 24)
: (61, 25)
bool (61, 27)
= (61, 32)
c (62, 2)
= (62, 4)
'?' (62, 6)
|| (62, 10)
charIsDigit (62, 13)
c (62, 25)
|| (62, 27)
charIsAlpha (62, 30)
c (62, 42)
let (64, 0)
charIsOp (64, 4)
( (64, 13)
c (64, 14)
: (64, 15)
char (64, 17)
) (64, 21)
: (64, 22)
bool (64, 24)
= (64, 29)
".." (65, 2)
|> (65, 21)
strContainsChar (65, 24)
c (65, 40)
let (67, 0)
charIsPun (67, 4)
( (67, 14)
c (67, 15)
: (67, 16)
char (67, 18)
) (67, 22)
: (67, 23)
bool (67, 25)
= (67, 30)
".." (68, 2)
|> (68, 9)
strContainsChar (68, 12)
c (68, 28)
let (71, 0)
strNthStartsWith (71, 4)
( (71, 21)
i (71, 22)
: (71, 23)
int (71, 25)
) (71, 28)
( (71, 30)
prefix (71, 31)
: (71, 37)
string (71, 39)
) (71, 45)
( (71, 47)
s (71, 48)
: (71, 49)
string (71, 51)
) (71, 57)
: (71, 58)
bool (71, 60)
= (71, 65)
let (73, 2)
rec (73, 6)
go (73, 10)
pi (73, 13)
si (73, 16)
= (73, 19)
pi (74, 4)
= (74, 7)
prefix (74, 9)
. (74, 15)
Length (74, 16)
|| (74, 23)
( (74, 26)
si (75, 6)
< (75, 9)
s (75, 11)
. (75, 12)
Length (75, 13)
&& (76, 6)
prefix (76, 9)
. (76, 15)
[ (76, 16)
pi (76, 17)
] (76, 19)
= (76, 21)
s (76, 23)
. (76, 24)
[ (76, 25)
si (76, 26)
] (76, 28)
&& (77, 6)
go (77, 9)
( (77, 12)
pi (77, 13)
+ (77, 16)
1 (77, 18)
) (77, 19)
( (77, 21)
si (77, 22)
+ (77, 25)
1 (77, 27)
) (77, 28)
) (78, 4)
i (79, 2)
+ (79, 4)
prefix (79, 6)
. (79, 12)
Length (79, 13)
<= (79, 20)
s (79, 23)
. (79, 24)
Length (79, 25)
&& (79, 32)
go (79, 35)
0 (79, 38)
i (79, 40)
let (81, 0)
scanError (81, 4)
( (81, 14)
acc (81, 15)
: (81, 18)
ScanAcc (81, 20)
, (81, 27)
text (81, 29)
: (81, 33)
string (81, 35)
, (81, 41)
i (81, 43)
: (81, 44)
int (81, 46)
) (81, 49)
= (81, 51)
( (82, 2)
TokenKind (82, 3)
. (82, 12)
Error (82, 13)
, (82, 18)
i (82, 20)
, (82, 21)
i (82, 23)
+ (82, 25)
1 (82, 27)
) (82, 28)
:: (82, 30)
acc (82, 33)
, (82, 36)
text (82, 38)
, (82, 42)
i (82, 44)
+ (82, 46)
1 (82, 48)
let (84, 0)
scanSpace (84, 4)
( (84, 14)
acc (84, 15)
: (84, 18)
ScanAcc (84, 20)
, (84, 27)
text (84, 29)
: (84, 33)
string (84, 35)
, (84, 41)
i (84, 43)
: (84, 44)
int (84, 46)
) (84, 49)
= (84, 51)
assert (85, 2)
( (85, 9)
text (85, 10)
. (85, 14)
[ (85, 15)
i (85, 16)
] (85, 17)
|> (85, 19)
charIsSpace (85, 22)
) (85, 33)
let (86, 2)
rec (86, 6)
go (86, 10)
i (86, 13)
= (86, 15)
if (87, 4)
i (87, 7)
< (87, 9)
text (87, 11)
. (87, 15)
Length (87, 16)
&& (87, 23)
text (87, 26)
. (87, 30)
[ (87, 31)
i (87, 32)
] (87, 33)
|> (87, 35)
charIsSpace (87, 38)
then (87, 50)
go (88, 6)
( (88, 9)
i (88, 10)
+ (88, 12)
1 (88, 14)
) (88, 15)
else (89, 4)
i (90, 6)
acc (91, 2)
, (91, 5)
text (91, 7)
, (91, 11)
go (91, 13)
i (91, 16)
let (93, 0)
scanLine (93, 4)
( (93, 13)
acc (93, 14)
: (93, 17)
ScanAcc (93, 19)
, (93, 26)
text (93, 28)
: (93, 32)
string (93, 34)
, (93, 40)
i (93, 42)
: (93, 43)
int (93, 45)
) (93, 48)
= (93, 50)
let (94, 2)
rec (94, 6)
go (94, 10)
i (94, 13)
= (94, 15)
if (95, 4)
i (95, 7)
= (95, 9)
text (95, 11)
. (95, 15)
Length (95, 16)
then (95, 23)
i (96, 6)
else (97, 4)
if (97, 9)
text (97, 12)
. (97, 16)
[ (97, 17)
i (97, 18)
] (97, 19)
= (97, 21)
'?' (97, 23)
then (97, 28)
i (98, 6)
+ (98, 8)
1 (98, 10)
else (99, 4)
go (100, 6)
( (100, 9)
i (100, 10)
+ (100, 12)
1 (100, 14)
) (100, 15)
acc (101, 2)
, (101, 5)
text (101, 7)
, (101, 11)
go (101, 13)
i (101, 16)
let (103, 0)
scanPun (103, 4)
( (103, 12)
acc (103, 13)
: (103, 16)
ScanAcc (103, 18)
, (103, 25)
text (103, 27)
: (103, 31)
string (103, 33)
, (103, 39)
i (103, 41)
: (103, 42)
int (103, 44)
) (103, 47)
= (103, 49)
assert (104, 2)
( (104, 9)
text (104, 10)
. (104, 14)
[ (104, 15)
i (104, 16)
] (104, 17)
|> (104, 19)
charIsPun (104, 22)
) (104, 31)
let (105, 2)
endIndex (105, 6)
= (105, 15)
i (105, 17)
+ (105, 19)
1 (105, 21)
( (106, 2)
TokenKind (106, 3)
. (106, 12)
Pun (106, 13)
, (106, 16)
i (106, 18)
, (106, 19)
endIndex (106, 21)
) (106, 29)
:: (106, 31)
acc (106, 34)
, (106, 37)
text (106, 39)
, (106, 43)
endIndex (106, 45)
let (108, 0)
scanOp (108, 4)
( (108, 11)
acc (108, 12)
: (108, 15)
ScanAcc (108, 17)
, (108, 24)
text (108, 26)
: (108, 30)
string (108, 32)
, (108, 38)
i (108, 40)
: (108, 41)
int (108, 43)
) (108, 46)
= (108, 48)
assert (109, 2)
( (109, 9)
text (109, 10)
. (109, 14)
[ (109, 15)
i (109, 16)
] (109, 17)
|> (109, 19)
charIsOp (109, 22)
) (109, 30)
let (110, 2)
rec (110, 6)
go (110, 10)
i (110, 13)
= (110, 15)
if (111, 4)
i (111, 7)
< (111, 9)
text (111, 11)
. (111, 15)
Length (111, 16)
&& (111, 23)
text (111, 26)
. (111, 30)
[ (111, 31)
i (111, 32)
] (111, 33)
|> (111, 35)
charIsOp (111, 38)
then (111, 47)
go (112, 6)
( (112, 9)
i (112, 10)
+ (112, 12)
1 (112, 14)
) (112, 15)
else (113, 4)
i (114, 6)
let (115, 2)
endIndex (115, 6)
= (115, 15)
go (115, 17)
i (115, 20)
( (116, 2)
TokenKind (116, 3)
. (116, 12)
Op (116, 13)
, (116, 15)
i (116, 17)
, (116, 18)
endIndex (116, 20)
) (116, 28)
:: (116, 30)
acc (116, 33)
, (116, 36)
text (116, 38)
, (116, 42)
endIndex (116, 44)
let (118, 0)
scanIdent (118, 4)
( (118, 14)
acc (118, 15)
: (118, 18)
ScanAcc (118, 20)
, (118, 27)
text (118, 29)
: (118, 33)
string (118, 35)
, (118, 41)
i (118, 43)
: (118, 44)
int (118, 46)
) (118, 49)
= (118, 51)
assert (119, 2)
( (119, 9)
text (119, 10)
. (119, 14)
[ (119, 15)
i (119, 16)
] (119, 17)
|> (119, 19)
charIsIdent (119, 22)
&& (119, 34)
text (119, 37)
. (119, 41)
[ (119, 42)
i (119, 43)
] (119, 44)
|> (119, 46)
charIsDigit (119, 49)
|> (119, 61)
not (119, 64)
) (119, 67)
let (120, 2)
rec (120, 6)
go (120, 10)
i (120, 13)
= (120, 15)
if (121, 4)
i (121, 7)
< (121, 9)
text (121, 11)
. (121, 15)
Length (121, 16)
&& (121, 23)
text (121, 26)
. (121, 30)
[ (121, 31)
i (121, 32)
] (121, 33)
|> (121, 35)
charIsIdent (121, 38)
then (121, 50)
go (122, 6)
( (122, 9)
i (122, 10)
+ (122, 12)
1 (122, 14)
) (122, 15)
else (123, 4)
i (124, 6)
let (125, 2)
endIndex (125, 6)
= (125, 15)
go (125, 17)
i (125, 20)
( (126, 2)
TokenKind (126, 3)
. (126, 12)
Ident (126, 13)
, (126, 18)
i (126, 20)
, (126, 21)
endIndex (126, 23)
) (126, 31)
:: (126, 33)
acc (126, 36)
, (126, 39)
text (126, 41)
, (126, 45)
endIndex (126, 47)
let (128, 0)
scanIntLit (128, 4)
( (128, 15)
acc (128, 16)
: (128, 19)
ScanAcc (128, 21)
, (128, 28)
text (128, 30)
: (128, 34)
string (128, 36)
, (128, 42)
i (128, 44)
: (128, 45)
int (128, 47)
) (128, 50)
= (128, 52)
assert (129, 2)
( (129, 9)
text (129, 10)
. (129, 14)
[ (129, 15)
i (129, 16)
] (129, 17)
|> (129, 19)
charIsDigit (129, 22)
) (129, 33)
let (130, 2)
rec (130, 6)
go (130, 10)
i (130, 13)
= (130, 15)
if (131, 4)
i (131, 7)
< (131, 9)
text (131, 11)
. (131, 15)
Length (131, 16)
&& (131, 23)
text (131, 26)
. (131, 30)
[ (131, 31)
i (131, 32)
] (131, 33)
|> (131, 35)
charIsDigit (131, 38)
then (131, 50)
go (132, 6)
( (132, 9)
i (132, 10)
+ (132, 12)
1 (132, 14)
) (132, 15)
else (133, 4)
i (134, 6)
let (135, 2)
endIndex (135, 6)
= (135, 15)
go (135, 17)
i (135, 20)
( (136, 2)
TokenKind (136, 3)
. (136, 12)
IntLit (136, 13)
, (136, 19)
i (136, 21)
, (136, 22)
endIndex (136, 24)
) (136, 32)
:: (136, 34)
acc (136, 37)
, (136, 40)
text (136, 42)
, (136, 46)
endIndex (136, 48)
let (138, 0)
scanCharLit (138, 4)
( (138, 16)
acc (138, 17)
: (138, 20)
ScanAcc (138, 22)
, (138, 29)
text (138, 31)
: (138, 35)
string (138, 37)
, (138, 43)
i (138, 45)
: (138, 46)
int (138, 48)
) (138, 51)
= (138, 53)
assert (139, 2)
( (139, 9)
text (139, 10)
. (139, 14)
[ (139, 15)
i (139, 16)
] (139, 17)
= (139, 19)
'?' (139, 21)
) (139, 25)
let (140, 2)
rec (140, 6)
go (140, 10)
i (140, 13)
= (140, 15)
if (141, 4)
i (141, 7)
+ (141, 9)
1 (141, 11)
< (141, 13)
text (141, 15)
. (141, 19)
Length (141, 20)
&& (141, 27)
text (141, 30)
. (141, 34)
[ (141, 35)
i (141, 36)
] (141, 37)
= (141, 39)
'?' (141, 41)
then (141, 46)
go (143, 6)
( (143, 9)
i (143, 10)
+ (143, 12)
2 (143, 14)
) (143, 15)
else (144, 4)
if (144, 9)
i (144, 12)
< (144, 14)
text (144, 16)
. (144, 20)
Length (144, 21)
&& (144, 28)
text (144, 31)
. (144, 35)
[ (144, 36)
i (144, 37)
] (144, 38)
= (144, 40)
'?' (144, 42)
then (144, 47)
TokenKind (146, 6)
. (146, 15)
CharLit (146, 16)
, (146, 23)
i (146, 25)
+ (146, 27)
1 (146, 29)
else (147, 4)
if (147, 9)
i (147, 12)
< (147, 14)
text (147, 16)
. (147, 20)
Length (147, 21)
&& (147, 28)
text (147, 31)
. (147, 35)
[ (147, 36)
i (147, 37)
] (147, 38)
<> (147, 40)
'?' (147, 43)
then (147, 48)
go (149, 6)
( (149, 9)
i (149, 10)
+ (149, 12)
1 (149, 14)
) (149, 15)
else (150, 4)
assert (152, 6)
( (152, 13)
i (152, 14)
= (152, 16)
text (152, 18)
. (152, 22)
Length (152, 23)
|| (152, 30)
text (152, 33)
. (152, 37)
[ (152, 38)
i (152, 39)
] (152, 40)
= (152, 42)
'?' (152, 44)
) (152, 48)
TokenKind (153, 6)
. (153, 15)
Error (153, 16)
, (153, 21)
i (153, 23)
let (154, 2)
kind (154, 6)
, (154, 10)
endIndex (154, 12)
= (154, 21)
go (154, 23)
( (154, 26)
i (154, 27)
+ (154, 29)
1 (154, 31)
) (154, 32)
( (155, 2)
kind (155, 3)
, (155, 7)
i (155, 9)
, (155, 10)
endIndex (155, 12)
) (155, 20)
:: (155, 22)
acc (155, 25)
, (155, 28)
text (155, 30)
, (155, 34)
endIndex (155, 36)
let (157, 0)
scanStrLit (157, 4)
( (157, 15)
acc (157, 16)
: (157, 19)
ScanAcc (157, 21)
, (157, 28)
text (157, 30)
: (157, 34)
string (157, 36)
, (157, 42)
i (157, 44)
: (157, 45)
int (157, 47)
) (157, 50)
= (157, 52)
assert (158, 2)
( (158, 9)
text (158, 10)
. (158, 14)
[ (158, 15)
i (158, 16)
] (158, 17)
= (158, 19)
'?' (158, 21)
) (158, 24)
let (159, 2)
rec (159, 6)
go (159, 10)
i (159, 13)
= (159, 15)
if (160, 4)
i (160, 7)
+ (160, 9)
1 (160, 11)
< (160, 13)
text (160, 15)
. (160, 19)
Length (160, 20)
&& (160, 27)
text (160, 30)
. (160, 34)
[ (160, 35)
i (160, 36)
] (160, 37)
= (160, 39)
'?' (160, 41)
then (160, 46)
go (162, 6)
( (162, 9)
i (162, 10)
+ (162, 12)
2 (162, 14)
) (162, 15)
else (163, 4)
if (163, 9)
i (163, 12)
< (163, 14)
text (163, 16)
. (163, 20)
Length (163, 21)
&& (163, 28)
text (163, 31)
. (163, 35)
[ (163, 36)
i (163, 37)
] (163, 38)
= (163, 40)
'?' (163, 42)
then (163, 46)
TokenKind (165, 6)
. (165, 15)
StrLit (165, 16)
, (165, 22)
i (165, 24)
+ (165, 26)
1 (165, 28)
else (166, 4)
if (166, 9)
i (166, 12)
< (166, 14)
text (166, 16)
. (166, 20)
Length (166, 21)
&& (166, 28)
text (166, 31)
. (166, 35)
[ (166, 36)
i (166, 37)
] (166, 38)
<> (166, 40)
'?' (166, 43)
then (166, 48)
go (168, 6)
( (168, 9)
i (168, 10)
+ (168, 12)
1 (168, 14)
) (168, 15)
else (169, 4)
assert (171, 6)
( (171, 13)
i (171, 14)
= (171, 16)
text (171, 18)
. (171, 22)
Length (171, 23)
|| (171, 30)
text (171, 33)
. (171, 37)
[ (171, 38)
i (171, 39)
] (171, 40)
= (171, 42)
'?' (171, 44)
) (171, 48)
TokenKind (172, 6)
. (172, 15)
Error (172, 16)
, (172, 21)
i (172, 23)
let (173, 2)
kind (173, 6)
, (173, 10)
endIndex (173, 12)
= (173, 21)
go (173, 23)
( (173, 26)
i (173, 27)
+ (173, 29)
1 (173, 31)
) (173, 32)
( (174, 2)
kind (174, 3)
, (174, 7)
i (174, 9)
, (174, 10)
endIndex (174, 12)
) (174, 20)
:: (174, 22)
acc (174, 25)
, (174, 28)
text (174, 30)
, (174, 34)
endIndex (174, 36)
let (176, 0)
scanRoot (176, 4)
( (176, 13)
text (176, 14)
: (176, 18)
string (176, 20)
) (176, 26)
= (176, 28)
let (177, 2)
rec (177, 6)
go (177, 10)
( (177, 13)
acc (177, 14)
, (177, 17)
text (177, 19)
, (177, 23)
i (177, 25)
) (177, 26)
= (177, 28)
let (178, 4)
t (178, 8)
= (178, 10)
acc (178, 12)
, (178, 15)
text (178, 17)
, (178, 21)
i (178, 23)
let (179, 4)
follow (179, 8)
prefix (179, 15)
= (179, 22)
text (179, 24)
|> (179, 29)
strNthStartsWith (179, 32)
i (179, 49)
prefix (179, 51)
if (181, 4)
i (181, 7)
>= (181, 9)
text (181, 12)
. (181, 16)
Length (181, 17)
then (181, 24)
text (182, 6)
, (182, 10)
acc (182, 12)
|> (182, 16)
listRev (182, 19)
else (183, 4)
if (183, 9)
follow (183, 12)
".." (183, 19)
|| (183, 24)
follow (183, 27)
".." (183, 34)
then (183, 39)
t (185, 6)
|> (185, 8)
scanLine (185, 11)
|> (185, 20)
go (185, 23)
else (186, 4)
if (186, 9)
text (186, 12)
. (186, 16)
[ (186, 17)
i (186, 18)
] (186, 19)
|> (186, 21)
charIsSpace (186, 24)
then (186, 36)
t (187, 6)
|> (187, 8)
scanSpace (187, 11)
|> (187, 21)
go (187, 24)
else (188, 4)
if (188, 9)
text (188, 12)
. (188, 16)
[ (188, 17)
i (188, 18)
] (188, 19)
|> (188, 21)
charIsOp (188, 24)
then (188, 33)
t (189, 6)
|> (189, 8)
scanOp (189, 11)
|> (189, 18)
go (189, 21)
else (190, 4)
if (190, 9)
text (190, 12)
. (190, 16)
[ (190, 17)
i (190, 18)
] (190, 19)
|> (190, 21)
charIsDigit (190, 24)
then (190, 36)
t (191, 6)
|> (191, 8)
scanIntLit (191, 11)
|> (191, 22)
go (191, 25)
else (192, 4)
if (192, 9)
text (192, 12)
. (192, 16)
[ (192, 17)
i (192, 18)
] (192, 19)
|> (192, 21)
charIsIdent (192, 24)
then (192, 36)
t (193, 6)
|> (193, 8)
scanIdent (193, 11)
|> (193, 21)
go (193, 24)
else (194, 4)
if (194, 9)
text (194, 12)
. (194, 16)
[ (194, 17)
i (194, 18)
] (194, 19)
= (194, 21)
'?' (194, 23)
then (194, 28)
t (195, 6)
|> (195, 8)
scanCharLit (195, 11)
|> (195, 23)
go (195, 26)
else (196, 4)
if (196, 9)
text (196, 12)
. (196, 16)
[ (196, 17)
i (196, 18)
] (196, 19)
= (196, 21)
'?' (196, 23)
then (196, 27)
t (197, 6)
|> (197, 8)
scanStrLit (197, 11)
|> (197, 22)
go (197, 25)
else (198, 4)
if (198, 9)
text (198, 12)
. (198, 16)
[ (198, 17)
i (198, 18)
] (198, 19)
|> (198, 21)
charIsPun (198, 24)
then (198, 34)
t (199, 6)
|> (199, 8)
scanPun (199, 11)
|> (199, 19)
go (199, 22)
else (200, 4)
t (201, 6)
|> (201, 8)
scanError (201, 11)
|> (201, 21)
go (201, 24)
go (202, 2)
( (202, 5)
[ (202, 6)
] (202, 7)
, (202, 8)
text (202, 10)
, (202, 14)
0 (202, 16)
) (202, 17)
let (212, 0)
advanceTextPos (212, 4)
( (212, 19)
y (212, 20)
, (212, 21)
x (212, 23)
) (212, 24)
( (212, 26)
text (212, 27)
: (212, 31)
string (212, 33)
) (212, 39)
( (212, 41)
l (212, 42)
: (212, 43)
int (212, 45)
) (212, 48)
( (212, 50)
r (212, 51)
: (212, 52)
int (212, 54)
) (212, 57)
= (212, 59)
let (213, 2)
rec (213, 6)
go (213, 10)
y (213, 13)
x (213, 15)
i (213, 17)
= (213, 19)
if (214, 4)
i (214, 7)
= (214, 9)
r (214, 11)
then (214, 13)
y (215, 6)
, (215, 7)
x (215, 9)
else (216, 4)
if (216, 9)
text (216, 12)
. (216, 16)
[ (216, 17)
i (216, 18)
] (216, 19)
= (216, 21)
'?' (216, 23)
then (216, 28)
go (217, 6)
( (217, 9)
y (217, 10)
+ (217, 12)
1 (217, 14)
) (217, 15)
0 (217, 17)
( (217, 19)
i (217, 20)
+ (217, 22)
1 (217, 24)
) (217, 25)
else (218, 4)
go (219, 6)
y (219, 9)
( (219, 11)
x (219, 12)
+ (219, 14)
1 (219, 16)
) (219, 17)
( (219, 19)
i (219, 20)
+ (219, 22)
1 (219, 24)
) (219, 25)
go (220, 2)
y (220, 5)
x (220, 7)
l (220, 9)
let (222, 0)
tokenFromIdent (222, 4)
( (222, 19)
text (222, 20)
: (222, 24)
string (222, 26)
) (222, 32)
l (222, 34)
r (222, 36)
: (222, 37)
Token (222, 39)
= (222, 45)
match (223, 2)
text (223, 8)
|> (223, 13)
strSlice (223, 16)
l (223, 25)
r (223, 27)
with (223, 29)
| (224, 2)
".." (224, 4)
-> (224, 11)
Token (225, 4)
. (225, 9)
Bool (225, 10)
true (225, 15)
| (226, 2)
".." (226, 4)
-> (226, 12)
Token (227, 4)
. (227, 9)
Bool (227, 10)
false (227, 15)
| (228, 2)
".." (228, 4)
-> (228, 9)
Token (229, 4)
. (229, 9)
Do (229, 10)
| (230, 2)
".." (230, 4)
-> (230, 10)
Token (231, 4)
. (231, 9)
Let (231, 10)
| (232, 2)
".." (232, 4)
-> (232, 9)
Token (233, 4)
. (233, 9)
If (233, 10)
| (234, 2)
".." (234, 4)
-> (234, 11)
Token (235, 4)
. (235, 9)
Then (235, 10)
| (236, 2)
".." (236, 4)
-> (236, 11)
Token (237, 4)
. (237, 9)
Else (237, 10)
| (238, 2)
".." (238, 4)
-> (238, 12)
Token (239, 4)
. (239, 9)
Match (239, 10)
| (240, 2)
".." (240, 4)
-> (240, 11)
Token (241, 4)
. (241, 9)
With (241, 10)
| (242, 2)
".." (242, 4)
-> (242, 9)
Token (243, 4)
. (243, 9)
As (243, 10)
| (244, 2)
".." (244, 4)
-> (244, 11)
Token (245, 4)
. (245, 9)
When (245, 10)
| (246, 2)
".." (246, 4)
-> (246, 10)
Token (247, 4)
. (247, 9)
Rec (247, 10)
| (248, 2)
".." (248, 4)
-> (248, 14)
Token (249, 4)
. (249, 9)
Private (249, 10)
| (250, 2)
".." (250, 4)
-> (250, 15)
Token (251, 4)
. (251, 9)
Internal (251, 10)
| (252, 2)
".." (252, 4)
-> (252, 13)
Token (253, 4)
. (253, 9)
Public (253, 10)
| (254, 2)
".." (254, 4)
-> (254, 13)
Token (255, 4)
. (255, 9)
Module (255, 10)
| (256, 2)
".." (256, 4)
-> (256, 16)
Token (257, 4)
. (257, 9)
Namespace (257, 10)
| (258, 2)
".." (258, 4)
-> (258, 11)
Token (259, 4)
. (259, 9)
Open (259, 10)
| (260, 2)
".." (260, 4)
-> (260, 11)
Token (261, 4)
. (261, 9)
Type (261, 10)
| (262, 2)
".." (262, 4)
-> (262, 9)
Token (263, 4)
. (263, 9)
Of (263, 10)
| (264, 2)
".." (264, 4)
-> (264, 10)
Token (265, 4)
. (265, 9)
Fun (265, 10)
| (266, 2)
".." (266, 4)
-> (266, 9)
Token (267, 4)
. (267, 9)
In (267, 10)
| (268, 2)
s (268, 4)
-> (268, 6)
Token (269, 4)
. (269, 9)
Ident (269, 10)
s (269, 16)
let (271, 0)
tokenFromOp (271, 4)
( (271, 16)
text (271, 17)
: (271, 21)
string (271, 23)
) (271, 29)
l (271, 31)
r (271, 33)
: (271, 34)
Token (271, 36)
= (271, 42)
match (272, 2)
text (272, 8)
|> (272, 13)
strSlice (272, 16)
l (272, 25)
r (272, 27)
with (272, 29)
| (273, 2)
".." (273, 4)
-> (273, 8)
Token (274, 4)
. (274, 9)
Colon (274, 10)
| (275, 2)
".." (275, 4)
-> (275, 8)
Token (276, 4)
. (276, 9)
Dot (276, 10)
| (277, 2)
".." (277, 4)
-> (277, 8)
Token (278, 4)
. (278, 9)
Pipe (278, 10)
| (279, 2)
".." (279, 4)
-> (279, 9)
Token (280, 4)
. (280, 9)
Arrow (280, 10)
| (281, 2)
s (281, 4)
-> (281, 6)
Token (282, 4)
. (282, 9)
Punct (282, 10)
s (282, 16)
let (284, 0)
tokenFromPun (284, 4)
( (284, 17)
text (284, 18)
: (284, 22)
string (284, 24)
) (284, 30)
( (284, 32)
l (284, 33)
: (284, 34)
int (284, 36)
) (284, 39)
r (284, 41)
= (284, 43)
assert (285, 2)
( (285, 9)
r (285, 10)
- (285, 12)
l (285, 14)
= (285, 16)
1 (285, 18)
) (285, 19)
match (286, 2)
text (286, 8)
. (286, 12)
[ (286, 13)
l (286, 14)
] (286, 15)
with (286, 17)
| (287, 2)
'?' (287, 4)
-> (287, 8)
Token (288, 4)
. (288, 9)
ParenL (288, 10)
| (289, 2)
'?' (289, 4)
-> (289, 8)
Token (290, 4)
. (290, 9)
ParenR (290, 10)
| (291, 2)
'?' (291, 4)
-> (291, 8)
Token (292, 4)
. (292, 9)
BracketL (292, 10)
| (293, 2)
'?' (293, 4)
-> (293, 8)
Token (294, 4)
. (294, 9)
BracketR (294, 10)
| (295, 2)
_ (295, 4)
-> (295, 6)
failwith (296, 4)
".." (296, 13)
let (298, 0)
tokenFromIntLit (298, 4)
( (298, 20)
text (298, 21)
: (298, 25)
string (298, 27)
) (298, 33)
l (298, 35)
r (298, 37)
: (298, 38)
Token (298, 40)
= (298, 46)
let (299, 2)
value (299, 6)
= (299, 12)
text (299, 14)
|> (299, 19)
strSlice (299, 22)
l (299, 31)
r (299, 33)
|> (299, 35)
int (299, 38)
Token (300, 2)
. (300, 7)
Int (300, 8)
value (300, 12)
let (302, 0)
tokenFromCharLit (302, 4)
( (302, 21)
text (302, 22)
: (302, 26)
string (302, 28)
) (302, 34)
l (302, 36)
r (302, 38)
: (302, 39)
Token (302, 41)
= (302, 47)
assert (303, 2)
( (303, 9)
l (303, 10)
+ (303, 12)
2 (303, 14)
<= (303, 16)
r (303, 19)
&& (303, 21)
text (303, 24)
. (303, 28)
[ (303, 29)
l (303, 30)
] (303, 31)
= (303, 33)
'?' (303, 35)
&& (303, 40)
text (303, 43)
. (303, 47)
[ (303, 48)
r (303, 49)
- (303, 51)
1 (303, 53)
] (303, 54)
= (303, 56)
'?' (303, 58)
) (303, 62)
let (306, 2)
i (306, 6)
= (306, 8)
l (306, 10)
+ (306, 12)
1 (306, 14)
let (307, 2)
value (307, 6)
= (307, 12)
match (308, 4)
text (308, 10)
. (308, 14)
[ (308, 15)
i (308, 16)
] (308, 17)
with (308, 19)
| (309, 4)
'?' (309, 6)
-> (309, 11)
match (310, 6)
text (310, 12)
. (310, 16)
[ (310, 17)
i (310, 18)
+ (310, 20)
1 (310, 22)
] (310, 23)
with (310, 25)
| (311, 6)
'?' (311, 8)
-> (311, 12)
charNull (312, 8)
| (313, 6)
'?' (313, 8)
-> (313, 12)
'?' (314, 8)
| (315, 6)
'?' (315, 8)
-> (315, 12)
'?' (316, 8)
| (317, 6)
'?' (317, 8)
-> (317, 12)
'?' (318, 8)
| (319, 6)
c (319, 8)
-> (319, 10)
c (320, 8)
| (321, 4)
c (321, 6)
-> (321, 8)
c (322, 6)
Token (324, 2)
. (324, 7)
Char (324, 8)
value (324, 13)
let (326, 0)
tokenFromStrLit (326, 4)
( (326, 20)
text (326, 21)
: (326, 25)
string (326, 27)
) (326, 33)
l (326, 35)
r (326, 37)
: (326, 38)
Token (326, 40)
= (326, 46)
assert (327, 2)
( (327, 9)
l (327, 10)
+ (327, 12)
2 (327, 14)
<= (327, 16)
r (327, 19)
&& (327, 21)
text (327, 24)
. (327, 28)
[ (327, 29)
l (327, 30)
] (327, 31)
= (327, 33)
'?' (327, 35)
&& (327, 39)
text (327, 42)
. (327, 46)
[ (327, 47)
r (327, 48)
- (327, 50)
1 (327, 52)
] (327, 53)
= (327, 55)
'?' (327, 57)
) (327, 60)
let (331, 2)
rec (331, 6)
go (331, 10)
acc (331, 13)
i (331, 17)
= (331, 19)
let (333, 4)
rec (333, 8)
next (333, 12)
i (333, 17)
= (333, 19)
if (334, 6)
i (334, 9)
= (334, 11)
r (334, 13)
- (334, 15)
1 (334, 17)
|| (334, 19)
text (334, 22)
. (334, 26)
[ (334, 27)
i (334, 28)
] (334, 29)
= (334, 31)
'?' (334, 33)
then (334, 38)
i (335, 8)
else (336, 6)
next (337, 8)
( (337, 13)
i (337, 14)
+ (337, 16)
1 (337, 18)
) (337, 19)
let (338, 4)
endIndex (338, 8)
= (338, 17)
next (338, 19)
i (338, 24)
let (339, 4)
acc (339, 8)
= (339, 12)
( (339, 14)
text (339, 15)
|> (339, 20)
strSlice (339, 23)
i (339, 32)
endIndex (339, 34)
) (339, 42)
:: (339, 44)
acc (339, 47)
let (340, 4)
i (340, 8)
= (340, 10)
endIndex (340, 12)
if (343, 4)
i (343, 7)
= (343, 9)
r (343, 11)
- (343, 13)
1 (343, 15)
then (343, 17)
acc (344, 6)
|> (344, 10)
listRev (344, 13)
|> (344, 21)
strConcat (344, 24)
else (345, 4)
assert (346, 6)
( (346, 13)
text (346, 14)
. (346, 18)
[ (346, 19)
i (346, 20)
] (346, 21)
= (346, 23)
'?' (346, 25)
) (346, 29)
match (347, 6)
text (347, 12)
. (347, 16)
[ (347, 17)
i (347, 18)
+ (347, 20)
1 (347, 22)
] (347, 23)
with (347, 25)
| (348, 6)
'?' (348, 8)
-> (348, 12)
go (349, 8)
( (349, 11)
".." (349, 12)
:: (349, 21)
acc (349, 24)
) (349, 27)
( (349, 29)
i (349, 30)
+ (349, 32)
6 (349, 34)
) (349, 35)
| (350, 6)
'?' (350, 8)
-> (350, 12)
go (351, 8)
( (351, 11)
".." (351, 12)
:: (351, 17)
acc (351, 20)
) (351, 23)
( (351, 25)
i (351, 26)
+ (351, 28)
2 (351, 30)
) (351, 31)
| (352, 6)
'?' (352, 8)
-> (352, 12)
go (353, 8)
( (353, 11)
".." (353, 12)
:: (353, 17)
acc (353, 20)
) (353, 23)
( (353, 25)
i (353, 26)
+ (353, 28)
2 (353, 30)
) (353, 31)
| (354, 6)
'?' (354, 8)
-> (354, 12)
go (355, 8)
( (355, 11)
".." (355, 12)
:: (355, 17)
acc (355, 20)
) (355, 23)
( (355, 25)
i (355, 26)
+ (355, 28)
2 (355, 30)
) (355, 31)
| (356, 6)
_ (356, 8)
-> (356, 10)
go (357, 8)
( (357, 11)
( (357, 12)
text (357, 13)
|> (357, 18)
strSlice (357, 21)
( (357, 30)
i (357, 31)
+ (357, 33)
1 (357, 35)
) (357, 36)
( (357, 38)
i (357, 39)
+ (357, 41)
2 (357, 43)
) (357, 44)
) (357, 45)
:: (357, 47)
acc (357, 50)
) (357, 53)
( (357, 55)
i (357, 56)
+ (357, 58)
2 (357, 60)
) (357, 61)
let (358, 2)
value (358, 6)
= (358, 12)
go (358, 14)
[ (358, 17)
] (358, 18)
( (358, 20)
l (358, 21)
+ (358, 23)
1 (358, 25)
) (358, 26)
Token (360, 2)
. (360, 7)
Str (360, 8)
value (360, 12)
let (362, 0)
recognizeToken (362, 4)
kind (362, 19)
( (362, 24)
text (362, 25)
: (362, 29)
string (362, 31)
) (362, 37)
l (362, 39)
r (362, 41)
= (362, 43)
match (363, 2)
kind (363, 8)
with (363, 13)
| (364, 2)
TokenKind (364, 4)
. (364, 13)
Error (364, 14)
-> (364, 20)
failwith (365, 4)
".." (365, 13)
| (367, 2)
TokenKind (367, 4)
. (367, 13)
Op (367, 14)
-> (367, 17)
tokenFromOp (368, 4)
text (368, 16)
l (368, 21)
r (368, 23)
| (370, 2)
TokenKind (370, 4)
. (370, 13)
Pun (370, 14)
-> (370, 18)
tokenFromPun (371, 4)
text (371, 17)
l (371, 22)
r (371, 24)
| (373, 2)
TokenKind (373, 4)
. (373, 13)
IntLit (373, 14)
-> (373, 21)
tokenFromIntLit (374, 4)
text (374, 20)
l (374, 25)
r (374, 27)
| (376, 2)
TokenKind (376, 4)
. (376, 13)
CharLit (376, 14)
-> (376, 22)
tokenFromCharLit (377, 4)
text (377, 21)
l (377, 26)
r (377, 28)
| (379, 2)
TokenKind (379, 4)
. (379, 13)
StrLit (379, 14)
-> (379, 21)
tokenFromStrLit (380, 4)
text (380, 20)
l (380, 25)
r (380, 27)
| (382, 2)
TokenKind (382, 4)
. (382, 13)
Ident (382, 14)
-> (382, 20)
tokenFromIdent (383, 4)
text (383, 19)
l (383, 24)
r (383, 26)
let (385, 0)
recognizeTokens (385, 4)
( (385, 20)
text (385, 21)
, (385, 25)
tokens (385, 27)
) (385, 33)
= (385, 35)
let (387, 2)
rec (387, 6)
go (387, 10)
acc (387, 13)
y (387, 17)
x (387, 19)
last (387, 21)
tokens (387, 26)
= (387, 33)
match (388, 4)
tokens (388, 10)
with (388, 17)
| (389, 4)
[ (389, 6)
] (389, 7)
-> (389, 9)
acc (390, 6)
|> (390, 10)
listRev (390, 13)
| (391, 4)
( (391, 6)
kind (391, 7)
, (391, 11)
l (391, 13)
, (391, 14)
r (391, 16)
) (391, 17)
:: (391, 19)
tokens (391, 22)
-> (391, 29)
let (393, 6)
y (393, 10)
, (393, 11)
x (393, 13)
= (393, 15)
advanceTextPos (393, 17)
( (393, 32)
y (393, 33)
, (393, 34)
x (393, 36)
) (393, 37)
text (393, 39)
last (393, 44)
l (393, 49)
let (396, 6)
token (396, 10)
= (396, 16)
recognizeToken (396, 18)
kind (396, 33)
text (396, 38)
l (396, 43)
r (396, 45)
let (397, 6)
acc (397, 10)
= (397, 14)
( (397, 16)
token (397, 17)
, (397, 22)
( (397, 24)
y (397, 25)
, (397, 26)
x (397, 28)
) (397, 29)
) (397, 30)
:: (397, 32)
acc (397, 35)
let (400, 6)
y (400, 10)
, (400, 11)
x (400, 13)
= (400, 15)
advanceTextPos (400, 17)
( (400, 32)
y (400, 33)
, (400, 34)
x (400, 36)
) (400, 37)
text (400, 39)
l (400, 44)
r (400, 46)
go (401, 6)
acc (401, 9)
y (401, 13)
x (401, 15)
r (401, 17)
tokens (401, 19)
go (402, 2)
[ (402, 5)
] (402, 6)
0 (402, 8)
0 (402, 10)
0 (402, 12)
tokens (402, 14)
let (404, 0)
tokenize (404, 4)
( (404, 13)
text (404, 14)
: (404, 18)
string (404, 20)
) (404, 26)
: (404, 27)
( (404, 29)
Token (404, 30)
* (404, 36)
Loc (404, 38)
) (404, 41)
list (404, 43)
= (404, 48)
text (405, 2)
|> (405, 7)
scanRoot (405, 10)
|> (405, 19)
recognizeTokens (405, 22)
$? = 0
