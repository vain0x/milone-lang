FILE MiloneLang/Lexing.fs
module (29, 0)
rec (29, 7)
MiloneLang (29, 11)
. (29, 21)
Lexing (29, 22)
open (31, 0)
MiloneLang (31, 5)
. (31, 15)
Types (31, 16)
open (32, 0)
MiloneLang (32, 5)
. (32, 15)
Helpers (32, 16)
type (35, 0)
TokenizeCtx (35, 5)
= (35, 17)
string (35, 19)
* (35, 26)
int (35, 28)
* (35, 32)
Loc (35, 34)
* (35, 38)
( (35, 40)
Token (35, 41)
* (35, 47)
Loc (35, 49)
) (35, 52)
list (35, 54)
let (39, 0)
locShift (39, 4)
( (39, 13)
text (39, 14)
: (39, 18)
string (39, 20)
) (39, 26)
( (39, 28)
l (39, 29)
: (39, 30)
int (39, 32)
) (39, 35)
( (39, 37)
r (39, 38)
: (39, 39)
int (39, 41)
) (39, 44)
( (39, 46)
( (39, 47)
y (39, 48)
, (39, 49)
x (39, 51)
) (39, 52)
: (39, 53)
Loc (39, 55)
) (39, 58)
= (39, 60)
assert (40, 2)
( (40, 9)
0 (40, 10)
<= (40, 12)
l (40, 15)
&& (40, 17)
l (40, 20)
<= (40, 22)
r (40, 25)
&& (40, 27)
r (40, 30)
<= (40, 32)
text (40, 35)
. (40, 39)
Length (40, 40)
) (40, 46)
let (41, 2)
rec (41, 6)
go (41, 10)
y (41, 13)
x (41, 15)
i (41, 17)
= (41, 19)
if (42, 4)
i (42, 7)
= (42, 9)
r (42, 11)
then (42, 13)
y (43, 6)
, (43, 7)
x (43, 9)
else (44, 4)
if (44, 9)
text (44, 12)
. (44, 16)
[ (44, 17)
i (44, 18)
] (44, 19)
= (44, 21)
'\n' (44, 23)
then (44, 28)
go (45, 6)
( (45, 9)
y (45, 10)
+ (45, 12)
1 (45, 14)
) (45, 15)
0 (45, 17)
( (45, 19)
i (45, 20)
+ (45, 22)
1 (45, 24)
) (45, 25)
else (46, 4)
go (47, 6)
y (47, 9)
( (47, 11)
x (47, 12)
+ (47, 14)
1 (47, 16)
) (47, 17)
( (47, 19)
i (47, 20)
+ (47, 22)
1 (47, 24)
) (47, 25)
go (48, 2)
y (48, 5)
x (48, 7)
l (48, 9)
let (54, 0)
charNull (54, 4)
: (54, 12)
char (54, 14)
= (54, 19)
char (54, 21)
0 (54, 26)
let (56, 0)
charIsIdent (56, 4)
( (56, 16)
c (56, 17)
: (56, 18)
char (56, 20)
) (56, 24)
: (56, 25)
bool (56, 27)
= (56, 32)
c (57, 2)
= (57, 4)
'_' (57, 6)
|| (57, 10)
charIsDigit (57, 13)
c (57, 25)
|| (57, 27)
charIsAlpha (57, 30)
c (57, 42)
let (59, 0)
charIsOp (59, 4)
( (59, 13)
c (59, 14)
: (59, 15)
char (59, 17)
) (59, 21)
: (59, 22)
bool (59, 24)
= (59, 29)
c (60, 2)
= (60, 4)
'+' (60, 6)
|| (60, 10)
c (60, 13)
= (60, 15)
'-' (60, 17)
|| (60, 21)
c (60, 24)
= (60, 26)
'*' (60, 28)
|| (60, 32)
c (60, 35)
= (60, 37)
'/' (60, 39)
|| (60, 43)
c (60, 46)
= (60, 48)
'%' (60, 50)
|| (60, 54)
c (61, 2)
= (61, 4)
'=' (61, 6)
|| (61, 10)
c (61, 13)
= (61, 15)
'<' (61, 17)
|| (61, 21)
c (61, 24)
= (61, 26)
'>' (61, 28)
|| (61, 32)
c (61, 35)
= (61, 37)
'^' (61, 39)
|| (61, 43)
c (61, 46)
= (61, 48)
'&' (61, 50)
|| (61, 54)
c (62, 2)
= (62, 4)
'|' (62, 6)
|| (62, 10)
c (62, 13)
= (62, 15)
':' (62, 17)
|| (62, 21)
c (62, 24)
= (62, 26)
'@' (62, 28)
|| (62, 32)
c (62, 35)
= (62, 37)
';' (62, 39)
|| (62, 43)
c (62, 46)
= (62, 48)
'.' (62, 50)
let (64, 0)
charIsPun (64, 4)
( (64, 14)
c (64, 15)
: (64, 16)
char (64, 18)
) (64, 22)
: (64, 23)
bool (64, 25)
= (64, 30)
c (65, 2)
= (65, 4)
',' (65, 6)
|| (65, 10)
c (65, 13)
= (65, 15)
'(' (65, 17)
|| (65, 21)
c (65, 24)
= (65, 26)
')' (65, 28)
|| (65, 32)
c (65, 35)
= (65, 37)
'[' (65, 39)
|| (65, 43)
c (65, 46)
= (65, 48)
']' (65, 50)
let (72, 0)
strIsFollowedBy (72, 4)
( (72, 20)
i (72, 21)
: (72, 22)
int (72, 24)
) (72, 27)
( (72, 29)
prefix (72, 30)
: (72, 36)
string (72, 38)
) (72, 44)
( (72, 46)
s (72, 47)
: (72, 48)
string (72, 50)
) (72, 56)
: (72, 57)
bool (72, 59)
= (72, 64)
let (74, 2)
rec (74, 6)
go (74, 10)
pi (74, 13)
si (74, 16)
= (74, 19)
pi (75, 4)
= (75, 7)
prefix (75, 9)
. (75, 15)
Length (75, 16)
|| (75, 23)
( (75, 26)
si (76, 6)
< (76, 9)
s (76, 11)
. (76, 12)
Length (76, 13)
&& (77, 6)
prefix (77, 9)
. (77, 15)
[ (77, 16)
pi (77, 17)
] (77, 19)
= (77, 21)
s (77, 23)
. (77, 24)
[ (77, 25)
si (77, 26)
] (77, 28)
&& (78, 6)
go (78, 9)
( (78, 12)
pi (78, 13)
+ (78, 16)
1 (78, 18)
) (78, 19)
( (78, 21)
si (78, 22)
+ (78, 25)
1 (78, 27)
) (78, 28)
) (79, 4)
i (80, 2)
+ (80, 4)
prefix (80, 6)
. (80, 12)
Length (80, 13)
<= (80, 20)
s (80, 23)
. (80, 24)
Length (80, 25)
&& (80, 32)
go (80, 35)
0 (80, 38)
i (80, 40)
let (83, 0)
strIsFollowedByRawQuotes (83, 4)
( (83, 29)
i (83, 30)
: (83, 31)
int (83, 33)
) (83, 36)
( (83, 38)
s (83, 39)
: (83, 40)
string (83, 42)
) (83, 48)
: (83, 49)
bool (83, 51)
= (83, 56)
strIsFollowedBy (84, 2)
i (84, 18)
"\"\"\"" (84, 20)
s (84, 29)
let (90, 0)
scanError (90, 4)
( (90, 14)
_ (90, 15)
: (90, 16)
string (90, 18)
) (90, 24)
( (90, 26)
i (90, 27)
: (90, 28)
int (90, 30)
) (90, 33)
= (90, 35)
i (92, 2)
+ (92, 4)
1 (92, 6)
let (94, 0)
lookEof (94, 4)
( (94, 12)
text (94, 13)
: (94, 17)
string (94, 19)
) (94, 25)
( (94, 27)
i (94, 28)
: (94, 29)
int (94, 31)
) (94, 34)
= (94, 36)
i (95, 2)
>= (95, 4)
text (95, 7)
. (95, 11)
Length (95, 12)
let (98, 0)
lookSpace (98, 4)
( (98, 14)
text (98, 15)
: (98, 19)
string (98, 21)
) (98, 27)
( (98, 29)
i (98, 30)
: (98, 31)
int (98, 33)
) (98, 36)
= (98, 38)
text (99, 2)
. (99, 6)
[ (99, 7)
i (99, 8)
] (99, 9)
|> (99, 11)
charIsSpace (99, 14)
let (102, 0)
scanSpace (102, 4)
( (102, 14)
text (102, 15)
: (102, 19)
string (102, 21)
) (102, 27)
( (102, 29)
i (102, 30)
: (102, 31)
int (102, 33)
) (102, 36)
= (102, 38)
assert (103, 2)
( (103, 9)
lookSpace (103, 10)
text (103, 20)
i (103, 25)
) (103, 26)
let (104, 2)
rec (104, 6)
go (104, 10)
i (104, 13)
= (104, 15)
if (105, 4)
i (105, 7)
< (105, 9)
text (105, 11)
. (105, 15)
Length (105, 16)
&& (105, 23)
text (105, 26)
. (105, 30)
[ (105, 31)
i (105, 32)
] (105, 33)
|> (105, 35)
charIsSpace (105, 38)
then (105, 50)
go (106, 6)
( (106, 9)
i (106, 10)
+ (106, 12)
1 (106, 14)
) (106, 15)
else (107, 4)
i (108, 6)
go (109, 2)
i (109, 5)
let (111, 0)
lookComment (111, 4)
( (111, 16)
text (111, 17)
: (111, 21)
string (111, 23)
) (111, 29)
( (111, 31)
i (111, 32)
: (111, 33)
int (111, 35)
) (111, 38)
= (111, 40)
text (113, 2)
|> (113, 7)
strIsFollowedBy (113, 10)
i (113, 26)
"//" (113, 28)
|| (114, 2)
text (114, 5)
|> (114, 10)
strIsFollowedBy (114, 13)
i (114, 29)
"[<" (114, 31)
let (116, 0)
scanLine (116, 4)
( (116, 13)
text (116, 14)
: (116, 18)
string (116, 20)
) (116, 26)
( (116, 28)
i (116, 29)
: (116, 30)
int (116, 32)
) (116, 35)
= (116, 37)
assert (117, 2)
( (117, 9)
lookComment (117, 10)
text (117, 22)
i (117, 27)
) (117, 28)
let (118, 2)
rec (118, 6)
go (118, 10)
i (118, 13)
= (118, 15)
if (119, 4)
i (119, 7)
= (119, 9)
text (119, 11)
. (119, 15)
Length (119, 16)
then (119, 23)
i (120, 6)
else (121, 4)
if (121, 9)
text (121, 12)
. (121, 16)
[ (121, 17)
i (121, 18)
] (121, 19)
= (121, 21)
'\n' (121, 23)
then (121, 28)
i (122, 6)
+ (122, 8)
1 (122, 10)
else (123, 4)
go (124, 6)
( (124, 9)
i (124, 10)
+ (124, 12)
1 (124, 14)
) (124, 15)
go (125, 2)
i (125, 5)
let (127, 0)
lookPun (127, 4)
( (127, 12)
text (127, 13)
: (127, 17)
string (127, 19)
) (127, 25)
( (127, 27)
i (127, 28)
: (127, 29)
int (127, 31)
) (127, 34)
= (127, 36)
text (128, 2)
. (128, 6)
[ (128, 7)
i (128, 8)
] (128, 9)
|> (128, 11)
charIsPun (128, 14)
let (130, 0)
scanPun (130, 4)
( (130, 12)
text (130, 13)
: (130, 17)
string (130, 19)
) (130, 25)
( (130, 27)
i (130, 28)
: (130, 29)
int (130, 31)
) (130, 34)
= (130, 36)
assert (131, 2)
( (131, 9)
lookPun (131, 10)
text (131, 18)
i (131, 23)
) (131, 24)
i (132, 2)
+ (132, 4)
1 (132, 6)
let (134, 0)
lookOp (134, 4)
( (134, 11)
text (134, 12)
: (134, 16)
string (134, 18)
) (134, 24)
( (134, 26)
i (134, 27)
: (134, 28)
int (134, 30)
) (134, 33)
= (134, 35)
text (135, 2)
. (135, 6)
[ (135, 7)
i (135, 8)
] (135, 9)
|> (135, 11)
charIsOp (135, 14)
let (137, 0)
scanOp (137, 4)
( (137, 11)
text (137, 12)
: (137, 16)
string (137, 18)
) (137, 24)
( (137, 26)
i (137, 27)
: (137, 28)
int (137, 30)
) (137, 33)
= (137, 35)
assert (138, 2)
( (138, 9)
lookOp (138, 10)
text (138, 17)
i (138, 22)
) (138, 23)
let (139, 2)
rec (139, 6)
go (139, 10)
i (139, 13)
= (139, 15)
if (140, 4)
i (140, 7)
< (140, 9)
text (140, 11)
. (140, 15)
Length (140, 16)
&& (140, 23)
text (140, 26)
. (140, 30)
[ (140, 31)
i (140, 32)
] (140, 33)
|> (140, 35)
charIsOp (140, 38)
then (140, 47)
go (141, 6)
( (141, 9)
i (141, 10)
+ (141, 12)
1 (141, 14)
) (141, 15)
else (142, 4)
i (143, 6)
go (144, 2)
i (144, 5)
let (146, 0)
lookIdent (146, 4)
( (146, 14)
text (146, 15)
: (146, 19)
string (146, 21)
) (146, 27)
( (146, 29)
i (146, 30)
: (146, 31)
int (146, 33)
) (146, 36)
= (146, 38)
text (147, 2)
. (147, 6)
[ (147, 7)
i (147, 8)
] (147, 9)
|> (147, 11)
charIsIdent (147, 14)
&& (148, 2)
text (148, 5)
. (148, 9)
[ (148, 10)
i (148, 11)
] (148, 12)
|> (148, 14)
charIsDigit (148, 17)
|> (148, 29)
not (148, 32)
let (150, 0)
scanIdent (150, 4)
( (150, 14)
text (150, 15)
: (150, 19)
string (150, 21)
) (150, 27)
( (150, 29)
i (150, 30)
: (150, 31)
int (150, 33)
) (150, 36)
= (150, 38)
assert (151, 2)
( (151, 9)
lookIdent (151, 10)
text (151, 20)
i (151, 25)
) (151, 26)
let (152, 2)
rec (152, 6)
go (152, 10)
i (152, 13)
= (152, 15)
if (153, 4)
i (153, 7)
< (153, 9)
text (153, 11)
. (153, 15)
Length (153, 16)
&& (153, 23)
text (153, 26)
. (153, 30)
[ (153, 31)
i (153, 32)
] (153, 33)
|> (153, 35)
charIsIdent (153, 38)
then (153, 50)
go (154, 6)
( (154, 9)
i (154, 10)
+ (154, 12)
1 (154, 14)
) (154, 15)
else (155, 4)
i (156, 6)
go (157, 2)
i (157, 5)
let (159, 0)
lookIntLit (159, 4)
( (159, 15)
text (159, 16)
: (159, 20)
string (159, 22)
) (159, 28)
( (159, 30)
i (159, 31)
: (159, 32)
int (159, 34)
) (159, 37)
= (159, 39)
text (160, 2)
. (160, 6)
[ (160, 7)
i (160, 8)
] (160, 9)
|> (160, 11)
charIsDigit (160, 14)
let (162, 0)
scanIntLit (162, 4)
( (162, 15)
text (162, 16)
: (162, 20)
string (162, 22)
) (162, 28)
( (162, 30)
i (162, 31)
: (162, 32)
int (162, 34)
) (162, 37)
= (162, 39)
assert (163, 2)
( (163, 9)
lookIntLit (163, 10)
text (163, 21)
i (163, 26)
) (163, 27)
let (164, 2)
rec (164, 6)
go (164, 10)
i (164, 13)
= (164, 15)
if (165, 4)
i (165, 7)
< (165, 9)
text (165, 11)
. (165, 15)
Length (165, 16)
&& (165, 23)
text (165, 26)
. (165, 30)
[ (165, 31)
i (165, 32)
] (165, 33)
|> (165, 35)
charIsDigit (165, 38)
then (165, 50)
go (166, 6)
( (166, 9)
i (166, 10)
+ (166, 12)
1 (166, 14)
) (166, 15)
else (167, 4)
i (168, 6)
go (169, 2)
i (169, 5)
let (171, 0)
lookCharLit (171, 4)
( (171, 16)
text (171, 17)
: (171, 21)
string (171, 23)
) (171, 29)
( (171, 31)
i (171, 32)
: (171, 33)
int (171, 35)
) (171, 38)
= (171, 40)
text (172, 2)
. (172, 6)
[ (172, 7)
i (172, 8)
] (172, 9)
= (172, 11)
'\'' (172, 13)
let (174, 0)
scanCharLit (174, 4)
( (174, 16)
text (174, 17)
: (174, 21)
string (174, 23)
) (174, 29)
( (174, 31)
i (174, 32)
: (174, 33)
int (174, 35)
) (174, 38)
= (174, 40)
assert (175, 2)
( (175, 9)
lookCharLit (175, 10)
text (175, 22)
i (175, 27)
) (175, 28)
let (176, 2)
rec (176, 6)
go (176, 10)
i (176, 13)
= (176, 15)
if (177, 4)
i (177, 7)
+ (177, 9)
1 (177, 11)
< (177, 13)
text (177, 15)
. (177, 19)
Length (177, 20)
&& (177, 27)
text (177, 30)
. (177, 34)
[ (177, 35)
i (177, 36)
] (177, 37)
= (177, 39)
'\\' (177, 41)
then (177, 46)
go (179, 6)
( (179, 9)
i (179, 10)
+ (179, 12)
2 (179, 14)
) (179, 15)
else (180, 4)
if (180, 9)
i (180, 12)
< (180, 14)
text (180, 16)
. (180, 20)
Length (180, 21)
&& (180, 28)
text (180, 31)
. (180, 35)
[ (180, 36)
i (180, 37)
] (180, 38)
= (180, 40)
'\'' (180, 42)
then (180, 47)
true (182, 6)
, (182, 10)
i (182, 12)
+ (182, 14)
1 (182, 16)
else (183, 4)
if (183, 9)
i (183, 12)
< (183, 14)
text (183, 16)
. (183, 20)
Length (183, 21)
&& (183, 28)
text (183, 31)
. (183, 35)
[ (183, 36)
i (183, 37)
] (183, 38)
<> (183, 40)
'\n' (183, 43)
then (183, 48)
go (185, 6)
( (185, 9)
i (185, 10)
+ (185, 12)
1 (185, 14)
) (185, 15)
else (186, 4)
assert (188, 6)
( (188, 13)
i (188, 14)
= (188, 16)
text (188, 18)
. (188, 22)
Length (188, 23)
|| (188, 30)
text (188, 33)
. (188, 37)
[ (188, 38)
i (188, 39)
] (188, 40)
= (188, 42)
'\n' (188, 44)
) (188, 48)
false (189, 6)
, (189, 11)
i (189, 13)
go (190, 2)
( (190, 5)
i (190, 6)
+ (190, 8)
1 (190, 10)
) (190, 11)
let (192, 0)
lookStrLit (192, 4)
( (192, 15)
text (192, 16)
: (192, 20)
string (192, 22)
) (192, 28)
( (192, 30)
i (192, 31)
: (192, 32)
int (192, 34)
) (192, 37)
= (192, 39)
text (193, 2)
. (193, 6)
[ (193, 7)
i (193, 8)
] (193, 9)
= (193, 11)
'\"' (193, 13)
let (195, 0)
scanStrLit (195, 4)
( (195, 15)
text (195, 16)
: (195, 20)
string (195, 22)
) (195, 28)
( (195, 30)
i (195, 31)
: (195, 32)
int (195, 34)
) (195, 37)
= (195, 39)
assert (196, 2)
( (196, 9)
lookStrLit (196, 10)
text (196, 21)
i (196, 26)
) (196, 27)
let (197, 2)
rec (197, 6)
go (197, 10)
i (197, 13)
= (197, 15)
if (198, 4)
i (198, 7)
+ (198, 9)
1 (198, 11)
< (198, 13)
text (198, 15)
. (198, 19)
Length (198, 20)
&& (198, 27)
text (198, 30)
. (198, 34)
[ (198, 35)
i (198, 36)
] (198, 37)
= (198, 39)
'\\' (198, 41)
then (198, 46)
go (200, 6)
( (200, 9)
i (200, 10)
+ (200, 12)
2 (200, 14)
) (200, 15)
else (201, 4)
if (201, 9)
i (201, 12)
< (201, 14)
text (201, 16)
. (201, 20)
Length (201, 21)
&& (201, 28)
text (201, 31)
. (201, 35)
[ (201, 36)
i (201, 37)
] (201, 38)
= (201, 40)
'\"' (201, 42)
then (201, 46)
true (203, 6)
, (203, 10)
i (203, 12)
+ (203, 14)
1 (203, 16)
else (204, 4)
if (204, 9)
i (204, 12)
< (204, 14)
text (204, 16)
. (204, 20)
Length (204, 21)
&& (204, 28)
text (204, 31)
. (204, 35)
[ (204, 36)
i (204, 37)
] (204, 38)
<> (204, 40)
'\n' (204, 43)
then (204, 48)
go (206, 6)
( (206, 9)
i (206, 10)
+ (206, 12)
1 (206, 14)
) (206, 15)
else (207, 4)
assert (209, 6)
( (209, 13)
i (209, 14)
= (209, 16)
text (209, 18)
. (209, 22)
Length (209, 23)
|| (209, 30)
text (209, 33)
. (209, 37)
[ (209, 38)
i (209, 39)
] (209, 40)
= (209, 42)
'\n' (209, 44)
) (209, 48)
false (210, 6)
, (210, 11)
i (210, 13)
go (211, 2)
( (211, 5)
i (211, 6)
+ (211, 8)
1 (211, 10)
) (211, 11)
let (213, 0)
lookStrLitRaw (213, 4)
( (213, 18)
text (213, 19)
: (213, 23)
string (213, 25)
) (213, 31)
( (213, 33)
i (213, 34)
: (213, 35)
int (213, 37)
) (213, 40)
= (213, 42)
text (214, 2)
|> (214, 7)
strIsFollowedByRawQuotes (214, 10)
i (214, 35)
let (216, 0)
scanStrLitRaw (216, 4)
( (216, 18)
text (216, 19)
: (216, 23)
string (216, 25)
) (216, 31)
( (216, 33)
i (216, 34)
: (216, 35)
int (216, 37)
) (216, 40)
= (216, 42)
assert (217, 2)
( (217, 9)
lookStrLitRaw (217, 10)
text (217, 24)
i (217, 29)
) (217, 30)
let (218, 2)
rec (218, 6)
go (218, 10)
i (218, 13)
= (218, 15)
if (219, 4)
text (219, 7)
|> (219, 12)
strIsFollowedByRawQuotes (219, 15)
i (219, 40)
then (219, 42)
true (220, 6)
, (220, 10)
i (220, 12)
+ (220, 14)
3 (220, 16)
else (221, 4)
if (221, 9)
i (221, 12)
+ (221, 14)
1 (221, 16)
< (221, 18)
text (221, 20)
. (221, 24)
Length (221, 25)
then (221, 32)
go (222, 6)
( (222, 9)
i (222, 10)
+ (222, 12)
1 (222, 14)
) (222, 15)
else (223, 4)
assert (224, 6)
( (224, 13)
i (224, 14)
= (224, 16)
text (224, 18)
. (224, 22)
Length (224, 23)
) (224, 29)
false (225, 6)
, (225, 11)
i (225, 13)
go (226, 2)
( (226, 5)
i (226, 6)
+ (226, 8)
3 (226, 10)
) (226, 11)
let (232, 0)
tokenFromIdent (232, 4)
( (232, 19)
text (232, 20)
: (232, 24)
string (232, 26)
) (232, 32)
l (232, 34)
r (232, 36)
: (232, 37)
Token (232, 39)
= (232, 45)
match (233, 2)
text (233, 8)
|> (233, 13)
strSlice (233, 16)
l (233, 25)
r (233, 27)
with (233, 29)
| (234, 2)
"true" (234, 4)
-> (234, 11)
Token (235, 4)
. (235, 9)
Bool (235, 10)
true (235, 15)
| (236, 2)
"false" (236, 4)
-> (236, 12)
Token (237, 4)
. (237, 9)
Bool (237, 10)
false (237, 15)
| (238, 2)
"do" (238, 4)
-> (238, 9)
Token (239, 4)
. (239, 9)
Do (239, 10)
| (240, 2)
"let" (240, 4)
-> (240, 10)
Token (241, 4)
. (241, 9)
Let (241, 10)
| (242, 2)
"if" (242, 4)
-> (242, 9)
Token (243, 4)
. (243, 9)
If (243, 10)
| (244, 2)
"then" (244, 4)
-> (244, 11)
Token (245, 4)
. (245, 9)
Then (245, 10)
| (246, 2)
"else" (246, 4)
-> (246, 11)
Token (247, 4)
. (247, 9)
Else (247, 10)
| (248, 2)
"match" (248, 4)
-> (248, 12)
Token (249, 4)
. (249, 9)
Match (249, 10)
| (250, 2)
"with" (250, 4)
-> (250, 11)
Token (251, 4)
. (251, 9)
With (251, 10)
| (252, 2)
"as" (252, 4)
-> (252, 9)
Token (253, 4)
. (253, 9)
As (253, 10)
| (254, 2)
"when" (254, 4)
-> (254, 11)
Token (255, 4)
. (255, 9)
When (255, 10)
| (256, 2)
"rec" (256, 4)
-> (256, 10)
Token (257, 4)
. (257, 9)
Rec (257, 10)
| (258, 2)
"private" (258, 4)
-> (258, 14)
Token (259, 4)
. (259, 9)
Private (259, 10)
| (260, 2)
"internal" (260, 4)
-> (260, 15)
Token (261, 4)
. (261, 9)
Internal (261, 10)
| (262, 2)
"public" (262, 4)
-> (262, 13)
Token (263, 4)
. (263, 9)
Public (263, 10)
| (264, 2)
"module" (264, 4)
-> (264, 13)
Token (265, 4)
. (265, 9)
Module (265, 10)
| (266, 2)
"namespace" (266, 4)
-> (266, 16)
Token (267, 4)
. (267, 9)
Namespace (267, 10)
| (268, 2)
"open" (268, 4)
-> (268, 11)
Token (269, 4)
. (269, 9)
Open (269, 10)
| (270, 2)
"type" (270, 4)
-> (270, 11)
Token (271, 4)
. (271, 9)
Type (271, 10)
| (272, 2)
"of" (272, 4)
-> (272, 9)
Token (273, 4)
. (273, 9)
Of (273, 10)
| (274, 2)
"fun" (274, 4)
-> (274, 10)
Token (275, 4)
. (275, 9)
Fun (275, 10)
| (276, 2)
"in" (276, 4)
-> (276, 9)
Token (277, 4)
. (277, 9)
In (277, 10)
| (278, 2)
s (278, 4)
-> (278, 6)
Token (279, 4)
. (279, 9)
Ident (279, 10)
s (279, 16)
let (281, 0)
tokenFromOp (281, 4)
( (281, 16)
text (281, 17)
: (281, 21)
string (281, 23)
) (281, 29)
l (281, 31)
r (281, 33)
: (281, 34)
Token (281, 36)
= (281, 42)
match (282, 2)
text (282, 8)
|> (282, 13)
strSlice (282, 16)
l (282, 25)
r (282, 27)
with (282, 29)
| (283, 2)
"&" (283, 4)
-> (283, 8)
Token (284, 4)
. (284, 9)
Amp (284, 10)
| (285, 2)
"&&" (285, 4)
-> (285, 9)
Token (286, 4)
. (286, 9)
AmpAmp (286, 10)
| (287, 2)
"->" (287, 4)
-> (287, 9)
Token (288, 4)
. (288, 9)
Arrow (288, 10)
| (289, 2)
":" (289, 4)
-> (289, 8)
Token (290, 4)
. (290, 9)
Colon (290, 10)
| (291, 2)
"::" (291, 4)
-> (291, 9)
Token (292, 4)
. (292, 9)
ColonColon (292, 10)
| (293, 2)
"." (293, 4)
-> (293, 8)
Token (294, 4)
. (294, 9)
Dot (294, 10)
| (295, 2)
".." (295, 4)
-> (295, 9)
Token (296, 4)
. (296, 9)
DotDot (296, 10)
| (297, 2)
"=" (297, 4)
-> (297, 8)
Token (298, 4)
. (298, 9)
Eq (298, 10)
| (299, 2)
">" (299, 4)
-> (299, 8)
Token (300, 4)
. (300, 9)
Gt (300, 10)
| (301, 2)
">=" (301, 4)
-> (301, 9)
Token (302, 4)
. (302, 9)
GtEq (302, 10)
| (303, 2)
"<" (303, 4)
-> (303, 8)
Token (304, 4)
. (304, 9)
Lt (304, 10)
| (305, 2)
"<=" (305, 4)
-> (305, 9)
Token (306, 4)
. (306, 9)
LtEq (306, 10)
| (307, 2)
"<>" (307, 4)
-> (307, 9)
Token (308, 4)
. (308, 9)
LtGt (308, 10)
| (309, 2)
"-" (309, 4)
-> (309, 8)
Token (310, 4)
. (310, 9)
Minus (310, 10)
| (311, 2)
"%" (311, 4)
-> (311, 8)
Token (312, 4)
. (312, 9)
Percent (312, 10)
| (313, 2)
"|" (313, 4)
-> (313, 8)
Token (314, 4)
. (314, 9)
Pipe (314, 10)
| (315, 2)
"|>" (315, 4)
-> (315, 9)
Token (316, 4)
. (316, 9)
PipeGt (316, 10)
| (317, 2)
"||" (317, 4)
-> (317, 9)
Token (318, 4)
. (318, 9)
PipePipe (318, 10)
| (319, 2)
"+" (319, 4)
-> (319, 8)
Token (320, 4)
. (320, 9)
Plus (320, 10)
| (321, 2)
";" (321, 4)
-> (321, 8)
Token (322, 4)
. (322, 9)
Semi (322, 10)
| (323, 2)
"*" (323, 4)
-> (323, 8)
Token (324, 4)
. (324, 9)
Star (324, 10)
| (325, 2)
"/" (325, 4)
-> (325, 8)
Token (326, 4)
. (326, 9)
Slash (326, 10)
| (327, 2)
_ (327, 4)
-> (327, 6)
Token (328, 4)
. (328, 9)
Error (328, 10)
let (330, 0)
tokenFromPun (330, 4)
( (330, 17)
text (330, 18)
: (330, 22)
string (330, 24)
) (330, 30)
( (330, 32)
l (330, 33)
: (330, 34)
int (330, 36)
) (330, 39)
r (330, 41)
= (330, 43)
assert (331, 2)
( (331, 9)
r (331, 10)
- (331, 12)
l (331, 14)
= (331, 16)
1 (331, 18)
) (331, 19)
match (332, 2)
text (332, 8)
. (332, 12)
[ (332, 13)
l (332, 14)
] (332, 15)
with (332, 17)
| (333, 2)
',' (333, 4)
-> (333, 8)
Token (334, 4)
. (334, 9)
Comma (334, 10)
| (335, 2)
'(' (335, 4)
-> (335, 8)
Token (336, 4)
. (336, 9)
ParenL (336, 10)
| (337, 2)
')' (337, 4)
-> (337, 8)
Token (338, 4)
. (338, 9)
ParenR (338, 10)
| (339, 2)
'[' (339, 4)
-> (339, 8)
Token (340, 4)
. (340, 9)
BracketL (340, 10)
| (341, 2)
']' (341, 4)
-> (341, 8)
Token (342, 4)
. (342, 9)
BracketR (342, 10)
| (343, 2)
_ (343, 4)
-> (343, 6)
failwith (344, 4)
"NEVER! charIsPun is broken" (344, 13)
let (346, 0)
tokenFromIntLit (346, 4)
( (346, 20)
text (346, 21)
: (346, 25)
string (346, 27)
) (346, 33)
l (346, 35)
r (346, 37)
: (346, 38)
Token (346, 40)
= (346, 46)
let (347, 2)
value (347, 6)
= (347, 12)
text (347, 14)
|> (347, 19)
strSlice (347, 22)
l (347, 31)
r (347, 33)
|> (347, 35)
int (347, 38)
Token (348, 2)
. (348, 7)
Int (348, 8)
value (348, 12)
let (350, 0)
tokenFromCharLit (350, 4)
( (350, 21)
text (350, 22)
: (350, 26)
string (350, 28)
) (350, 34)
l (350, 36)
r (350, 38)
: (350, 39)
Token (350, 41)
= (350, 47)
assert (351, 2)
( (351, 9)
l (351, 10)
+ (351, 12)
2 (351, 14)
<= (351, 16)
r (351, 19)
&& (351, 21)
text (351, 24)
. (351, 28)
[ (351, 29)
l (351, 30)
] (351, 31)
= (351, 33)
'\'' (351, 35)
&& (351, 40)
text (351, 43)
. (351, 47)
[ (351, 48)
r (351, 49)
- (351, 51)
1 (351, 53)
] (351, 54)
= (351, 56)
'\'' (351, 58)
) (351, 62)
let (354, 2)
i (354, 6)
= (354, 8)
l (354, 10)
+ (354, 12)
1 (354, 14)
let (355, 2)
value (355, 6)
= (355, 12)
match (356, 4)
text (356, 10)
. (356, 14)
[ (356, 15)
i (356, 16)
] (356, 17)
with (356, 19)
| (357, 4)
'\\' (357, 6)
-> (357, 11)
match (358, 6)
text (358, 12)
. (358, 16)
[ (358, 17)
i (358, 18)
+ (358, 20)
1 (358, 22)
] (358, 23)
with (358, 25)
| (359, 6)
'x' (359, 8)
-> (359, 12)
charNull (360, 8)
| (361, 6)
't' (361, 8)
-> (361, 12)
'\t' (362, 8)
| (363, 6)
'r' (363, 8)
-> (363, 12)
'\r' (364, 8)
| (365, 6)
'n' (365, 8)
-> (365, 12)
'\n' (366, 8)
| (367, 6)
c (367, 8)
-> (367, 10)
c (368, 8)
| (369, 4)
c (369, 6)
-> (369, 8)
c (370, 6)
Token (372, 2)
. (372, 7)
Char (372, 8)
value (372, 13)
let (374, 0)
tokenFromStrLit (374, 4)
( (374, 20)
text (374, 21)
: (374, 25)
string (374, 27)
) (374, 33)
l (374, 35)
r (374, 37)
: (374, 38)
Token (374, 40)
= (374, 46)
assert (375, 2)
( (375, 9)
l (375, 10)
+ (375, 12)
2 (375, 14)
<= (375, 16)
r (375, 19)
&& (375, 21)
text (375, 24)
. (375, 28)
[ (375, 29)
l (375, 30)
] (375, 31)
= (375, 33)
'\"' (375, 35)
&& (375, 39)
text (375, 42)
. (375, 46)
[ (375, 47)
r (375, 48)
- (375, 50)
1 (375, 52)
] (375, 53)
= (375, 55)
'\"' (375, 57)
) (375, 60)
let (379, 2)
rec (379, 6)
go (379, 10)
acc (379, 13)
i (379, 17)
= (379, 19)
let (381, 4)
rec (381, 8)
next (381, 12)
i (381, 17)
= (381, 19)
if (382, 6)
i (382, 9)
= (382, 11)
r (382, 13)
- (382, 15)
1 (382, 17)
|| (382, 19)
text (382, 22)
. (382, 26)
[ (382, 27)
i (382, 28)
] (382, 29)
= (382, 31)
'\\' (382, 33)
then (382, 38)
i (383, 8)
else (384, 6)
next (385, 8)
( (385, 13)
i (385, 14)
+ (385, 16)
1 (385, 18)
) (385, 19)
let (386, 4)
endIndex (386, 8)
= (386, 17)
next (386, 19)
i (386, 24)
let (387, 4)
acc (387, 8)
= (387, 12)
( (387, 14)
text (387, 15)
|> (387, 20)
strSlice (387, 23)
i (387, 32)
endIndex (387, 34)
) (387, 42)
:: (387, 44)
acc (387, 47)
let (388, 4)
i (388, 8)
= (388, 10)
endIndex (388, 12)
if (391, 4)
i (391, 7)
= (391, 9)
r (391, 11)
- (391, 13)
1 (391, 15)
then (391, 17)
acc (392, 6)
|> (392, 10)
listRev (392, 13)
|> (392, 21)
strConcat (392, 24)
else (393, 4)
assert (394, 6)
( (394, 13)
text (394, 14)
. (394, 18)
[ (394, 19)
i (394, 20)
] (394, 21)
= (394, 23)
'\\' (394, 25)
) (394, 29)
match (395, 6)
text (395, 12)
. (395, 16)
[ (395, 17)
i (395, 18)
+ (395, 20)
1 (395, 22)
] (395, 23)
with (395, 25)
| (396, 6)
'x' (396, 8)
-> (396, 12)
go (397, 8)
( (397, 11)
"\0" (397, 12)
:: (397, 19)
acc (397, 22)
) (397, 25)
( (397, 27)
i (397, 28)
+ (397, 30)
4 (397, 32)
) (397, 33)
| (398, 6)
't' (398, 8)
-> (398, 12)
go (399, 8)
( (399, 11)
"\t" (399, 12)
:: (399, 17)
acc (399, 20)
) (399, 23)
( (399, 25)
i (399, 26)
+ (399, 28)
2 (399, 30)
) (399, 31)
| (400, 6)
'r' (400, 8)
-> (400, 12)
go (401, 8)
( (401, 11)
"\r" (401, 12)
:: (401, 17)
acc (401, 20)
) (401, 23)
( (401, 25)
i (401, 26)
+ (401, 28)
2 (401, 30)
) (401, 31)
| (402, 6)
'n' (402, 8)
-> (402, 12)
go (403, 8)
( (403, 11)
"\n" (403, 12)
:: (403, 17)
acc (403, 20)
) (403, 23)
( (403, 25)
i (403, 26)
+ (403, 28)
2 (403, 30)
) (403, 31)
| (404, 6)
_ (404, 8)
-> (404, 10)
go (405, 8)
( (405, 11)
( (405, 12)
text (405, 13)
|> (405, 18)
strSlice (405, 21)
( (405, 30)
i (405, 31)
+ (405, 33)
1 (405, 35)
) (405, 36)
( (405, 38)
i (405, 39)
+ (405, 41)
2 (405, 43)
) (405, 44)
) (405, 45)
:: (405, 47)
acc (405, 50)
) (405, 53)
( (405, 55)
i (405, 56)
+ (405, 58)
2 (405, 60)
) (405, 61)
let (406, 2)
value (406, 6)
= (406, 12)
go (406, 14)
[ (406, 17)
] (406, 18)
( (406, 20)
l (406, 21)
+ (406, 23)
1 (406, 25)
) (406, 26)
Token (408, 2)
. (408, 7)
Str (408, 8)
value (408, 12)
let (410, 0)
tokenFromStrLitRaw (410, 4)
( (410, 23)
text (410, 24)
: (410, 28)
string (410, 30)
) (410, 36)
l (410, 38)
r (410, 40)
= (410, 42)
assert (411, 2)
( (411, 9)
l (411, 10)
+ (411, 12)
6 (411, 14)
<= (411, 16)
r (411, 19)
&& (411, 21)
text (411, 24)
|> (411, 29)
strIsFollowedByRawQuotes (411, 32)
l (411, 57)
&& (411, 59)
text (411, 62)
|> (411, 67)
strIsFollowedByRawQuotes (411, 70)
( (411, 95)
r (411, 96)
- (411, 98)
3 (411, 100)
) (411, 101)
) (411, 102)
Token (412, 2)
. (412, 7)
Str (412, 8)
( (412, 12)
text (412, 13)
|> (412, 18)
strSlice (412, 21)
( (412, 30)
l (412, 31)
+ (412, 33)
3 (412, 35)
) (412, 36)
( (412, 38)
r (412, 39)
- (412, 41)
3 (412, 43)
) (412, 44)
) (412, 45)
let (418, 0)
tokCtxToTextIndex (418, 4)
( (418, 22)
( (418, 23)
text (418, 24)
, (418, 28)
i (418, 30)
, (418, 31)
_ (418, 33)
, (418, 34)
_ (418, 36)
) (418, 37)
: (418, 38)
TokenizeCtx (418, 40)
) (418, 51)
= (418, 53)
text (419, 2)
, (419, 6)
i (419, 8)
let (423, 0)
tokCtxSkip (423, 4)
r (423, 15)
( (423, 17)
( (423, 18)
text (423, 19)
, (423, 23)
i (423, 25)
, (423, 26)
loc (423, 28)
, (423, 31)
acc (423, 33)
) (423, 36)
: (423, 37)
TokenizeCtx (423, 39)
) (423, 50)
: (423, 51)
TokenizeCtx (423, 53)
= (423, 65)
assert (424, 2)
( (424, 9)
0 (424, 10)
<= (424, 12)
i (424, 15)
&& (424, 17)
i (424, 20)
<= (424, 22)
r (424, 25)
&& (424, 27)
r (424, 30)
<= (424, 32)
text (424, 35)
. (424, 39)
Length (424, 40)
) (424, 46)
let (425, 2)
newLoc (425, 6)
= (425, 13)
loc (425, 15)
|> (425, 19)
locShift (425, 22)
text (425, 31)
i (425, 36)
r (425, 38)
text (426, 2)
, (426, 6)
r (426, 8)
, (426, 9)
newLoc (426, 11)
, (426, 17)
acc (426, 19)
let (430, 0)
tokCtxPush (430, 4)
kind (430, 15)
r (430, 20)
( (430, 22)
( (430, 23)
text (430, 24)
, (430, 28)
i (430, 30)
, (430, 31)
loc (430, 33)
, (430, 36)
acc (430, 38)
) (430, 41)
: (430, 42)
TokenizeCtx (430, 44)
) (430, 55)
: (430, 56)
TokenizeCtx (430, 58)
= (430, 70)
assert (431, 2)
( (431, 9)
0 (431, 10)
<= (431, 12)
i (431, 15)
&& (431, 17)
i (431, 20)
<= (431, 22)
r (431, 25)
&& (431, 27)
r (431, 30)
<= (431, 32)
text (431, 35)
. (431, 39)
Length (431, 40)
) (431, 46)
let (432, 2)
newAcc (432, 6)
= (432, 13)
( (432, 15)
kind (432, 16)
, (432, 20)
loc (432, 22)
) (432, 25)
:: (432, 27)
acc (432, 30)
let (433, 2)
newLoc (433, 6)
= (433, 13)
loc (433, 15)
|> (433, 19)
locShift (433, 22)
text (433, 31)
i (433, 36)
r (433, 38)
text (434, 2)
, (434, 6)
r (434, 8)
, (434, 9)
newLoc (434, 11)
, (434, 17)
newAcc (434, 19)
let (436, 0)
tokEof (436, 4)
( (436, 11)
( (436, 12)
text (436, 13)
, (436, 17)
i (436, 19)
, (436, 20)
_ (436, 22)
, (436, 23)
acc (436, 25)
) (436, 28)
: (436, 29)
TokenizeCtx (436, 31)
) (436, 42)
= (436, 44)
assert (437, 2)
( (437, 9)
lookEof (437, 10)
text (437, 18)
i (437, 23)
) (437, 24)
acc (438, 2)
|> (438, 6)
listRev (438, 9)
let (440, 0)
tokError (440, 4)
t (440, 13)
= (440, 15)
let (441, 2)
text (441, 6)
, (441, 10)
i (441, 12)
= (441, 14)
t (441, 16)
|> (441, 18)
tokCtxToTextIndex (441, 21)
let (442, 2)
r (442, 6)
= (442, 8)
scanError (442, 10)
text (442, 20)
i (442, 25)
t (443, 2)
|> (443, 4)
tokCtxSkip (443, 7)
r (443, 18)
let (445, 0)
tokComment (445, 4)
( (445, 15)
t (445, 16)
: (445, 17)
TokenizeCtx (445, 19)
) (445, 30)
= (445, 32)
let (446, 2)
text (446, 6)
, (446, 10)
i (446, 12)
= (446, 14)
t (446, 16)
|> (446, 18)
tokCtxToTextIndex (446, 21)
let (447, 2)
r (447, 6)
= (447, 8)
scanLine (447, 10)
text (447, 19)
i (447, 24)
t (448, 2)
|> (448, 4)
tokCtxSkip (448, 7)
r (448, 18)
let (450, 0)
tokSpace (450, 4)
( (450, 13)
t (450, 14)
: (450, 15)
TokenizeCtx (450, 17)
) (450, 28)
= (450, 30)
let (451, 2)
text (451, 6)
, (451, 10)
i (451, 12)
= (451, 14)
t (451, 16)
|> (451, 18)
tokCtxToTextIndex (451, 21)
let (452, 2)
r (452, 6)
= (452, 8)
scanSpace (452, 10)
text (452, 20)
i (452, 25)
t (453, 2)
|> (453, 4)
tokCtxSkip (453, 7)
r (453, 18)
let (455, 0)
tokPun (455, 4)
t (455, 11)
= (455, 13)
let (456, 2)
text (456, 6)
, (456, 10)
i (456, 12)
= (456, 14)
t (456, 16)
|> (456, 18)
tokCtxToTextIndex (456, 21)
let (457, 2)
r (457, 6)
= (457, 8)
scanPun (457, 10)
text (457, 18)
i (457, 23)
let (458, 2)
token (458, 6)
= (458, 12)
tokenFromPun (458, 14)
text (458, 27)
i (458, 32)
r (458, 34)
t (459, 2)
|> (459, 4)
tokCtxPush (459, 7)
token (459, 18)
r (459, 24)
let (461, 0)
tokOp (461, 4)
t (461, 10)
= (461, 12)
let (462, 2)
text (462, 6)
, (462, 10)
i (462, 12)
= (462, 14)
t (462, 16)
|> (462, 18)
tokCtxToTextIndex (462, 21)
let (463, 2)
r (463, 6)
= (463, 8)
scanOp (463, 10)
text (463, 17)
i (463, 22)
let (464, 2)
token (464, 6)
= (464, 12)
tokenFromOp (464, 14)
text (464, 26)
i (464, 31)
r (464, 33)
t (465, 2)
|> (465, 4)
tokCtxPush (465, 7)
token (465, 18)
r (465, 24)
let (467, 0)
tokIdent (467, 4)
t (467, 13)
= (467, 15)
let (468, 2)
text (468, 6)
, (468, 10)
i (468, 12)
= (468, 14)
t (468, 16)
|> (468, 18)
tokCtxToTextIndex (468, 21)
let (469, 2)
r (469, 6)
= (469, 8)
scanIdent (469, 10)
text (469, 20)
i (469, 25)
let (470, 2)
token (470, 6)
= (470, 12)
tokenFromIdent (470, 14)
text (470, 29)
i (470, 34)
r (470, 36)
t (471, 2)
|> (471, 4)
tokCtxPush (471, 7)
token (471, 18)
r (471, 24)
let (473, 0)
tokIntLit (473, 4)
t (473, 14)
= (473, 16)
let (474, 2)
text (474, 6)
, (474, 10)
i (474, 12)
= (474, 14)
t (474, 16)
|> (474, 18)
tokCtxToTextIndex (474, 21)
let (475, 2)
r (475, 6)
= (475, 8)
scanIntLit (475, 10)
text (475, 21)
i (475, 26)
let (476, 2)
token (476, 6)
= (476, 12)
tokenFromIntLit (476, 14)
text (476, 30)
i (476, 35)
r (476, 37)
t (477, 2)
|> (477, 4)
tokCtxPush (477, 7)
token (477, 18)
r (477, 24)
let (479, 0)
tokCharLit (479, 4)
t (479, 15)
= (479, 17)
let (480, 2)
text (480, 6)
, (480, 10)
i (480, 12)
= (480, 14)
t (480, 16)
|> (480, 18)
tokCtxToTextIndex (480, 21)
let (481, 2)
ok (481, 6)
, (481, 8)
r (481, 10)
= (481, 12)
scanCharLit (481, 14)
text (481, 26)
i (481, 31)
let (482, 2)
token (482, 6)
= (482, 12)
if (482, 14)
ok (482, 17)
then (482, 20)
tokenFromCharLit (482, 25)
text (482, 42)
i (482, 47)
r (482, 49)
else (482, 51)
Token (482, 56)
. (482, 61)
Error (482, 62)
t (483, 2)
|> (483, 4)
tokCtxPush (483, 7)
token (483, 18)
r (483, 24)
let (485, 0)
tokStrLit (485, 4)
t (485, 14)
= (485, 16)
let (486, 2)
text (486, 6)
, (486, 10)
i (486, 12)
= (486, 14)
t (486, 16)
|> (486, 18)
tokCtxToTextIndex (486, 21)
let (487, 2)
ok (487, 6)
, (487, 8)
r (487, 10)
= (487, 12)
scanStrLit (487, 14)
text (487, 25)
i (487, 30)
let (488, 2)
token (488, 6)
= (488, 12)
if (488, 14)
ok (488, 17)
then (488, 20)
tokenFromStrLit (488, 25)
text (488, 41)
i (488, 46)
r (488, 48)
else (488, 50)
Token (488, 55)
. (488, 60)
Error (488, 61)
t (489, 2)
|> (489, 4)
tokCtxPush (489, 7)
token (489, 18)
r (489, 24)
let (491, 0)
tokStrLitRaw (491, 4)
t (491, 17)
= (491, 19)
let (492, 2)
text (492, 6)
, (492, 10)
i (492, 12)
= (492, 14)
t (492, 16)
|> (492, 18)
tokCtxToTextIndex (492, 21)
let (493, 2)
ok (493, 6)
, (493, 8)
r (493, 10)
= (493, 12)
scanStrLitRaw (493, 14)
text (493, 28)
i (493, 33)
let (494, 2)
token (494, 6)
= (494, 12)
if (494, 14)
ok (494, 17)
then (494, 20)
tokenFromStrLitRaw (494, 25)
text (494, 44)
i (494, 49)
r (494, 51)
else (494, 53)
Token (494, 58)
. (494, 63)
Error (494, 64)
t (495, 2)
|> (495, 4)
tokCtxPush (495, 7)
token (495, 18)
r (495, 24)
let (497, 0)
tokenize (497, 4)
( (497, 13)
text (497, 14)
: (497, 18)
string (497, 20)
) (497, 26)
: (497, 27)
( (497, 29)
Token (497, 30)
* (497, 36)
Loc (497, 38)
) (497, 41)
list (497, 43)
= (497, 48)
let (498, 2)
rec (498, 6)
go (498, 10)
t (498, 13)
= (498, 15)
let (499, 4)
text (499, 8)
, (499, 12)
i (499, 14)
= (499, 16)
t (499, 18)
|> (499, 20)
tokCtxToTextIndex (499, 23)
if (501, 4)
lookEof (501, 7)
text (501, 15)
i (501, 20)
then (501, 22)
t (502, 6)
|> (502, 8)
tokEof (502, 11)
else (504, 4)
if (504, 9)
lookComment (504, 12)
text (504, 24)
i (504, 29)
then (504, 31)
t (505, 6)
|> (505, 8)
tokComment (505, 11)
|> (505, 22)
go (505, 25)
else (507, 4)
if (507, 9)
lookSpace (507, 12)
text (507, 22)
i (507, 27)
then (507, 29)
t (508, 6)
|> (508, 8)
tokSpace (508, 11)
|> (508, 20)
go (508, 23)
else (510, 4)
if (510, 9)
lookOp (510, 12)
text (510, 19)
i (510, 24)
then (510, 26)
t (511, 6)
|> (511, 8)
tokOp (511, 11)
|> (511, 17)
go (511, 20)
else (513, 4)
if (513, 9)
lookIntLit (513, 12)
text (513, 23)
i (513, 28)
then (513, 30)
t (514, 6)
|> (514, 8)
tokIntLit (514, 11)
|> (514, 21)
go (514, 24)
else (516, 4)
if (516, 9)
lookIdent (516, 12)
text (516, 22)
i (516, 27)
then (516, 29)
t (517, 6)
|> (517, 8)
tokIdent (517, 11)
|> (517, 20)
go (517, 23)
else (519, 4)
if (519, 9)
lookCharLit (519, 12)
text (519, 24)
i (519, 29)
then (519, 31)
t (520, 6)
|> (520, 8)
tokCharLit (520, 11)
|> (520, 22)
go (520, 25)
else (522, 4)
if (522, 9)
lookStrLitRaw (522, 12)
text (522, 26)
i (522, 31)
then (522, 33)
t (523, 6)
|> (523, 8)
tokStrLitRaw (523, 11)
|> (523, 24)
go (523, 27)
else (525, 4)
if (525, 9)
lookStrLit (525, 12)
text (525, 23)
i (525, 28)
then (525, 30)
t (526, 6)
|> (526, 8)
tokStrLit (526, 11)
|> (526, 21)
go (526, 24)
else (528, 4)
if (528, 9)
lookPun (528, 12)
text (528, 20)
i (528, 25)
then (528, 27)
t (529, 6)
|> (529, 8)
tokPun (529, 11)
|> (529, 18)
go (529, 21)
else (531, 4)
t (532, 6)
|> (532, 8)
tokError (532, 11)
|> (532, 20)
go (532, 23)
go (534, 2)
( (534, 5)
text (534, 6)
, (534, 10)
0 (534, 12)
, (534, 13)
( (534, 15)
0 (534, 16)
, (534, 17)
0 (534, 19)
) (534, 20)
, (534, 21)
[ (534, 23)
] (534, 24)
) (534, 25)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- synonym: TokenizeCtx
  tuple:
  - string
  - int
  - Loc
  - list:
    - tuple:
      - Token
      - Loc
- let:
  - fun:
    - locShift
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - anno:
      - r
      - int
    - anno:
      - tuple:
        - y
        - x
      - Loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - l
          - bin:
            - l
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - fun:
        - go
        - y
        - x
        - i
      - if:
        - bin:
          - i
          - r
        - tuple:
          - y
          - x
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - bin:
              - bin:
                - go
                - bin:
                  - y
                  - 1
              - 0
            - bin:
              - i
              - 1
          - bin:
            - bin:
              - bin:
                - go
                - y
              - bin:
                - x
                - 1
            - bin:
              - i
              - 1
      bin:
      - bin:
        - bin:
          - go
          - y
        - x
      - l
  let:
  - anno:
    - charNull
    - char
  - bin:
    - char
    - 0
  let:
  - anno:
    - fun:
      - charIsIdent
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - c
        - \'_\'
      - bin:
        - charIsDigit
        - c
    - bin:
      - charIsAlpha
      - c
  let:
  - anno:
    - fun:
      - charIsOp
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - bin:
                          - bin:
                            - bin:
                              - bin:
                                - c
                                - \'+\'
                              - bin:
                                - c
                                - \'-\'
                            - bin:
                              - c
                              - \'*\'
                          - bin:
                            - c
                            - \'/\'
                        - bin:
                          - c
                          - \'%\'
                      - bin:
                        - c
                        - \'=\'
                    - bin:
                      - c
                      - \'<\'
                  - bin:
                    - c
                    - \'>\'
                - bin:
                  - c
                  - \'^\'
              - bin:
                - c
                - \'&\'
            - bin:
              - c
              - \'|\'
          - bin:
            - c
            - \':\'
        - bin:
          - c
          - \'@\'
      - bin:
        - c
        - \';\'
    - bin:
      - c
      - \'.\'
  let:
  - anno:
    - fun:
      - charIsPun
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - c
            - \',\'
          - bin:
            - c
            - \'(\'
        - bin:
          - c
          - \')\'
      - bin:
        - c
        - \'[\'
    - bin:
      - c
      - \']\'
  let:
  - anno:
    - fun:
      - strIsFollowedBy
      - anno:
        - i
        - int
      - anno:
        - prefix
        - string
      - anno:
        - s
        - string
    - bool
  - let:
    - fun:
      - go
      - pi
      - si
    - bin:
      - bin:
        - pi
        - .Length: prefix
      - bin:
        - bin:
          - bin:
            - si
            - .Length: s
          - bin:
            - index: prefix
            - index: s
        - bin:
          - bin:
            - go
            - bin:
              - pi
              - 1
          - bin:
            - si
            - 1
    bin:
    - bin:
      - bin:
        - i
        - .Length: prefix
      - .Length: s
    - bin:
      - bin:
        - go
        - 0
      - i
  let:
  - anno:
    - fun:
      - strIsFollowedByRawQuotes
      - anno:
        - i
        - int
      - anno:
        - s
        - string
    - bool
  - bin:
    - bin:
      - bin:
        - strIsFollowedBy
        - i
      - \"\\\"\\\"\\\"\"
    - s
  let:
  - fun:
    - scanError
    - anno:
      - _
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - 1
  let:
  - fun:
    - lookEof
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - .Length: text
  let:
  - fun:
    - lookSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsSpace
  let:
  - fun:
    - scanSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookSpace
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsSpace
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookComment
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"//\"
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"[<\"
  let:
  - fun:
    - scanLine
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookComment
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - i
          - .Length: text
        - i
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - i
            - 1
          - bin:
            - go
            - bin:
              - i
              - 1
      bin:
      - go
      - i
  let:
  - fun:
    - lookPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsPun
  let:
  - fun:
    - scanPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookPun
          - text
        - i
    - bin:
      - i
      - 1
  let:
  - fun:
    - lookOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsOp
  let:
  - fun:
    - scanOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookOp
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsOp
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - index: text
      - charIsIdent
    - bin:
      - bin:
        - index: text
        - charIsDigit
      - not
  let:
  - fun:
    - scanIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIdent
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsIdent
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsDigit
  let:
  - fun:
    - scanIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIntLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsDigit
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\'\'
  let:
  - fun:
    - scanCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookCharLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\'\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\"\'
  let:
  - fun:
    - scanStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\"\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - text
    - bin:
      - strIsFollowedByRawQuotes
      - i
  let:
  - fun:
    - scanStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLitRaw
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - i
        - tuple:
          - true
          - bin:
            - i
            - 3
        - if:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - go
            - bin:
              - i
              - 1
          - semi:
            - bin:
              - assert
              - bin:
                - i
                - .Length: text
            - tuple:
              - false
              - i
      bin:
      - go
      - bin:
        - i
        - 3
  let:
  - anno:
    - fun:
      - tokenFromIdent
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"true\"
      - ERROR:
        - missing
        - (235:12)
      bin:
      - .Bool: Token
      - true
    - arm:
      - \"false\"
      - ERROR:
        - missing
        - (237:13)
      bin:
      - .Bool: Token
      - false
    - arm:
      - \"do\"
      - ERROR:
        - missing
        - (239:10)
      .Do: Token
    - arm:
      - \"let\"
      - ERROR:
        - missing
        - (241:11)
      .Let: Token
    - arm:
      - \"if\"
      - ERROR:
        - missing
        - (243:10)
      .If: Token
    - arm:
      - \"then\"
      - ERROR:
        - missing
        - (245:12)
      .Then: Token
    - arm:
      - \"else\"
      - ERROR:
        - missing
        - (247:12)
      .Else: Token
    - arm:
      - \"match\"
      - ERROR:
        - missing
        - (249:13)
      .Match: Token
    - arm:
      - \"with\"
      - ERROR:
        - missing
        - (251:12)
      .With: Token
    - arm:
      - \"as\"
      - ERROR:
        - missing
        - (253:10)
      .As: Token
    - arm:
      - \"when\"
      - ERROR:
        - missing
        - (255:12)
      .When: Token
    - arm:
      - \"rec\"
      - ERROR:
        - missing
        - (257:11)
      .Rec: Token
    - arm:
      - \"private\"
      - ERROR:
        - missing
        - (259:15)
      .Private: Token
    - arm:
      - \"internal\"
      - ERROR:
        - missing
        - (261:16)
      .Internal: Token
    - arm:
      - \"public\"
      - ERROR:
        - missing
        - (263:14)
      .Public: Token
    - arm:
      - \"module\"
      - ERROR:
        - missing
        - (265:14)
      .Module: Token
    - arm:
      - \"namespace\"
      - ERROR:
        - missing
        - (267:17)
      .Namespace: Token
    - arm:
      - \"open\"
      - ERROR:
        - missing
        - (269:12)
      .Open: Token
    - arm:
      - \"type\"
      - ERROR:
        - missing
        - (271:12)
      .Type: Token
    - arm:
      - \"of\"
      - ERROR:
        - missing
        - (273:10)
      .Of: Token
    - arm:
      - \"fun\"
      - ERROR:
        - missing
        - (275:11)
      .Fun: Token
    - arm:
      - \"in\"
      - ERROR:
        - missing
        - (277:10)
      .In: Token
    - arm:
      - s
      - ERROR:
        - missing
        - (279:7)
      bin:
      - .Ident: Token
      - s
  let:
  - anno:
    - fun:
      - tokenFromOp
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"&\"
      - ERROR:
        - missing
        - (284:9)
      .Amp: Token
    - arm:
      - \"&&\"
      - ERROR:
        - missing
        - (286:10)
      .AmpAmp: Token
    - arm:
      - \"->\"
      - ERROR:
        - missing
        - (288:10)
      .Arrow: Token
    - arm:
      - \":\"
      - ERROR:
        - missing
        - (290:9)
      .Colon: Token
    - arm:
      - \"::\"
      - ERROR:
        - missing
        - (292:10)
      .ColonColon: Token
    - arm:
      - \".\"
      - ERROR:
        - missing
        - (294:9)
      .Dot: Token
    - arm:
      - \"..\"
      - ERROR:
        - missing
        - (296:10)
      .DotDot: Token
    - arm:
      - \"=\"
      - ERROR:
        - missing
        - (298:9)
      .Eq: Token
    - arm:
      - \">\"
      - ERROR:
        - missing
        - (300:9)
      .Gt: Token
    - arm:
      - \">=\"
      - ERROR:
        - missing
        - (302:10)
      .GtEq: Token
    - arm:
      - \"<\"
      - ERROR:
        - missing
        - (304:9)
      .Lt: Token
    - arm:
      - \"<=\"
      - ERROR:
        - missing
        - (306:10)
      .LtEq: Token
    - arm:
      - \"<>\"
      - ERROR:
        - missing
        - (308:10)
      .LtGt: Token
    - arm:
      - \"-\"
      - ERROR:
        - missing
        - (310:9)
      .Minus: Token
    - arm:
      - \"%\"
      - ERROR:
        - missing
        - (312:9)
      .Percent: Token
    - arm:
      - \"|\"
      - ERROR:
        - missing
        - (314:9)
      .Pipe: Token
    - arm:
      - \"|>\"
      - ERROR:
        - missing
        - (316:10)
      .PipeGt: Token
    - arm:
      - \"||\"
      - ERROR:
        - missing
        - (318:10)
      .PipePipe: Token
    - arm:
      - \"+\"
      - ERROR:
        - missing
        - (320:9)
      .Plus: Token
    - arm:
      - \";\"
      - ERROR:
        - missing
        - (322:9)
      .Semi: Token
    - arm:
      - \"*\"
      - ERROR:
        - missing
        - (324:9)
      .Star: Token
    - arm:
      - \"/\"
      - ERROR:
        - missing
        - (326:9)
      .Slash: Token
    - arm:
      - _
      - ERROR:
        - missing
        - (328:7)
      .Error: Token
  let:
  - fun:
    - tokenFromPun
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - r
          - l
        - 1
    - match:
      - index: text
      - arm:
        - \',\'
        - ERROR:
          - missing
          - (334:9)
        .Comma: Token
      - arm:
        - \'(\'
        - ERROR:
          - missing
          - (336:9)
        .ParenL: Token
      - arm:
        - \')\'
        - ERROR:
          - missing
          - (338:9)
        .ParenR: Token
      - arm:
        - \'[\'
        - ERROR:
          - missing
          - (340:9)
        .BracketL: Token
      - arm:
        - \']\'
        - ERROR:
          - missing
          - (342:9)
        .BracketR: Token
      - arm:
        - _
        - ERROR:
          - missing
          - (344:7)
        bin:
        - failwith
        - \"NEVER! charIsPun is broken\"
  let:
  - anno:
    - fun:
      - tokenFromIntLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - let:
    - value
    - bin:
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - l
          - r
      - int
    bin:
    - .Int: Token
    - value
  let:
  - anno:
    - fun:
      - tokenFromCharLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\'\'
        - bin:
          - index: text
          - \'\\\'\'
    - let:
      - i
      - bin:
        - l
        - 1
      let:
      - value
      - match:
        - index: text
        - arm:
          - \'\\\\\'
          - ERROR:
            - missing
            - (358:12)
          match:
          - index: text
          - arm:
            - \'x\'
            - ERROR:
              - missing
              - (360:13)
            charNull
          - arm:
            - \'t\'
            - ERROR:
              - missing
              - (362:13)
            \'\\t\'
          - arm:
            - \'r\'
            - ERROR:
              - missing
              - (364:13)
            \'\\r\'
          - arm:
            - \'n\'
            - ERROR:
              - missing
              - (366:13)
            \'\\n\'
          - arm:
            - c
            - ERROR:
              - missing
              - (368:11)
            c
        - arm:
          - c
          - ERROR:
            - missing
            - (370:9)
          c
      bin:
      - .Char: Token
      - value
  let:
  - anno:
    - fun:
      - tokenFromStrLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\"\'
        - bin:
          - index: text
          - \'\\\"\'
    - let:
      - fun:
        - go
        - acc
        - i
      - let:
        - fun:
          - next
          - i
        - if:
          - bin:
            - bin:
              - i
              - bin:
                - r
                - 1
            - bin:
              - index: text
              - \'\\\\\'
          - i
          - bin:
            - next
            - bin:
              - i
              - 1
        let:
        - endIndex
        - bin:
          - next
          - i
        let:
        - acc
        - bin:
          - bin:
            - text
            - bin:
              - bin:
                - strSlice
                - i
              - endIndex
          - acc
        let:
        - i
        - endIndex
        if:
        - bin:
          - i
          - bin:
            - r
            - 1
        - bin:
          - bin:
            - acc
            - listRev
          - strConcat
        - semi:
          - bin:
            - assert
            - bin:
              - index: text
              - \'\\\\\'
          - match:
            - index: text
            - arm:
              - \'x\'
              - ERROR:
                - missing
                - (397:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\0\"
                  - acc
              - bin:
                - i
                - 4
            - arm:
              - \'t\'
              - ERROR:
                - missing
                - (399:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\t\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'r\'
              - ERROR:
                - missing
                - (401:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\r\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'n\'
              - ERROR:
                - missing
                - (403:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\n\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - _
              - ERROR:
                - missing
                - (405:11)
              bin:
              - bin:
                - go
                - bin:
                  - bin:
                    - text
                    - bin:
                      - bin:
                        - strSlice
                        - bin:
                          - i
                          - 1
                      - bin:
                        - i
                        - 2
                  - acc
              - bin:
                - i
                - 2
      let:
      - value
      - bin:
        - bin:
          - go
          - list
        - bin:
          - l
          - 1
      bin:
      - .Str: Token
      - value
  let:
  - fun:
    - tokenFromStrLitRaw
    - anno:
      - text
      - string
    - l
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 6
            - r
          - bin:
            - text
            - bin:
              - strIsFollowedByRawQuotes
              - l
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - bin:
              - r
              - 3
    - bin:
      - .Str: Token
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - bin:
              - l
              - 3
          - bin:
            - r
            - 3
  let:
  - fun:
    - tokCtxToTextIndex
    - anno:
      - tuple:
        - text
        - i
        - _
        - _
      - TokenizeCtx
  - tuple:
    - text
    - i
  let:
  - anno:
    - fun:
      - tokCtxSkip
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - acc
  let:
  - anno:
    - fun:
      - tokCtxPush
      - kind
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newAcc
      - bin:
        - tuple:
          - kind
          - loc
        - acc
      let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - newAcc
  let:
  - fun:
    - tokEof
    - anno:
      - tuple:
        - text
        - i
        - _
        - acc
      - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookEof
          - text
        - i
    - bin:
      - acc
      - listRev
  let:
  - fun:
    - tokError
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanError
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokComment
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanLine
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokSpace
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanSpace
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokPun
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanPun
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromPun
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokOp
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanOp
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromOp
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIdent
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIdent
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIdent
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIntLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIntLit
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIntLit
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokCharLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanCharLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromCharLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLitRaw
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLitRaw
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLitRaw
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - anno:
    - fun:
      - tokenize
      - anno:
        - text
        - string
    - list:
      - tuple:
        - Token
        - Loc
  - let:
    - fun:
      - go
      - t
    - let:
      - tuple:
        - text
        - i
      - bin:
        - t
        - tokCtxToTextIndex
      if:
      - bin:
        - bin:
          - lookEof
          - text
        - i
      - bin:
        - t
        - tokEof
      - if:
        - bin:
          - bin:
            - lookComment
            - text
          - i
        - bin:
          - bin:
            - t
            - tokComment
          - go
        - if:
          - bin:
            - bin:
              - lookSpace
              - text
            - i
          - bin:
            - bin:
              - t
              - tokSpace
            - go
          - if:
            - bin:
              - bin:
                - lookOp
                - text
              - i
            - bin:
              - bin:
                - t
                - tokOp
              - go
            - if:
              - bin:
                - bin:
                  - lookIntLit
                  - text
                - i
              - bin:
                - bin:
                  - t
                  - tokIntLit
                - go
              - if:
                - bin:
                  - bin:
                    - lookIdent
                    - text
                  - i
                - bin:
                  - bin:
                    - t
                    - tokIdent
                  - go
                - if:
                  - bin:
                    - bin:
                      - lookCharLit
                      - text
                    - i
                  - bin:
                    - bin:
                      - t
                      - tokCharLit
                    - go
                  - if:
                    - bin:
                      - bin:
                        - lookStrLitRaw
                        - text
                      - i
                    - bin:
                      - bin:
                        - t
                        - tokStrLitRaw
                      - go
                    - if:
                      - bin:
                        - bin:
                          - lookStrLit
                          - text
                        - i
                      - bin:
                        - bin:
                          - t
                          - tokStrLit
                        - go
                      - if:
                        - bin:
                          - bin:
                            - lookPun
                            - text
                          - i
                        - bin:
                          - bin:
                            - t
                            - tokPun
                          - go
                        - bin:
                          - bin:
                            - t
                            - tokError
                          - go
    bin:
    - go
    - tuple:
      - text
      - 0
      - tuple:
        - 0
        - 0
      - list
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- synonym
- let-fun:
  - 8
  - inf:
    - inf:
      - 18
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - 19
                - 0
            - false
    - let-fun:
      - 24
      - match:
        - inf:
          - inf:
            - prim
            - 28
          - 29
      inf:
      - inf:
        - inf:
          - 41
          - 42
        - 43
      - 44
  let-val:
  - inf:
    - inf:
      - 46
      - 0
  let-fun:
  - 48
  - inf:
    - match:
      - match:
        - inf:
          - inf:
            - prim
            - 51
          - \'_\'
  let-fun:
  - 57
  - inf:
    - match:
      - match:
        - match:
          - match:
            - match:
              - match:
                - match:
                  - match:
                    - match:
                      - match:
                        - match:
                          - match:
                            - match:
                              - match:
                                - inf:
                                  - inf:
                                    - prim
                                    - 60
                                  - \'+\'
  let-fun:
  - 76
  - inf:
    - match:
      - match:
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - 79
              - \',\'
  let-fun:
  - 85
  - inf:
    - let-fun:
      - 92
      - match:
        - inf:
          - inf:
            - prim
            - 95
          - .Length: 96
      match:
      - inf:
        - inf:
          - prim
          - inf:
            - inf:
              - prim
              - .Length: 106
            - inf:
              - inf:
                - prim
                - 107
              - .Length: 108
        - false
  let-fun:
  - 112
  - inf:
    - inf:
      - inf:
        - inf:
          - 117
          - 118
        - \"\\\"\\\"\\\"\"
      - 119
  let-fun:
  - 121
  - inf:
    - inf:
      - prim
      - 126
    - 1
  let-fun:
  - 127
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - 132
        - .Length: 133
    - false
  let-fun:
  - 134
  - inf:
    - 139
    - inf:
      - inf:
        - prim
        - 140
      - 141
  let-fun:
  - 142
  - inf:
    - inf:
      - 147
      - inf:
        - inf:
          - 148
          - 149
        - 150
    - let-fun:
      - 151
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - 153
            - .Length: 154
      inf:
      - 161
      - 162
  let-fun:
  - 163
  - match:
    - inf:
      - inf:
        - inf:
          - 168
          - 169
        - \"//\"
      - 170
  let-fun:
  - 174
  - inf:
    - inf:
      - 179
      - inf:
        - inf:
          - 180
          - 181
        - 182
    - let-fun:
      - 183
      - match:
        - inf:
          - inf:
            - prim
            - 185
          - .Length: 186
      inf:
      - 193
      - 194
  let-fun:
  - 195
  - inf:
    - 200
    - inf:
      - inf:
        - prim
        - 201
      - 202
  let-fun:
  - 203
  - inf:
    - inf:
      - 208
      - inf:
        - inf:
          - 209
          - 210
        - 211
    - inf:
      - inf:
        - prim
        - 212
      - 1
  let-fun:
  - 213
  - inf:
    - 218
    - inf:
      - inf:
        - prim
        - 219
      - 220
  let-fun:
  - 221
  - inf:
    - inf:
      - 226
      - inf:
        - inf:
          - 227
          - 228
        - 229
    - let-fun:
      - 230
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - 232
            - .Length: 233
      inf:
      - 240
      - 241
  let-fun:
  - 242
  - match:
    - inf:
      - 247
      - inf:
        - inf:
          - prim
          - 248
        - 249
  let-fun:
  - 254
  - inf:
    - inf:
      - 259
      - inf:
        - inf:
          - 260
          - 261
        - 262
    - let-fun:
      - 263
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - 265
            - .Length: 266
      inf:
      - 273
      - 274
  let-fun:
  - 275
  - inf:
    - 280
    - inf:
      - inf:
        - prim
        - 281
      - 282
  let-fun:
  - 283
  - inf:
    - inf:
      - 288
      - inf:
        - inf:
          - 289
          - 290
        - 291
    - let-fun:
      - 292
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - 294
            - .Length: 295
      inf:
      - 302
      - 303
  let-fun:
  - 304
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - 309
        - 310
    - \'\\\'\'
  let-fun:
  - 311
  - inf:
    - inf:
      - 316
      - inf:
        - inf:
          - 317
          - 318
        - 319
    - let-fun:
      - 320
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - 322
                - 1
            - .Length: 323
      inf:
      - 345
      - inf:
        - inf:
          - prim
          - 346
        - 1
  let-fun:
  - 347
  - inf:
    - inf:
      - prim
      - inf:
        - inf:
          - prim
          - 352
        - 353
    - \'\\\"\'
  let-fun:
  - 354
  - inf:
    - inf:
      - 359
      - inf:
        - inf:
          - 360
          - 361
        - 362
    - let-fun:
      - 363
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - 365
                - 1
            - .Length: 366
      inf:
      - 388
      - inf:
        - inf:
          - prim
          - 389
        - 1
  let-fun:
  - 390
  - inf:
    - inf:
      - 395
      - 396
    - 397
  let-fun:
  - 398
  - inf:
    - inf:
      - 403
      - inf:
        - inf:
          - 404
          - 405
        - 406
    - let-fun:
      - 407
      - match:
        - inf:
          - inf:
            - 409
            - 410
          - 411
      inf:
      - 421
      - inf:
        - inf:
          - prim
          - 422
        - 3
  let-fun:
  - 423
  - inf:
    - match:
      - inf:
        - inf:
          - inf:
            - 428
            - 429
          - 430
        - 431
  let-fun:
  - 458
  - inf:
    - match:
      - inf:
        - inf:
          - inf:
            - 463
            - 464
          - 465
        - 466
  let-fun:
  - 492
  - inf:
    - inf:
      - 498
      - inf:
        - inf:
          - prim
          - inf:
            - inf:
              - prim
              - 499
            - 500
        - 1
    - match:
      - inf:
        - inf:
          - prim
          - 501
        - 502
  let-fun:
  - 510
  - inf:
    - let-val:
      - inf:
        - 516
        - inf:
          - inf:
            - inf:
              - 517
              - 518
            - 519
          - 520
      inf:
      - .Int: 521
      - 522
  let-fun:
  - 524
  - inf:
    - inf:
      - inf:
        - 529
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - 530
                  - inf:
                    - inf:
                      - prim
                      - 531
                    - 2
              - false
      - let-val:
        - inf:
          - inf:
            - prim
            - 537
          - 1
        let-val:
        - match:
          - inf:
            - inf:
              - prim
              - 539
            - 540
        inf:
        - .Char: 548
        - 549
  let-fun:
  - 551
  - inf:
    - inf:
      - inf:
        - 556
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - 557
                  - inf:
                    - inf:
                      - prim
                      - 558
                    - 2
              - false
      - let-fun:
        - 563
        - let-fun:
          - 566
          - match:
            - match:
              - inf:
                - inf:
                  - prim
                  - 568
                - inf:
                  - inf:
                    - prim
                    - 569
                  - 1
          let-val:
          - inf:
            - 576
            - 577
          let-val:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - inf:
                    - 579
                    - 580
                  - 581
                - 582
            - 583
          let-val: 585
          match:
          - inf:
            - inf:
              - prim
              - 586
            - inf:
              - inf:
                - prim
                - 587
              - 1
        let-val:
        - inf:
          - inf:
            - 617
            - prim
          - inf:
            - inf:
              - prim
              - 618
            - 1
        inf:
        - .Str: 619
        - 620
  let-fun:
  - 622
  - inf:
    - inf:
      - 627
      - match:
        - match:
          - inf:
            - inf:
              - prim
              - inf:
                - inf:
                  - prim
                  - 628
                - inf:
                  - inf:
                    - prim
                    - 629
                  - 6
            - false
    - inf:
      - .Str: 636
      - inf:
        - inf:
          - inf:
            - 637
            - inf:
              - inf:
                - prim
                - 638
              - 3
          - inf:
            - inf:
              - prim
              - 639
            - 3
        - 640
  let-fun:
  - 641
  - inf:
    - 647
    - 648
  let-fun:
  - 649
  - inf:
    - inf:
      - inf:
        - 656
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - 657
                  - 0
              - false
      - let-val:
        - inf:
          - inf:
            - inf:
              - inf:
                - 663
                - 664
              - 665
            - 666
          - 667
        inf:
        - 668
        - 669
        - 670
        - 671
  let-fun:
  - 673
  - inf:
    - inf:
      - inf:
        - 681
        - match:
          - match:
            - inf:
              - inf:
                - prim
                - inf:
                  - inf:
                    - prim
                    - 682
                  - 0
              - false
      - let-val:
        - inf:
          - inf:
            - prim
            - inf:
              - 688
              - 689
          - 690
        let-val:
        - inf:
          - inf:
            - inf:
              - inf:
                - 692
                - 693
              - 694
            - 695
          - 696
        inf:
        - 697
        - 698
        - 699
        - 700
  let-fun:
  - 702
  - inf:
    - inf:
      - 708
      - inf:
        - inf:
          - 709
          - 710
        - 711
    - inf:
      - 712
      - 713
  let-fun:
  - 714
  - let-val:
    - inf:
      - 718
      - 719
    let-val:
    - inf:
      - inf:
        - 721
        - 722
      - 723
    inf:
    - inf:
      - 724
      - 725
    - 726
  let-fun:
  - 727
  - let-val:
    - inf:
      - 732
      - 733
    let-val:
    - inf:
      - inf:
        - 735
        - 736
      - 737
    inf:
    - inf:
      - 738
      - 739
    - 740
  let-fun:
  - 741
  - let-val:
    - inf:
      - 746
      - 747
    let-val:
    - inf:
      - inf:
        - 749
        - 750
      - 751
    inf:
    - inf:
      - 752
      - 753
    - 754
  let-fun:
  - 755
  - let-val:
    - inf:
      - 759
      - 760
    let-val:
    - inf:
      - inf:
        - 762
        - 763
      - 764
    let-val:
    - inf:
      - inf:
        - inf:
          - 766
          - 767
        - 768
      - 769
    inf:
    - inf:
      - inf:
        - 770
        - 771
      - 772
    - 773
  let-fun:
  - 774
  - let-val:
    - inf:
      - 778
      - 779
    let-val:
    - inf:
      - inf:
        - 781
        - 782
      - 783
    let-val:
    - inf:
      - inf:
        - inf:
          - 785
          - 786
        - 787
      - 788
    inf:
    - inf:
      - inf:
        - 789
        - 790
      - 791
    - 792
  let-fun:
  - 793
  - let-val:
    - inf:
      - 797
      - 798
    let-val:
    - inf:
      - inf:
        - 800
        - 801
      - 802
    let-val:
    - inf:
      - inf:
        - inf:
          - 804
          - 805
        - 806
      - 807
    inf:
    - inf:
      - inf:
        - 808
        - 809
      - 810
    - 811
  let-fun:
  - 812
  - let-val:
    - inf:
      - 816
      - 817
    let-val:
    - inf:
      - inf:
        - 819
        - 820
      - 821
    let-val:
    - inf:
      - inf:
        - inf:
          - 823
          - 824
        - 825
      - 826
    inf:
    - inf:
      - inf:
        - 827
        - 828
      - 829
    - 830
  let-fun:
  - 831
  - let-val:
    - inf:
      - 835
      - 836
    let-val:
    - inf:
      - inf:
        - 839
        - 840
      - 841
    let-val:
    - match: 843
    inf:
    - inf:
      - inf:
        - 849
        - 850
      - 851
    - 852
  let-fun:
  - 853
  - let-val:
    - inf:
      - 857
      - 858
    let-val:
    - inf:
      - inf:
        - 861
        - 862
      - 863
    let-val:
    - match: 865
    inf:
    - inf:
      - inf:
        - 871
        - 872
      - 873
    - 874
  let-fun:
  - 875
  - let-val:
    - inf:
      - 879
      - 880
    let-val:
    - inf:
      - inf:
        - 883
        - 884
      - 885
    let-val:
    - match: 887
    inf:
    - inf:
      - inf:
        - 893
        - 894
      - 895
    - 896
  let-fun:
  - 897
  - inf:
    - let-fun:
      - 900
      - let-val:
        - inf:
          - 904
          - 905
        match:
        - inf:
          - inf:
            - 906
            - 907
          - 908
      inf:
      - 968
      - inf:
        - 969
        - 0
        - inf:
          - 0
          - 0
        - prim
  inf
FILE MiloneLang/Parsing.fs
module (76, 0)
rec (76, 7)
MiloneLang (76, 11)
. (76, 21)
Parsing (76, 22)
open (78, 0)
MiloneLang (78, 5)
. (78, 15)
Types (78, 16)
open (79, 0)
MiloneLang (79, 5)
. (79, 15)
Helpers (79, 16)
let (85, 0)
leadsExpr (85, 4)
tokens (85, 14)
= (85, 21)
match (86, 2)
tokens (86, 8)
with (86, 15)
| (87, 2)
( (87, 4)
token (87, 5)
, (87, 10)
_ (87, 12)
) (87, 13)
:: (87, 15)
_ (87, 18)
-> (87, 20)
tokenIsExprFirst (88, 4)
token (88, 21)
| (90, 2)
_ (90, 4)
-> (90, 6)
false (91, 4)
let (93, 0)
leadsArg (93, 4)
tokens (93, 13)
= (93, 20)
match (94, 2)
tokens (94, 8)
with (94, 15)
| (95, 2)
( (95, 4)
token (95, 5)
, (95, 10)
_ (95, 12)
) (95, 13)
:: (95, 15)
_ (95, 18)
-> (95, 20)
tokenIsArgFirst (96, 4)
token (96, 20)
| (98, 2)
_ (98, 4)
-> (98, 6)
false (99, 4)
let (101, 0)
leadsPat (101, 4)
tokens (101, 13)
= (101, 20)
match (102, 2)
tokens (102, 8)
with (102, 15)
| (103, 2)
( (103, 4)
token (103, 5)
, (103, 10)
_ (103, 12)
) (103, 13)
:: (103, 15)
_ (103, 18)
-> (103, 20)
tokenIsPatFirst (104, 4)
token (104, 20)
| (106, 2)
_ (106, 4)
-> (106, 6)
false (107, 4)
let (110, 0)
private (110, 4)
nextLoc (110, 12)
tokens (110, 20)
: (110, 26)
Loc (110, 28)
= (110, 32)
match (111, 2)
tokens (111, 8)
with (111, 15)
| (112, 2)
[ (112, 4)
] (112, 5)
-> (112, 7)
( (113, 4)
- (113, 5)
1 (113, 6)
, (113, 7)
0 (113, 9)
) (113, 10)
| (115, 2)
( (115, 4)
_ (115, 5)
, (115, 6)
loc (115, 8)
) (115, 11)
:: (115, 13)
_ (115, 16)
-> (115, 18)
loc (116, 4)
let (119, 0)
private (119, 4)
nextInside (119, 12)
baseLoc (119, 23)
tokens (119, 31)
: (119, 37)
bool (119, 39)
= (119, 44)
match (120, 2)
tokens (120, 8)
with (120, 15)
| (121, 2)
[ (121, 4)
] (121, 5)
-> (121, 7)
false (122, 4)
| (125, 2)
( (125, 4)
_ (125, 5)
, (125, 6)
loc (125, 8)
) (125, 11)
:: (125, 13)
_ (125, 16)
when (126, 4)
locInside (126, 9)
baseLoc (126, 19)
loc (126, 27)
-> (126, 31)
true (127, 4)
| (129, 2)
_ (129, 4)
-> (129, 6)
false (130, 4)
let (136, 0)
parseErrorCore (136, 4)
msg (136, 19)
loc (136, 23)
tokens (136, 27)
errors (136, 34)
= (136, 41)
let (137, 2)
near (137, 6)
= (137, 11)
tokens (137, 13)
|> (137, 20)
listMap (137, 23)
fst (137, 31)
|> (137, 35)
listTruncate (137, 38)
6 (137, 51)
let (138, 2)
msg (138, 6)
= (138, 10)
sprintf (138, 12)
"Parse error %s near %A" (138, 20)
msg (138, 45)
near (138, 49)
( (139, 2)
msg (139, 3)
, (139, 6)
loc (139, 8)
) (139, 11)
:: (139, 13)
errors (139, 16)
let (141, 0)
parseTyError (141, 4)
msg (141, 17)
( (141, 21)
tokens (141, 22)
, (141, 28)
errors (141, 30)
) (141, 36)
= (141, 38)
let (142, 2)
loc (142, 6)
= (142, 10)
nextLoc (142, 12)
tokens (142, 20)
let (143, 2)
errors (143, 6)
= (143, 13)
parseErrorCore (143, 15)
msg (143, 30)
loc (143, 34)
tokens (143, 38)
errors (143, 45)
ATy (144, 2)
. (144, 5)
Missing (144, 6)
loc (144, 14)
, (144, 17)
tokens (144, 19)
, (144, 25)
errors (144, 27)
let (146, 0)
parsePatError (146, 4)
msg (146, 18)
( (146, 22)
tokens (146, 23)
, (146, 29)
errors (146, 31)
) (146, 37)
= (146, 39)
let (147, 2)
loc (147, 6)
= (147, 10)
nextLoc (147, 12)
tokens (147, 20)
let (148, 2)
errors (148, 6)
= (148, 13)
parseErrorCore (148, 15)
msg (148, 30)
loc (148, 34)
tokens (148, 38)
errors (148, 45)
APat (149, 2)
. (149, 6)
Missing (149, 7)
loc (149, 15)
, (149, 18)
tokens (149, 20)
, (149, 26)
errors (149, 28)
let (151, 0)
parseExprError (151, 4)
msg (151, 19)
( (151, 23)
tokens (151, 24)
, (151, 30)
errors (151, 32)
) (151, 38)
= (151, 40)
let (152, 2)
loc (152, 6)
= (152, 10)
nextLoc (152, 12)
tokens (152, 20)
let (153, 2)
errors (153, 6)
= (153, 13)
parseErrorCore (153, 15)
msg (153, 30)
loc (153, 34)
tokens (153, 38)
errors (153, 45)
AExpr (154, 2)
. (154, 7)
Missing (154, 8)
loc (154, 16)
, (154, 19)
tokens (154, 21)
, (154, 27)
errors (154, 29)
let (156, 0)
parseNewError (156, 4)
msg (156, 18)
( (156, 22)
tokens (156, 23)
, (156, 29)
errors (156, 31)
) (156, 37)
= (156, 39)
let (157, 2)
loc (157, 6)
= (157, 10)
nextLoc (157, 12)
tokens (157, 20)
parseErrorCore (158, 2)
msg (158, 17)
loc (158, 21)
tokens (158, 25)
errors (158, 32)
let (165, 0)
parseTyArgs (165, 4)
baseLoc (165, 16)
( (165, 24)
tokens (165, 25)
, (165, 31)
errors (165, 33)
) (165, 39)
= (165, 41)
match (166, 2)
tokens (166, 8)
with (166, 15)
| (167, 2)
( (167, 4)
Token (167, 5)
. (167, 10)
Lt (167, 11)
, (167, 13)
ltLoc (167, 15)
) (167, 20)
:: (167, 22)
tokens (167, 25)
when (167, 32)
locInside (167, 37)
baseLoc (167, 47)
ltLoc (167, 55)
-> (167, 61)
let (168, 4)
rec (168, 8)
go (168, 12)
acc (168, 15)
( (168, 19)
tokens (168, 20)
, (168, 26)
errors (168, 28)
) (168, 34)
= (168, 36)
match (169, 6)
tokens (169, 12)
with (169, 19)
| (170, 6)
( (170, 8)
Token (170, 9)
. (170, 14)
Comma (170, 15)
, (170, 20)
_ (170, 22)
) (170, 23)
:: (170, 25)
tokens (170, 28)
-> (170, 35)
let (171, 8)
argTy (171, 12)
, (171, 17)
tokens (171, 19)
, (171, 25)
errors (171, 27)
= (171, 34)
parseTy (171, 36)
baseLoc (171, 44)
( (171, 52)
tokens (171, 53)
, (171, 59)
errors (171, 61)
) (171, 67)
go (172, 8)
( (172, 11)
argTy (172, 12)
:: (172, 18)
acc (172, 21)
) (172, 24)
( (172, 26)
tokens (172, 27)
, (172, 33)
errors (172, 35)
) (172, 41)
| (174, 6)
_ (174, 8)
-> (174, 10)
listRev (175, 8)
acc (175, 16)
, (175, 19)
tokens (175, 21)
, (175, 27)
errors (175, 29)
let (177, 4)
argTy (177, 8)
, (177, 13)
tokens (177, 15)
, (177, 21)
errors (177, 23)
= (177, 30)
parseTy (177, 32)
baseLoc (177, 40)
( (177, 48)
tokens (177, 49)
, (177, 55)
errors (177, 57)
) (177, 63)
let (178, 4)
argTys (178, 8)
, (178, 14)
tokens (178, 16)
, (178, 22)
errors (178, 24)
= (178, 31)
go (178, 33)
[ (178, 36)
argTy (178, 37)
] (178, 42)
( (178, 44)
tokens (178, 45)
, (178, 51)
errors (178, 53)
) (178, 59)
let (180, 4)
tokens (180, 8)
, (180, 14)
errors (180, 16)
= (180, 23)
match (181, 6)
tokens (181, 12)
with (181, 19)
| (182, 6)
( (182, 8)
Token (182, 9)
. (182, 14)
Gt (182, 15)
, (182, 17)
_ (182, 19)
) (182, 20)
:: (182, 22)
tokens (182, 25)
-> (182, 32)
tokens (183, 8)
, (183, 14)
errors (183, 16)
| (185, 6)
_ (185, 8)
-> (185, 10)
let (186, 8)
errors (186, 12)
= (186, 19)
parseNewError (186, 21)
"Expected \'>\'" (186, 35)
( (186, 50)
tokens (186, 51)
, (186, 57)
errors (186, 59)
) (186, 65)
tokens (187, 8)
, (187, 14)
errors (187, 16)
argTys (189, 4)
, (189, 10)
tokens (189, 12)
, (189, 18)
errors (189, 20)
| (191, 2)
_ (191, 4)
-> (191, 6)
[ (192, 4)
] (192, 5)
, (192, 6)
tokens (192, 8)
, (192, 14)
errors (192, 16)
let (194, 0)
parseTyAtom (194, 4)
baseLoc (194, 16)
( (194, 24)
tokens (194, 25)
, (194, 31)
errors (194, 33)
) (194, 39)
= (194, 41)
match (195, 2)
tokens (195, 8)
with (195, 15)
| (196, 2)
_ (196, 4)
when (196, 6)
nextInside (196, 11)
baseLoc (196, 22)
tokens (196, 30)
|> (196, 37)
not (196, 40)
-> (196, 44)
parseTyError (197, 4)
"Expected a type atom" (197, 17)
( (197, 40)
tokens (197, 41)
, (197, 47)
errors (197, 49)
) (197, 55)
| (199, 2)
( (199, 4)
Token (199, 5)
. (199, 10)
Ident (199, 11)
ident (199, 17)
, (199, 22)
loc (199, 24)
) (199, 27)
:: (199, 29)
tokens (199, 32)
-> (199, 39)
let (200, 4)
argTys (200, 8)
, (200, 14)
tokens (200, 16)
, (200, 22)
errors (200, 24)
= (200, 31)
parseTyArgs (200, 33)
baseLoc (200, 45)
( (200, 53)
tokens (200, 54)
, (200, 60)
errors (200, 62)
) (200, 68)
ATy (201, 4)
. (201, 7)
App (201, 8)
( (201, 12)
ident (201, 13)
, (201, 18)
argTys (201, 20)
, (201, 26)
loc (201, 28)
) (201, 31)
, (201, 32)
tokens (201, 34)
, (201, 40)
errors (201, 42)
| (203, 2)
( (203, 4)
Token (203, 5)
. (203, 10)
ParenL (203, 11)
, (203, 17)
_ (203, 19)
) (203, 20)
:: (203, 22)
tokens (203, 25)
-> (203, 32)
let (204, 4)
ty (204, 8)
, (204, 10)
tokens (204, 12)
, (204, 18)
errors (204, 20)
= (204, 27)
parseTy (204, 29)
baseLoc (204, 37)
( (204, 45)
tokens (204, 46)
, (204, 52)
errors (204, 54)
) (204, 60)
match (206, 4)
tokens (206, 10)
with (206, 17)
| (207, 4)
( (207, 6)
Token (207, 7)
. (207, 12)
ParenR (207, 13)
, (207, 19)
_ (207, 21)
) (207, 22)
:: (207, 24)
tokens (207, 27)
-> (207, 34)
ty (208, 6)
, (208, 8)
tokens (208, 10)
, (208, 16)
errors (208, 18)
| (210, 4)
_ (210, 6)
-> (210, 8)
let (211, 6)
errors (211, 10)
= (211, 17)
parseNewError (211, 19)
"Expected \')\'" (211, 33)
( (211, 48)
tokens (211, 49)
, (211, 55)
errors (211, 57)
) (211, 63)
ty (212, 6)
, (212, 8)
tokens (212, 10)
, (212, 16)
errors (212, 18)
| (214, 2)
_ (214, 4)
-> (214, 6)
parseTyError (215, 4)
"Expected a type atom" (215, 17)
( (215, 40)
tokens (215, 41)
, (215, 47)
errors (215, 49)
) (215, 55)
let (218, 0)
parseTySuffix (218, 4)
baseLoc (218, 18)
( (218, 26)
tokens (218, 27)
, (218, 33)
errors (218, 35)
) (218, 41)
= (218, 43)
let (219, 2)
rec (219, 6)
go (219, 10)
( (219, 13)
ty (219, 14)
, (219, 16)
tokens (219, 18)
, (219, 24)
errors (219, 26)
) (219, 32)
= (219, 34)
let (220, 4)
inside (220, 8)
= (220, 15)
nextInside (220, 17)
baseLoc (220, 28)
tokens (220, 36)
match (221, 4)
tokens (221, 10)
with (221, 17)
| (222, 4)
( (222, 6)
Token (222, 7)
. (222, 12)
Ident (222, 13)
ident (222, 19)
, (222, 24)
loc (222, 26)
) (222, 29)
:: (222, 31)
tokens (222, 34)
when (222, 41)
inside (222, 46)
-> (222, 53)
go (223, 6)
( (223, 9)
ATy (223, 10)
. (223, 13)
Suffix (223, 14)
( (223, 21)
ty (223, 22)
, (223, 24)
ident (223, 26)
, (223, 31)
loc (223, 33)
) (223, 36)
, (223, 37)
tokens (223, 39)
, (223, 45)
errors (223, 47)
) (223, 53)
| (225, 4)
_ (225, 6)
-> (225, 8)
ty (226, 6)
, (226, 8)
tokens (226, 10)
, (226, 16)
errors (226, 18)
parseTyAtom (228, 2)
baseLoc (228, 14)
( (228, 22)
tokens (228, 23)
, (228, 29)
errors (228, 31)
) (228, 37)
|> (228, 39)
go (228, 42)
let (232, 0)
parseTyPrefix (232, 4)
baseLoc (232, 18)
( (232, 26)
tokens (232, 27)
, (232, 33)
errors (232, 35)
) (232, 41)
= (232, 43)
match (233, 2)
tokens (233, 8)
with (233, 15)
| (234, 2)
( (234, 4)
Token (234, 5)
. (234, 10)
Ident (234, 11)
_ (234, 17)
, (234, 18)
_ (234, 20)
) (234, 21)
:: (234, 23)
( (234, 26)
Token (234, 27)
. (234, 32)
Colon (234, 33)
, (234, 38)
_ (234, 40)
) (234, 41)
:: (234, 43)
tokens (234, 46)
-> (234, 53)
parseTySuffix (235, 4)
baseLoc (235, 18)
( (235, 26)
tokens (235, 27)
, (235, 33)
errors (235, 35)
) (235, 41)
| (237, 2)
_ (237, 4)
-> (237, 6)
parseTySuffix (238, 4)
baseLoc (238, 18)
( (238, 26)
tokens (238, 27)
, (238, 33)
errors (238, 35)
) (238, 41)
let (241, 0)
parseTyTuple (241, 4)
baseLoc (241, 17)
( (241, 25)
tokens (241, 26)
, (241, 32)
errors (241, 34)
) (241, 40)
= (241, 42)
let (242, 2)
rec (242, 6)
go (242, 10)
acc (242, 13)
( (242, 17)
tokens (242, 18)
, (242, 24)
errors (242, 26)
) (242, 32)
= (242, 34)
match (243, 4)
tokens (243, 10)
with (243, 17)
| (244, 4)
( (244, 6)
Token (244, 7)
. (244, 12)
Star (244, 13)
, (244, 17)
_ (244, 19)
) (244, 20)
:: (244, 22)
tokens (244, 25)
-> (244, 32)
let (245, 6)
itemTy (245, 10)
, (245, 16)
tokens (245, 18)
, (245, 24)
errors (245, 26)
= (245, 33)
parseTyPrefix (245, 35)
baseLoc (245, 49)
( (245, 57)
tokens (245, 58)
, (245, 64)
errors (245, 66)
) (245, 72)
go (246, 6)
( (246, 9)
itemTy (246, 10)
:: (246, 17)
acc (246, 20)
) (246, 23)
( (246, 25)
tokens (246, 26)
, (246, 32)
errors (246, 34)
) (246, 40)
| (248, 4)
_ (248, 6)
-> (248, 8)
listRev (249, 6)
acc (249, 14)
, (249, 17)
tokens (249, 19)
, (249, 25)
errors (249, 27)
let (251, 2)
itemTy (251, 6)
, (251, 12)
tokens (251, 14)
, (251, 20)
errors (251, 22)
= (251, 29)
parseTyPrefix (251, 31)
baseLoc (251, 45)
( (251, 53)
tokens (251, 54)
, (251, 60)
errors (251, 62)
) (251, 68)
match (253, 2)
tokens (253, 8)
with (253, 15)
| (254, 2)
( (254, 4)
Token (254, 5)
. (254, 10)
Star (254, 11)
, (254, 15)
opLoc (254, 17)
) (254, 22)
:: (254, 24)
_ (254, 27)
-> (254, 29)
let (255, 4)
itemTys (255, 8)
, (255, 15)
tokens (255, 17)
, (255, 23)
errors (255, 25)
= (255, 32)
go (255, 34)
[ (255, 37)
] (255, 38)
( (255, 40)
tokens (255, 41)
, (255, 47)
errors (255, 49)
) (255, 55)
ATy (256, 4)
. (256, 7)
Tuple (256, 8)
( (256, 14)
itemTy (256, 15)
:: (256, 22)
itemTys (256, 25)
, (256, 32)
opLoc (256, 34)
) (256, 39)
, (256, 40)
tokens (256, 42)
, (256, 48)
errors (256, 50)
| (258, 2)
_ (258, 4)
-> (258, 6)
itemTy (259, 4)
, (259, 10)
tokens (259, 12)
, (259, 18)
errors (259, 20)
let (263, 0)
parseTyFun (263, 4)
baseLoc (263, 15)
( (263, 23)
tokens (263, 24)
, (263, 30)
errors (263, 32)
) (263, 38)
= (263, 40)
let (264, 2)
sTy (264, 6)
, (264, 9)
tokens (264, 11)
, (264, 17)
errors (264, 19)
= (264, 26)
parseTyTuple (264, 28)
baseLoc (264, 41)
( (264, 49)
tokens (264, 50)
, (264, 56)
errors (264, 58)
) (264, 64)
match (266, 2)
tokens (266, 8)
with (266, 15)
| (267, 2)
( (267, 4)
Token (267, 5)
. (267, 10)
Arrow (267, 11)
, (267, 16)
opLoc (267, 18)
) (267, 23)
:: (267, 25)
tokens (267, 28)
-> (267, 35)
let (268, 4)
tTy (268, 8)
, (268, 11)
tokens (268, 13)
, (268, 19)
errors (268, 21)
= (268, 28)
parseTyFun (268, 30)
baseLoc (268, 41)
( (268, 49)
tokens (268, 50)
, (268, 56)
errors (268, 58)
) (268, 64)
ATy (269, 4)
. (269, 7)
Fun (269, 8)
( (269, 12)
sTy (269, 13)
, (269, 16)
tTy (269, 18)
, (269, 21)
opLoc (269, 23)
) (269, 28)
, (269, 29)
tokens (269, 31)
, (269, 37)
errors (269, 39)
| (271, 2)
_ (271, 4)
-> (271, 6)
sTy (272, 4)
, (272, 7)
tokens (272, 9)
, (272, 15)
errors (272, 17)
let (274, 0)
parseTy (274, 4)
baseLoc (274, 12)
( (274, 20)
tokens (274, 21)
, (274, 27)
errors (274, 29)
) (274, 35)
= (274, 37)
parseTyFun (275, 2)
baseLoc (275, 13)
( (275, 21)
tokens (275, 22)
, (275, 28)
errors (275, 30)
) (275, 36)
let (278, 0)
parseTyDeclUnion (278, 4)
baseLoc (278, 21)
( (278, 29)
tokens (278, 30)
, (278, 36)
errors (278, 38)
) (278, 44)
= (278, 46)
let (279, 2)
rec (279, 6)
go (279, 10)
acc (279, 13)
( (279, 17)
tokens (279, 18)
, (279, 24)
errors (279, 26)
) (279, 32)
= (279, 34)
match (280, 4)
tokens (280, 10)
with (280, 17)
| (281, 4)
( (281, 6)
Token (281, 7)
. (281, 12)
Pipe (281, 13)
, (281, 17)
_ (281, 19)
) (281, 20)
:: (282, 6)
( (282, 9)
Token (282, 10)
. (282, 15)
Ident (282, 16)
variantIdent (282, 22)
, (282, 34)
loc (282, 36)
) (282, 39)
:: (283, 6)
( (283, 9)
Token (283, 10)
. (283, 15)
Of (283, 16)
, (283, 18)
_ (283, 20)
) (283, 21)
:: (283, 23)
tokens (283, 26)
-> (283, 33)
let (284, 6)
payloadTy (284, 10)
, (284, 19)
tokens (284, 21)
, (284, 27)
errors (284, 29)
= (284, 36)
parseTy (284, 38)
baseLoc (284, 46)
( (284, 54)
tokens (284, 55)
, (284, 61)
errors (284, 63)
) (284, 69)
go (285, 6)
( (285, 9)
AVariant (285, 10)
( (285, 19)
variantIdent (285, 20)
, (285, 32)
Some (285, 34)
payloadTy (285, 39)
, (285, 48)
loc (285, 50)
) (285, 53)
:: (285, 55)
acc (285, 58)
) (285, 61)
( (285, 63)
tokens (285, 64)
, (285, 70)
errors (285, 72)
) (285, 78)
| (287, 4)
( (287, 6)
Token (287, 7)
. (287, 12)
Pipe (287, 13)
, (287, 17)
_ (287, 19)
) (287, 20)
:: (288, 6)
( (288, 9)
Token (288, 10)
. (288, 15)
Ident (288, 16)
variantIdent (288, 22)
, (288, 34)
loc (288, 36)
) (288, 39)
:: (288, 41)
tokens (288, 44)
-> (288, 51)
go (289, 6)
( (289, 9)
AVariant (289, 10)
( (289, 19)
variantIdent (289, 20)
, (289, 32)
None (289, 34)
, (289, 38)
loc (289, 40)
) (289, 43)
:: (289, 45)
acc (289, 48)
) (289, 51)
( (289, 53)
tokens (289, 54)
, (289, 60)
errors (289, 62)
) (289, 68)
| (291, 4)
_ (291, 6)
-> (291, 8)
listRev (292, 6)
acc (292, 14)
, (292, 17)
tokens (292, 19)
, (292, 25)
errors (292, 27)
let (294, 2)
variants (294, 6)
, (294, 14)
tokens (294, 16)
, (294, 22)
errors (294, 24)
= (294, 31)
go (294, 33)
[ (294, 36)
] (294, 37)
( (294, 39)
tokens (294, 40)
, (294, 46)
errors (294, 48)
) (294, 54)
ATyDecl (295, 2)
. (295, 9)
Union (295, 10)
variants (295, 16)
, (295, 24)
tokens (295, 26)
, (295, 32)
errors (295, 34)
let (299, 0)
parseTyDeclBody (299, 4)
baseLoc (299, 20)
( (299, 28)
tokens (299, 29)
, (299, 35)
errors (299, 37)
) (299, 43)
= (299, 45)
match (300, 2)
tokens (300, 8)
with (300, 15)
| (301, 2)
( (301, 4)
Token (301, 5)
. (301, 10)
Pipe (301, 11)
, (301, 15)
_ (301, 17)
) (301, 18)
:: (301, 20)
_ (301, 23)
-> (301, 25)
parseTyDeclUnion (302, 4)
baseLoc (302, 21)
( (302, 29)
tokens (302, 30)
, (302, 36)
errors (302, 38)
) (302, 44)
| (304, 2)
( (304, 4)
Token (304, 5)
. (304, 10)
Ident (304, 11)
_ (304, 17)
, (304, 18)
_ (304, 20)
) (304, 21)
:: (304, 23)
( (304, 26)
Token (304, 27)
. (304, 32)
Of (304, 33)
, (304, 35)
_ (304, 37)
) (304, 38)
:: (304, 40)
_ (304, 43)
-> (304, 45)
parseTyDeclUnion (305, 4)
baseLoc (305, 21)
( (305, 29)
tokens (305, 30)
, (305, 36)
errors (305, 38)
) (305, 44)
| (307, 2)
_ (307, 4)
-> (307, 6)
let (308, 4)
ty (308, 8)
, (308, 10)
tokens (308, 12)
, (308, 18)
errors (308, 20)
= (308, 27)
parseTy (308, 29)
baseLoc (308, 37)
( (308, 45)
tokens (308, 46)
, (308, 52)
errors (308, 54)
) (308, 60)
ATyDecl (309, 4)
. (309, 11)
Synonym (309, 12)
ty (309, 20)
, (309, 22)
tokens (309, 24)
, (309, 30)
errors (309, 32)
let (316, 0)
parsePatParenBody (316, 4)
baseLoc (316, 22)
( (316, 30)
tokens (316, 31)
, (316, 37)
errors (316, 39)
) (316, 45)
= (316, 47)
let (317, 2)
pat (317, 6)
, (317, 9)
tokens (317, 11)
, (317, 17)
errors (317, 19)
= (317, 26)
parsePat (317, 28)
baseLoc (317, 37)
( (317, 45)
tokens (317, 46)
, (317, 52)
errors (317, 54)
) (317, 60)
match (319, 2)
tokens (319, 8)
with (319, 15)
| (320, 2)
( (320, 4)
Token (320, 5)
. (320, 10)
ParenR (320, 11)
, (320, 17)
_ (320, 19)
) (320, 20)
:: (320, 22)
tokens (320, 25)
-> (320, 32)
pat (321, 4)
, (321, 7)
tokens (321, 9)
, (321, 15)
errors (321, 17)
| (323, 2)
tokens (323, 4)
-> (323, 11)
let (324, 4)
errors (324, 8)
= (324, 15)
parseNewError (324, 17)
"Expected \')\'" (324, 31)
( (324, 46)
tokens (324, 47)
, (324, 53)
errors (324, 55)
) (324, 61)
pat (325, 4)
, (325, 7)
tokens (325, 9)
, (325, 15)
errors (325, 17)
let (328, 0)
parsePatListBody (328, 4)
baseLoc (328, 21)
bracketLoc (328, 29)
( (328, 40)
tokens (328, 41)
, (328, 47)
errors (328, 49)
) (328, 55)
= (328, 57)
let (329, 2)
rec (329, 6)
go (329, 10)
patAcc (329, 13)
( (329, 20)
tokens (329, 21)
, (329, 27)
errors (329, 29)
) (329, 35)
= (329, 37)
match (330, 4)
tokens (330, 10)
with (330, 17)
| (331, 4)
( (331, 6)
Token (331, 7)
. (331, 12)
BracketR (331, 13)
, (331, 21)
_ (331, 23)
) (331, 24)
:: (331, 26)
tokens (331, 29)
-> (331, 36)
listRev (332, 6)
patAcc (332, 14)
, (332, 20)
tokens (332, 22)
, (332, 28)
errors (332, 30)
| (335, 4)
( (335, 6)
Token (335, 7)
. (335, 12)
Semi (335, 13)
, (335, 17)
_ (335, 19)
) (335, 20)
:: (335, 22)
tokens (335, 25)
-> (335, 32)
let (336, 6)
pat (336, 10)
, (336, 13)
tokens (336, 15)
, (336, 21)
errors (336, 23)
= (336, 30)
parsePat (336, 32)
baseLoc (336, 41)
( (336, 49)
tokens (336, 50)
, (336, 56)
errors (336, 58)
) (336, 64)
go (337, 6)
( (337, 9)
pat (337, 10)
:: (337, 14)
patAcc (337, 17)
) (337, 23)
( (337, 25)
tokens (337, 26)
, (337, 32)
errors (337, 34)
) (337, 40)
| (339, 4)
_ (339, 6)
-> (339, 8)
let (340, 6)
errors (340, 10)
= (340, 17)
parseNewError (340, 19)
"Expected \';\' or \']\'" (340, 33)
( (340, 55)
tokens (340, 56)
, (340, 62)
errors (340, 64)
) (340, 70)
listRev (341, 6)
patAcc (341, 14)
, (341, 20)
tokens (341, 22)
, (341, 28)
errors (341, 30)
let (343, 2)
itemPat (343, 6)
, (343, 13)
tokens (343, 15)
, (343, 21)
errors (343, 23)
= (343, 30)
parsePat (343, 32)
baseLoc (343, 41)
( (343, 49)
tokens (343, 50)
, (343, 56)
errors (343, 58)
) (343, 64)
let (344, 2)
itemPats (344, 6)
, (344, 14)
tokens (344, 16)
, (344, 22)
errors (344, 24)
= (344, 31)
go (344, 33)
[ (344, 36)
itemPat (344, 37)
] (344, 44)
( (344, 46)
tokens (344, 47)
, (344, 53)
errors (344, 55)
) (344, 61)
APat (345, 2)
. (345, 6)
ListLit (345, 7)
( (345, 15)
itemPats (345, 16)
, (345, 24)
bracketLoc (345, 26)
) (345, 36)
, (345, 37)
tokens (345, 39)
, (345, 45)
errors (345, 47)
let (347, 0)
parsePatAtom (347, 4)
baseLoc (347, 17)
( (347, 25)
tokens (347, 26)
, (347, 32)
errors (347, 34)
) (347, 40)
= (347, 42)
match (348, 2)
tokens (348, 8)
with (348, 15)
| (349, 2)
_ (349, 4)
when (349, 6)
not (349, 11)
( (349, 15)
nextInside (349, 16)
baseLoc (349, 27)
tokens (349, 35)
&& (349, 42)
leadsPat (349, 45)
tokens (349, 54)
) (349, 60)
-> (349, 62)
parsePatError (350, 4)
"Expected a pattern atom" (350, 18)
( (350, 44)
tokens (350, 45)
, (350, 51)
errors (350, 53)
) (350, 59)
| (352, 2)
( (352, 4)
Token (352, 5)
. (352, 10)
Bool (352, 11)
value (352, 16)
, (352, 21)
loc (352, 23)
) (352, 26)
:: (352, 28)
tokens (352, 31)
-> (352, 38)
APat (353, 4)
. (353, 8)
Lit (353, 9)
( (353, 13)
Lit (353, 14)
. (353, 17)
Bool (353, 18)
value (353, 23)
, (353, 28)
loc (353, 30)
) (353, 33)
, (353, 34)
tokens (353, 36)
, (353, 42)
errors (353, 44)
| (355, 2)
( (355, 4)
Token (355, 5)
. (355, 10)
Int (355, 11)
value (355, 15)
, (355, 20)
loc (355, 22)
) (355, 25)
:: (355, 27)
tokens (355, 30)
-> (355, 37)
APat (356, 4)
. (356, 8)
Lit (356, 9)
( (356, 13)
Lit (356, 14)
. (356, 17)
Int (356, 18)
value (356, 22)
, (356, 27)
loc (356, 29)
) (356, 32)
, (356, 33)
tokens (356, 35)
, (356, 41)
errors (356, 43)
| (358, 2)
( (358, 4)
Token (358, 5)
. (358, 10)
Char (358, 11)
value (358, 16)
, (358, 21)
loc (358, 23)
) (358, 26)
:: (358, 28)
tokens (358, 31)
-> (358, 38)
APat (359, 4)
. (359, 8)
Lit (359, 9)
( (359, 13)
Lit (359, 14)
. (359, 17)
Char (359, 18)
value (359, 23)
, (359, 28)
loc (359, 30)
) (359, 33)
, (359, 34)
tokens (359, 36)
, (359, 42)
errors (359, 44)
| (361, 2)
( (361, 4)
Token (361, 5)
. (361, 10)
Str (361, 11)
value (361, 15)
, (361, 20)
loc (361, 22)
) (361, 25)
:: (361, 27)
tokens (361, 30)
-> (361, 37)
APat (362, 4)
. (362, 8)
Lit (362, 9)
( (362, 13)
Lit (362, 14)
. (362, 17)
Str (362, 18)
value (362, 22)
, (362, 27)
loc (362, 29)
) (362, 32)
, (362, 33)
tokens (362, 35)
, (362, 41)
errors (362, 43)
| (364, 2)
( (364, 4)
Token (364, 5)
. (364, 10)
Ident (364, 11)
ident (364, 17)
, (364, 22)
loc (364, 24)
) (364, 27)
:: (364, 29)
tokens (364, 32)
-> (364, 39)
APat (365, 4)
. (365, 8)
Ident (365, 9)
( (365, 15)
ident (365, 16)
, (365, 21)
loc (365, 23)
) (365, 26)
, (365, 27)
tokens (365, 29)
, (365, 35)
errors (365, 37)
| (367, 2)
( (367, 4)
Token (367, 5)
. (367, 10)
ParenL (367, 11)
, (367, 17)
loc (367, 19)
) (367, 22)
:: (367, 24)
( (367, 27)
Token (367, 28)
. (367, 33)
ParenR (367, 34)
, (367, 40)
_ (367, 42)
) (367, 43)
:: (367, 45)
tokens (367, 48)
-> (367, 55)
APat (368, 4)
. (368, 8)
TupleLit (368, 9)
( (368, 18)
[ (368, 19)
] (368, 20)
, (368, 21)
loc (368, 23)
) (368, 26)
, (368, 27)
tokens (368, 29)
, (368, 35)
errors (368, 37)
| (370, 2)
( (370, 4)
Token (370, 5)
. (370, 10)
ParenL (370, 11)
, (370, 17)
_ (370, 19)
) (370, 20)
:: (370, 22)
tokens (370, 25)
-> (370, 32)
parsePatParenBody (371, 4)
baseLoc (371, 22)
( (371, 30)
tokens (371, 31)
, (371, 37)
errors (371, 39)
) (371, 45)
| (373, 2)
( (373, 4)
Token (373, 5)
. (373, 10)
BracketL (373, 11)
, (373, 19)
loc (373, 21)
) (373, 24)
:: (373, 26)
( (373, 29)
Token (373, 30)
. (373, 35)
BracketR (373, 36)
, (373, 44)
_ (373, 46)
) (373, 47)
:: (373, 49)
tokens (373, 52)
-> (373, 59)
APat (374, 4)
. (374, 8)
ListLit (374, 9)
( (374, 17)
[ (374, 18)
] (374, 19)
, (374, 20)
loc (374, 22)
) (374, 25)
, (374, 26)
tokens (374, 28)
, (374, 34)
errors (374, 36)
| (376, 2)
( (376, 4)
Token (376, 5)
. (376, 10)
BracketL (376, 11)
, (376, 19)
loc (376, 21)
) (376, 24)
:: (376, 26)
tokens (376, 29)
-> (376, 36)
parsePatListBody (377, 4)
baseLoc (377, 21)
loc (377, 29)
( (377, 33)
tokens (377, 34)
, (377, 40)
errors (377, 42)
) (377, 48)
| (379, 2)
_ (379, 4)
-> (379, 6)
parsePatError (380, 4)
"NEVER: The token must be a pat" (380, 18)
( (380, 51)
tokens (380, 52)
, (380, 58)
errors (380, 60)
) (380, 66)
let (383, 0)
parsePatNav (383, 4)
baseLoc (383, 16)
( (383, 24)
tokens (383, 25)
, (383, 31)
errors (383, 33)
) (383, 39)
= (383, 41)
let (384, 2)
pat (384, 6)
, (384, 9)
tokens (384, 11)
, (384, 17)
errors (384, 19)
= (384, 26)
parsePatAtom (384, 28)
baseLoc (384, 41)
( (384, 49)
tokens (384, 50)
, (384, 56)
errors (384, 58)
) (384, 64)
match (386, 2)
tokens (386, 8)
with (386, 15)
| (387, 2)
( (387, 4)
Token (387, 5)
. (387, 10)
Dot (387, 11)
, (387, 14)
loc (387, 16)
) (387, 19)
:: (387, 21)
( (387, 24)
Token (387, 25)
. (387, 30)
Ident (387, 31)
ident (387, 37)
, (387, 42)
_ (387, 44)
) (387, 45)
:: (387, 47)
tokens (387, 50)
-> (387, 57)
APat (388, 4)
. (388, 8)
Nav (388, 9)
( (388, 13)
pat (388, 14)
, (388, 17)
ident (388, 19)
, (388, 24)
loc (388, 26)
) (388, 29)
, (388, 30)
tokens (388, 32)
, (388, 38)
errors (388, 40)
| (390, 2)
( (390, 4)
Token (390, 5)
. (390, 10)
Dot (390, 11)
, (390, 14)
_ (390, 16)
) (390, 17)
:: (390, 19)
tokens (390, 22)
-> (390, 29)
parsePatError (391, 4)
"Expected identifier" (391, 18)
( (391, 40)
tokens (391, 41)
, (391, 47)
errors (391, 49)
) (391, 55)
| (393, 2)
_ (393, 4)
-> (393, 6)
pat (394, 4)
, (394, 7)
tokens (394, 9)
, (394, 15)
errors (394, 17)
let (396, 0)
parsePatCallArgs (396, 4)
baseLoc (396, 21)
calleeLoc (396, 29)
( (396, 39)
tokens (396, 40)
, (396, 46)
errors (396, 48)
) (396, 54)
= (396, 56)
let (398, 2)
argBaseLoc (398, 6)
= (398, 17)
locMax (398, 19)
baseLoc (398, 26)
calleeLoc (398, 34)
|> (398, 44)
locAddX (398, 47)
1 (398, 55)
let (400, 2)
rec (400, 6)
go (400, 10)
acc (400, 13)
( (400, 17)
tokens (400, 18)
, (400, 24)
errors (400, 26)
) (400, 32)
= (400, 34)
if (401, 4)
nextInside (401, 7)
argBaseLoc (401, 18)
tokens (401, 29)
&& (401, 36)
leadsPat (401, 39)
tokens (401, 48)
then (401, 55)
let (402, 6)
expr (402, 10)
, (402, 14)
tokens (402, 16)
, (402, 22)
errors (402, 24)
= (402, 31)
parsePatNav (402, 33)
baseLoc (402, 45)
( (402, 53)
tokens (402, 54)
, (402, 60)
errors (402, 62)
) (402, 68)
go (403, 6)
( (403, 9)
expr (403, 10)
:: (403, 15)
acc (403, 18)
) (403, 21)
( (403, 23)
tokens (403, 24)
, (403, 30)
errors (403, 32)
) (403, 38)
else (404, 4)
listRev (405, 6)
acc (405, 14)
, (405, 17)
tokens (405, 19)
, (405, 25)
errors (405, 27)
go (407, 2)
[ (407, 5)
] (407, 6)
( (407, 8)
tokens (407, 9)
, (407, 15)
errors (407, 17)
) (407, 23)
let (410, 0)
parsePatCall (410, 4)
baseLoc (410, 17)
( (410, 25)
tokens (410, 26)
, (410, 32)
errors (410, 34)
) (410, 40)
= (410, 42)
let (411, 2)
calleeLoc (411, 6)
= (411, 16)
nextLoc (411, 18)
tokens (411, 26)
let (412, 2)
callee (412, 6)
, (412, 12)
tokens (412, 14)
, (412, 20)
errors (412, 22)
= (412, 29)
parsePatNav (412, 31)
baseLoc (412, 43)
( (412, 51)
tokens (412, 52)
, (412, 58)
errors (412, 60)
) (412, 66)
let (413, 2)
args (413, 6)
, (413, 10)
tokens (413, 12)
, (413, 18)
errors (413, 20)
= (413, 27)
parsePatCallArgs (413, 29)
baseLoc (413, 46)
calleeLoc (413, 54)
( (413, 64)
tokens (413, 65)
, (413, 71)
errors (413, 73)
) (413, 79)
match (415, 2)
args (415, 8)
with (415, 13)
| (416, 2)
[ (416, 4)
] (416, 5)
-> (416, 7)
callee (417, 4)
, (417, 10)
tokens (417, 12)
, (417, 18)
errors (417, 20)
| (419, 2)
_ (419, 4)
-> (419, 6)
APat (420, 4)
. (420, 8)
Call (420, 9)
( (420, 14)
callee (420, 15)
, (420, 21)
args (420, 23)
, (420, 27)
calleeLoc (420, 29)
) (420, 38)
, (420, 39)
tokens (420, 41)
, (420, 47)
errors (420, 49)
let (423, 0)
parsePatCons (423, 4)
baseLoc (423, 17)
( (423, 25)
tokens (423, 26)
, (423, 32)
errors (423, 34)
) (423, 40)
= (423, 42)
let (424, 2)
head (424, 6)
, (424, 10)
tokens (424, 12)
, (424, 18)
errors (424, 20)
= (424, 27)
parsePatCall (424, 29)
baseLoc (424, 42)
( (424, 50)
tokens (424, 51)
, (424, 57)
errors (424, 59)
) (424, 65)
match (426, 2)
tokens (426, 8)
with (426, 15)
| (427, 2)
( (427, 4)
Token (427, 5)
. (427, 10)
ColonColon (427, 11)
, (427, 21)
loc (427, 23)
) (427, 26)
:: (427, 28)
tokens (427, 31)
-> (427, 38)
let (428, 4)
tail (428, 8)
, (428, 12)
tokens (428, 14)
, (428, 20)
errors (428, 22)
= (428, 29)
parsePatCons (428, 31)
baseLoc (428, 44)
( (428, 52)
tokens (428, 53)
, (428, 59)
errors (428, 61)
) (428, 67)
APat (429, 4)
. (429, 8)
Cons (429, 9)
( (429, 14)
head (429, 15)
, (429, 19)
tail (429, 21)
, (429, 25)
loc (429, 27)
) (429, 30)
, (429, 31)
tokens (429, 33)
, (429, 39)
errors (429, 41)
| (431, 2)
_ (431, 4)
-> (431, 6)
head (432, 4)
, (432, 8)
tokens (432, 10)
, (432, 16)
errors (432, 18)
let (435, 0)
parsePatAnno (435, 4)
baseLoc (435, 17)
( (435, 25)
tokens (435, 26)
, (435, 32)
errors (435, 34)
) (435, 40)
= (435, 42)
let (436, 2)
pat (436, 6)
, (436, 9)
tokens (436, 11)
, (436, 17)
errors (436, 19)
= (436, 26)
parsePatCons (436, 28)
baseLoc (436, 41)
( (436, 49)
tokens (436, 50)
, (436, 56)
errors (436, 58)
) (436, 64)
match (438, 2)
tokens (438, 8)
with (438, 15)
| (439, 2)
( (439, 4)
Token (439, 5)
. (439, 10)
Colon (439, 11)
, (439, 16)
loc (439, 18)
) (439, 21)
:: (439, 23)
tokens (439, 26)
-> (439, 33)
let (440, 4)
ty (440, 8)
, (440, 10)
tokens (440, 12)
, (440, 18)
errors (440, 20)
= (440, 27)
parseTy (440, 29)
( (440, 37)
nextLoc (440, 38)
tokens (440, 46)
) (440, 52)
( (440, 54)
tokens (440, 55)
, (440, 61)
errors (440, 63)
) (440, 69)
APat (441, 4)
. (441, 8)
Anno (441, 9)
( (441, 14)
pat (441, 15)
, (441, 18)
ty (441, 20)
, (441, 22)
loc (441, 24)
) (441, 27)
, (441, 28)
tokens (441, 30)
, (441, 36)
errors (441, 38)
| (443, 2)
_ (443, 4)
-> (443, 6)
pat (444, 4)
, (444, 7)
tokens (444, 9)
, (444, 15)
errors (444, 17)
let (447, 0)
parsePatTuple (447, 4)
baseLoc (447, 18)
( (447, 26)
tokens (447, 27)
, (447, 33)
errors (447, 35)
) (447, 41)
= (447, 43)
let (448, 2)
rec (448, 6)
go (448, 10)
acc (448, 13)
( (448, 17)
tokens (448, 18)
, (448, 24)
errors (448, 26)
) (448, 32)
= (448, 34)
match (449, 4)
tokens (449, 10)
with (449, 17)
| (450, 4)
( (450, 6)
Token (450, 7)
. (450, 12)
Comma (450, 13)
, (450, 18)
_ (450, 20)
) (450, 21)
:: (450, 23)
tokens (450, 26)
-> (450, 33)
let (451, 6)
second (451, 10)
, (451, 16)
tokens (451, 18)
, (451, 24)
errors (451, 26)
= (451, 33)
parsePatAnno (451, 35)
baseLoc (451, 48)
( (451, 56)
tokens (451, 57)
, (451, 63)
errors (451, 65)
) (451, 71)
go (452, 6)
( (452, 9)
second (452, 10)
:: (452, 17)
acc (452, 20)
) (452, 23)
( (452, 25)
tokens (452, 26)
, (452, 32)
errors (452, 34)
) (452, 40)
| (454, 4)
_ (454, 6)
-> (454, 8)
listRev (455, 6)
acc (455, 14)
, (455, 17)
tokens (455, 19)
, (455, 25)
errors (455, 27)
let (457, 2)
itemPat (457, 6)
, (457, 13)
tokens (457, 15)
, (457, 21)
errors (457, 23)
= (457, 30)
parsePatAnno (457, 32)
baseLoc (457, 45)
( (457, 53)
tokens (457, 54)
, (457, 60)
errors (457, 62)
) (457, 68)
match (459, 2)
tokens (459, 8)
with (459, 15)
| (460, 2)
( (460, 4)
Token (460, 5)
. (460, 10)
Comma (460, 11)
, (460, 16)
loc (460, 18)
) (460, 21)
:: (460, 23)
_ (460, 26)
-> (460, 28)
let (461, 4)
itemPats (461, 8)
, (461, 16)
tokens (461, 18)
, (461, 24)
errors (461, 26)
= (461, 33)
go (461, 35)
[ (461, 38)
] (461, 39)
( (461, 41)
tokens (461, 42)
, (461, 48)
errors (461, 50)
) (461, 56)
APat (462, 4)
. (462, 8)
TupleLit (462, 9)
( (462, 18)
itemPat (462, 19)
:: (462, 27)
itemPats (462, 30)
, (462, 38)
loc (462, 40)
) (462, 43)
, (462, 44)
tokens (462, 46)
, (462, 52)
errors (462, 54)
| (464, 2)
_ (464, 4)
-> (464, 6)
itemPat (465, 4)
, (465, 11)
tokens (465, 13)
, (465, 19)
errors (465, 21)
let (469, 0)
parsePatAs (469, 4)
baseLoc (469, 15)
( (469, 23)
tokens (469, 24)
, (469, 30)
errors (469, 32)
) (469, 38)
= (469, 40)
let (470, 2)
pat (470, 6)
, (470, 9)
tokens (470, 11)
, (470, 17)
errors (470, 19)
= (470, 26)
parsePatTuple (470, 28)
baseLoc (470, 42)
( (470, 50)
tokens (470, 51)
, (470, 57)
errors (470, 59)
) (470, 65)
match (472, 2)
tokens (472, 8)
with (472, 15)
| (473, 2)
( (473, 4)
Token (473, 5)
. (473, 10)
As (473, 11)
, (473, 13)
loc (473, 15)
) (473, 18)
:: (473, 20)
( (473, 23)
Token (473, 24)
. (473, 29)
Ident (473, 30)
ident (473, 36)
, (473, 41)
_ (473, 43)
) (473, 44)
:: (473, 46)
tokens (473, 49)
-> (473, 56)
APat (474, 4)
. (474, 8)
As (474, 9)
( (474, 12)
pat (474, 13)
, (474, 16)
ident (474, 18)
, (474, 23)
loc (474, 25)
) (474, 28)
, (474, 29)
tokens (474, 31)
, (474, 37)
errors (474, 39)
| (476, 2)
( (476, 4)
Token (476, 5)
. (476, 10)
As (476, 11)
, (476, 13)
_ (476, 15)
) (476, 16)
:: (476, 18)
tokens (476, 21)
-> (476, 28)
let (477, 4)
errors (477, 8)
= (477, 15)
parseNewError (477, 18)
"Expected an identifier" (477, 32)
( (477, 57)
tokens (477, 58)
, (477, 64)
errors (477, 66)
) (477, 72)
pat (478, 4)
, (478, 7)
tokens (478, 9)
, (478, 15)
errors (478, 17)
| (480, 2)
_ (480, 4)
-> (480, 6)
pat (481, 4)
, (481, 7)
tokens (481, 9)
, (481, 15)
errors (481, 17)
let (484, 0)
parsePatOr (484, 4)
baseLoc (484, 15)
( (484, 23)
tokens (484, 24)
, (484, 30)
errors (484, 32)
) (484, 38)
= (484, 40)
let (485, 2)
lPat (485, 6)
, (485, 10)
tokens (485, 12)
, (485, 18)
errors (485, 20)
= (485, 27)
parsePatAs (485, 29)
baseLoc (485, 40)
( (485, 48)
tokens (485, 49)
, (485, 55)
errors (485, 57)
) (485, 63)
match (487, 2)
tokens (487, 8)
with (487, 15)
| (488, 2)
( (488, 4)
Token (488, 5)
. (488, 10)
Pipe (488, 11)
, (488, 15)
loc (488, 17)
) (488, 20)
:: (488, 22)
tokens (488, 25)
-> (488, 32)
let (489, 4)
rPat (489, 8)
, (489, 12)
tokens (489, 14)
, (489, 20)
errors (489, 22)
= (489, 29)
parsePatOr (489, 31)
baseLoc (489, 42)
( (489, 50)
tokens (489, 51)
, (489, 57)
errors (489, 59)
) (489, 65)
APat (490, 4)
. (490, 8)
Or (490, 9)
( (490, 12)
lPat (490, 13)
, (490, 17)
rPat (490, 19)
, (490, 23)
loc (490, 25)
) (490, 28)
, (490, 29)
tokens (490, 31)
, (490, 37)
errors (490, 39)
| (492, 2)
_ (492, 4)
-> (492, 6)
lPat (493, 4)
, (493, 8)
tokens (493, 10)
, (493, 16)
errors (493, 18)
let (498, 0)
parsePatLet (498, 4)
baseLoc (498, 16)
( (498, 24)
tokens (498, 25)
, (498, 31)
errors (498, 33)
) (498, 39)
= (498, 41)
match (499, 2)
tokens (499, 8)
with (499, 15)
| (500, 2)
( (500, 4)
Token (500, 5)
. (500, 10)
Ident (500, 11)
callee (500, 17)
, (500, 23)
calleeLoc (500, 25)
) (500, 34)
:: (500, 36)
tokens (500, 39)
when (501, 4)
locInside (501, 9)
baseLoc (501, 19)
calleeLoc (501, 27)
&& (501, 37)
leadsPat (501, 40)
tokens (501, 49)
-> (501, 56)
let (502, 4)
args (502, 8)
, (502, 12)
tokens (502, 14)
, (502, 20)
errors (502, 22)
= (502, 29)
parsePatCallArgs (502, 31)
baseLoc (502, 48)
calleeLoc (502, 56)
( (502, 66)
tokens (502, 67)
, (502, 73)
errors (502, 75)
) (502, 81)
let (503, 4)
pat (503, 8)
= (503, 12)
APat (503, 14)
. (503, 18)
Fun (503, 19)
( (503, 23)
callee (503, 24)
, (503, 30)
args (503, 32)
, (503, 36)
calleeLoc (503, 38)
) (503, 47)
match (505, 4)
tokens (505, 10)
with (505, 17)
| (506, 4)
( (506, 6)
Token (506, 7)
. (506, 12)
Colon (506, 13)
, (506, 18)
loc (506, 20)
) (506, 23)
:: (506, 25)
tokens (506, 28)
-> (506, 35)
let (507, 6)
ty (507, 10)
, (507, 12)
tokens (507, 14)
, (507, 20)
errors (507, 22)
= (507, 29)
parseTy (507, 31)
baseLoc (507, 39)
( (507, 47)
tokens (507, 48)
, (507, 54)
errors (507, 56)
) (507, 62)
APat (508, 6)
. (508, 10)
Anno (508, 11)
( (508, 16)
pat (508, 17)
, (508, 20)
ty (508, 22)
, (508, 24)
loc (508, 26)
) (508, 29)
, (508, 30)
tokens (508, 32)
, (508, 38)
errors (508, 40)
| (510, 4)
_ (510, 6)
-> (510, 8)
pat (511, 6)
, (511, 9)
tokens (511, 11)
, (511, 17)
errors (511, 19)
| (513, 2)
_ (513, 4)
-> (513, 6)
parsePat (514, 4)
baseLoc (514, 13)
( (514, 21)
tokens (514, 22)
, (514, 28)
errors (514, 30)
) (514, 36)
let (517, 0)
parsePat (517, 4)
baseLoc (517, 13)
( (517, 21)
tokens (517, 22)
, (517, 28)
errors (517, 30)
) (517, 36)
= (517, 38)
if (518, 2)
not (518, 5)
( (518, 9)
nextInside (518, 10)
baseLoc (518, 21)
tokens (518, 29)
&& (518, 36)
leadsPat (518, 39)
tokens (518, 48)
) (518, 54)
then (518, 56)
parsePatError (519, 4)
"Expected a pattern" (519, 18)
( (519, 39)
tokens (519, 40)
, (519, 46)
errors (519, 48)
) (519, 54)
else (520, 2)
parsePatOr (521, 4)
baseLoc (521, 15)
( (521, 23)
tokens (521, 24)
, (521, 30)
errors (521, 32)
) (521, 38)
let (528, 0)
parseRange (528, 4)
baseLoc (528, 15)
( (528, 23)
tokens (528, 24)
, (528, 30)
errors (528, 32)
) (528, 38)
= (528, 40)
let (529, 2)
l (529, 6)
, (529, 7)
tokens (529, 9)
, (529, 15)
errors (529, 17)
= (529, 24)
parseExpr (529, 26)
baseLoc (529, 36)
( (529, 44)
tokens (529, 45)
, (529, 51)
errors (529, 53)
) (529, 59)
match (531, 2)
tokens (531, 8)
with (531, 15)
| (532, 2)
( (532, 4)
Token (532, 5)
. (532, 10)
DotDot (532, 11)
, (532, 17)
loc (532, 19)
) (532, 22)
:: (532, 24)
tokens (532, 27)
-> (532, 34)
let (533, 4)
r (533, 8)
, (533, 9)
tokens (533, 11)
, (533, 17)
errors (533, 19)
= (533, 26)
parseExpr (533, 28)
baseLoc (533, 38)
( (533, 46)
tokens (533, 47)
, (533, 53)
errors (533, 55)
) (533, 61)
AExpr (534, 4)
. (534, 9)
Range (534, 10)
( (534, 16)
[ (534, 17)
l (534, 18)
; (534, 19)
r (534, 21)
] (534, 22)
, (534, 23)
loc (534, 25)
) (534, 28)
, (534, 29)
tokens (534, 31)
, (534, 37)
errors (534, 39)
| (536, 2)
_ (536, 4)
-> (536, 6)
l (537, 4)
, (537, 5)
tokens (537, 7)
, (537, 13)
errors (537, 15)
let (539, 0)
parseList (539, 4)
baseLoc (539, 14)
bracketLoc (539, 22)
( (539, 33)
tokens (539, 34)
, (539, 40)
errors (539, 42)
) (539, 48)
= (539, 50)
let (540, 2)
items (540, 6)
, (540, 11)
tokens (540, 13)
, (540, 19)
errors (540, 21)
= (540, 28)
parseStmts (540, 30)
baseLoc (540, 41)
( (540, 49)
tokens (540, 50)
, (540, 56)
errors (540, 58)
) (540, 64)
let (542, 2)
tokens (542, 6)
, (542, 12)
errors (542, 14)
= (542, 21)
match (543, 4)
tokens (543, 10)
with (543, 17)
| (544, 4)
( (544, 6)
Token (544, 7)
. (544, 12)
BracketR (544, 13)
, (544, 21)
_ (544, 23)
) (544, 24)
:: (544, 26)
tokens (544, 29)
-> (544, 36)
tokens (545, 6)
, (545, 12)
errors (545, 14)
| (547, 4)
_ (547, 6)
-> (547, 8)
let (548, 6)
errors (548, 10)
= (548, 17)
parseNewError (548, 19)
"Expected \']\'" (548, 33)
( (548, 48)
tokens (548, 49)
, (548, 55)
errors (548, 57)
) (548, 63)
tokens (549, 6)
, (549, 12)
errors (549, 14)
AExpr (551, 2)
. (551, 7)
ListLit (551, 8)
( (551, 16)
items (551, 17)
, (551, 22)
bracketLoc (551, 24)
) (551, 34)
, (551, 35)
tokens (551, 37)
, (551, 43)
errors (551, 45)
let (553, 0)
parseThenClause (553, 4)
baseLoc (553, 20)
( (553, 28)
tokens (553, 29)
, (553, 35)
errors (553, 37)
) (553, 43)
= (553, 45)
let (554, 2)
innerBaseLoc (554, 6)
= (554, 19)
baseLoc (554, 21)
|> (554, 29)
locAddX (554, 32)
1 (554, 40)
match (556, 2)
tokens (556, 8)
with (556, 15)
| (557, 2)
( (557, 4)
Token (557, 5)
. (557, 10)
Then (557, 11)
, (557, 15)
thenLoc (557, 17)
) (557, 24)
:: (557, 26)
tokens (557, 29)
when (557, 36)
locInside (557, 41)
baseLoc (557, 51)
thenLoc (557, 59)
-> (557, 67)
parseSemi (558, 4)
innerBaseLoc (558, 14)
thenLoc (558, 27)
( (558, 35)
tokens (558, 36)
, (558, 42)
errors (558, 44)
) (558, 50)
| (560, 2)
_ (560, 4)
-> (560, 6)
parseExprError (561, 4)
"Expected \'then\'" (561, 19)
( (561, 37)
tokens (561, 38)
, (561, 44)
errors (561, 46)
) (561, 52)
let (563, 0)
parseElseClause (563, 4)
baseLoc (563, 20)
( (563, 28)
tokens (563, 29)
, (563, 35)
errors (563, 37)
) (563, 43)
= (563, 45)
match (564, 2)
tokens (564, 8)
with (564, 15)
| (565, 2)
( (565, 4)
Token (565, 5)
. (565, 10)
Else (565, 11)
, (565, 15)
elseLoc (565, 17)
) (565, 24)
:: (565, 26)
( (565, 29)
Token (565, 30)
. (565, 35)
If (565, 36)
, (565, 38)
nextIfLoc (565, 40)
) (565, 49)
:: (565, 51)
tokens (565, 54)
when (566, 4)
locInside (566, 9)
baseLoc (566, 19)
elseLoc (566, 27)
&& (566, 35)
locIsSameRow (566, 38)
elseLoc (566, 51)
nextIfLoc (566, 59)
-> (566, 69)
parseExpr (568, 4)
baseLoc (568, 14)
( (568, 22)
( (568, 23)
Token (568, 24)
. (568, 29)
If (568, 30)
, (568, 32)
elseLoc (568, 34)
) (568, 41)
:: (568, 43)
tokens (568, 46)
, (568, 52)
errors (568, 54)
) (568, 60)
| (570, 2)
( (570, 4)
Token (570, 5)
. (570, 10)
Else (570, 11)
, (570, 15)
elseLoc (570, 17)
) (570, 24)
:: (570, 26)
tokens (570, 29)
when (571, 4)
locInside (571, 9)
baseLoc (571, 19)
elseLoc (571, 27)
-> (571, 35)
parseSemi (572, 4)
baseLoc (572, 14)
elseLoc (572, 22)
( (572, 30)
tokens (572, 31)
, (572, 37)
errors (572, 39)
) (572, 45)
| (574, 2)
_ (574, 4)
-> (574, 6)
AExpr (575, 4)
. (575, 9)
Missing (575, 10)
baseLoc (575, 18)
, (575, 25)
tokens (575, 27)
, (575, 33)
errors (575, 35)
let (577, 0)
parseIf (577, 4)
ifLoc (577, 12)
( (577, 18)
tokens (577, 19)
, (577, 25)
errors (577, 27)
) (577, 33)
= (577, 35)
let (578, 2)
innerBaseLoc (578, 6)
= (578, 19)
ifLoc (578, 21)
|> (578, 27)
locAddX (578, 30)
1 (578, 38)
let (580, 2)
cond (580, 6)
, (580, 10)
tokens (580, 12)
, (580, 18)
errors (580, 20)
= (580, 27)
parseExpr (580, 29)
innerBaseLoc (580, 39)
( (580, 52)
tokens (580, 53)
, (580, 59)
errors (580, 61)
) (580, 67)
let (581, 2)
body (581, 6)
, (581, 10)
tokens (581, 12)
, (581, 18)
errors (581, 20)
= (581, 27)
parseThenClause (581, 29)
ifLoc (581, 45)
( (581, 51)
tokens (581, 52)
, (581, 58)
errors (581, 60)
) (581, 66)
let (582, 2)
alt (582, 6)
, (582, 9)
tokens (582, 11)
, (582, 17)
errors (582, 19)
= (582, 26)
parseElseClause (582, 28)
ifLoc (582, 44)
( (582, 50)
tokens (582, 51)
, (582, 57)
errors (582, 59)
) (582, 65)
AExpr (583, 2)
. (583, 7)
If (583, 8)
( (583, 11)
cond (583, 12)
, (583, 16)
body (583, 18)
, (583, 22)
alt (583, 24)
, (583, 27)
ifLoc (583, 29)
) (583, 34)
, (583, 35)
tokens (583, 37)
, (583, 43)
errors (583, 45)
let (586, 0)
parseMatchArm (586, 4)
matchLoc (586, 18)
armLoc (586, 27)
( (586, 34)
tokens (586, 35)
, (586, 41)
errors (586, 43)
) (586, 49)
= (586, 51)
let (587, 2)
innerBaseLoc (587, 6)
= (587, 19)
matchLoc (587, 21)
|> (587, 30)
locAddX (587, 33)
1 (587, 41)
let (589, 2)
pat (589, 6)
, (589, 9)
tokens (589, 11)
, (589, 17)
errors (589, 19)
= (589, 26)
parsePat (589, 28)
innerBaseLoc (589, 37)
( (589, 50)
tokens (589, 51)
, (589, 57)
errors (589, 59)
) (589, 65)
let (591, 2)
guard (591, 6)
, (591, 11)
tokens (591, 13)
, (591, 19)
errors (591, 21)
= (591, 28)
match (592, 4)
tokens (592, 10)
with (592, 17)
| (593, 4)
( (593, 6)
Token (593, 7)
. (593, 12)
When (593, 13)
, (593, 17)
_ (593, 19)
) (593, 20)
:: (593, 22)
tokens (593, 25)
-> (593, 32)
parseExpr (594, 6)
innerBaseLoc (594, 16)
( (594, 29)
tokens (594, 30)
, (594, 36)
errors (594, 38)
) (594, 44)
| (596, 4)
_ (596, 6)
-> (596, 8)
let (597, 6)
guard (597, 10)
= (597, 16)
AExpr (597, 18)
. (597, 23)
Missing (597, 24)
( (597, 32)
nextLoc (597, 33)
tokens (597, 41)
) (597, 47)
guard (598, 6)
, (598, 11)
tokens (598, 13)
, (598, 19)
errors (598, 21)
let (600, 2)
body (600, 6)
, (600, 10)
tokens (600, 12)
, (600, 18)
errors (600, 20)
= (600, 27)
match (601, 4)
tokens (601, 10)
with (601, 17)
| (602, 4)
( (602, 6)
Token (602, 7)
. (602, 12)
Arrow (602, 13)
, (602, 18)
arrowLoc (602, 20)
) (602, 28)
:: (602, 30)
tokens (602, 33)
-> (602, 40)
parseSemi (603, 6)
matchLoc (603, 16)
arrowLoc (603, 25)
( (603, 34)
tokens (603, 35)
, (603, 41)
errors (603, 43)
) (603, 49)
| (605, 4)
_ (605, 6)
-> (605, 8)
parseExprError (606, 6)
"Expected \'->\'" (606, 21)
( (606, 37)
tokens (606, 38)
, (606, 44)
errors (606, 46)
) (606, 52)
AArm (608, 2)
( (608, 7)
pat (608, 8)
, (608, 11)
guard (608, 13)
, (608, 18)
body (608, 20)
, (608, 24)
armLoc (608, 26)
) (608, 32)
, (608, 33)
tokens (608, 35)
, (608, 41)
errors (608, 43)
let (610, 0)
parseMatch (610, 4)
matchLoc (610, 15)
( (610, 24)
tokens (610, 25)
, (610, 31)
errors (610, 33)
) (610, 39)
= (610, 41)
let (611, 2)
target (611, 6)
, (611, 12)
tokens (611, 14)
, (611, 20)
errors (611, 22)
= (611, 29)
parseExpr (611, 31)
matchLoc (611, 41)
( (611, 50)
tokens (611, 51)
, (611, 57)
errors (611, 59)
) (611, 65)
let (613, 2)
armLoc (613, 6)
, (613, 12)
tokens (613, 14)
, (613, 20)
errors (613, 22)
= (613, 29)
match (614, 4)
tokens (614, 10)
with (614, 17)
| (615, 4)
( (615, 6)
Token (615, 7)
. (615, 12)
With (615, 13)
, (615, 17)
_ (615, 19)
) (615, 20)
:: (615, 22)
( (615, 25)
Token (615, 26)
. (615, 31)
Pipe (615, 32)
, (615, 36)
pipeLoc (615, 38)
) (615, 45)
:: (615, 47)
tokens (615, 50)
-> (615, 57)
pipeLoc (616, 6)
, (616, 13)
tokens (616, 15)
, (616, 21)
errors (616, 23)
| (618, 4)
( (618, 6)
Token (618, 7)
. (618, 12)
With (618, 13)
, (618, 17)
withLoc (618, 19)
) (618, 26)
:: (618, 28)
tokens (618, 31)
-> (618, 38)
withLoc (619, 6)
, (619, 13)
tokens (619, 15)
, (619, 21)
errors (619, 23)
| (621, 4)
_ (621, 6)
-> (621, 8)
let (622, 6)
errors (622, 10)
= (622, 17)
parseNewError (622, 19)
"Expected \'with\'" (622, 33)
( (622, 51)
tokens (622, 52)
, (622, 58)
errors (622, 60)
) (622, 66)
matchLoc (623, 6)
, (623, 14)
tokens (623, 16)
, (623, 22)
errors (623, 24)
let (625, 2)
rec (625, 6)
go (625, 10)
acc (625, 13)
armLoc (625, 17)
( (625, 24)
tokens (625, 25)
, (625, 31)
errors (625, 33)
) (625, 39)
= (625, 41)
let (626, 4)
arm (626, 8)
, (626, 11)
tokens (626, 13)
, (626, 19)
errors (626, 21)
= (626, 28)
parseMatchArm (626, 30)
matchLoc (626, 44)
armLoc (626, 53)
( (626, 60)
tokens (626, 61)
, (626, 67)
errors (626, 69)
) (626, 75)
match (628, 4)
tokens (628, 10)
with (628, 17)
| (629, 4)
( (629, 6)
Token (629, 7)
. (629, 12)
Pipe (629, 13)
, (629, 17)
pipeLoc (629, 19)
) (629, 26)
:: (629, 28)
tokens (629, 31)
when (629, 38)
locInside (629, 43)
matchLoc (629, 53)
pipeLoc (629, 62)
-> (629, 70)
go (630, 6)
( (630, 9)
arm (630, 10)
:: (630, 14)
acc (630, 17)
) (630, 20)
pipeLoc (630, 22)
( (630, 30)
tokens (630, 31)
, (630, 37)
errors (630, 39)
) (630, 45)
| (632, 4)
_ (632, 6)
-> (632, 8)
listRev (633, 6)
( (633, 14)
arm (633, 15)
:: (633, 19)
acc (633, 22)
) (633, 25)
, (633, 26)
tokens (633, 28)
, (633, 34)
errors (633, 36)
let (635, 2)
arms (635, 6)
, (635, 10)
tokens (635, 12)
, (635, 18)
errors (635, 20)
= (635, 27)
go (635, 29)
[ (635, 32)
] (635, 33)
armLoc (635, 35)
( (635, 42)
tokens (635, 43)
, (635, 49)
errors (635, 51)
) (635, 57)
AExpr (636, 2)
. (636, 7)
Match (636, 8)
( (636, 14)
target (636, 15)
, (636, 21)
arms (636, 23)
, (636, 27)
matchLoc (636, 29)
) (636, 37)
, (636, 38)
tokens (636, 40)
, (636, 46)
errors (636, 48)
let (639, 0)
parseFun (639, 4)
baseLoc (639, 13)
funLoc (639, 21)
( (639, 28)
tokens (639, 29)
, (639, 35)
errors (639, 37)
) (639, 43)
= (639, 45)
let (640, 2)
pats (640, 6)
, (640, 10)
tokens (640, 12)
, (640, 18)
errors (640, 20)
= (640, 27)
parsePatCallArgs (640, 29)
baseLoc (640, 46)
funLoc (640, 54)
( (640, 61)
tokens (640, 62)
, (640, 68)
errors (640, 70)
) (640, 76)
let (642, 2)
body (642, 6)
, (642, 10)
tokens (642, 12)
, (642, 18)
errors (642, 20)
= (642, 27)
match (643, 4)
tokens (643, 10)
with (643, 17)
| (644, 4)
( (644, 6)
Token (644, 7)
. (644, 12)
Arrow (644, 13)
, (644, 18)
arrowLoc (644, 20)
) (644, 28)
:: (644, 30)
tokens (644, 33)
-> (644, 40)
parseSemi (645, 6)
baseLoc (645, 16)
arrowLoc (645, 24)
( (645, 33)
tokens (645, 34)
, (645, 40)
errors (645, 42)
) (645, 48)
| (647, 4)
_ (647, 6)
-> (647, 8)
parseExprError (648, 6)
"Missing \'->\'" (648, 21)
( (648, 36)
tokens (648, 37)
, (648, 43)
errors (648, 45)
) (648, 51)
AExpr (650, 2)
. (650, 7)
Fun (650, 8)
( (650, 12)
pats (650, 13)
, (650, 17)
body (650, 19)
, (650, 23)
funLoc (650, 25)
) (650, 31)
, (650, 32)
tokens (650, 34)
, (650, 40)
errors (650, 42)
let (652, 0)
parseParenBody (652, 4)
baseLoc (652, 19)
parenLoc (652, 27)
( (652, 36)
tokens (652, 37)
, (652, 43)
errors (652, 45)
) (652, 51)
= (652, 53)
let (653, 2)
body (653, 6)
, (653, 10)
tokens (653, 12)
, (653, 18)
errors (653, 20)
= (653, 27)
parseSemi (653, 29)
baseLoc (653, 39)
parenLoc (653, 47)
( (653, 56)
tokens (653, 57)
, (653, 63)
errors (653, 65)
) (653, 71)
match (655, 2)
tokens (655, 8)
with (655, 15)
| (656, 2)
( (656, 4)
Token (656, 5)
. (656, 10)
ParenR (656, 11)
, (656, 17)
_ (656, 19)
) (656, 20)
:: (656, 22)
tokens (656, 25)
-> (656, 32)
body (657, 4)
, (657, 8)
tokens (657, 10)
, (657, 16)
errors (657, 18)
| (659, 2)
_ (659, 4)
-> (659, 6)
let (660, 4)
errors (660, 8)
= (660, 15)
parseNewError (660, 17)
"Expected \')\'" (660, 31)
( (660, 46)
tokens (660, 47)
, (660, 53)
errors (660, 55)
) (660, 61)
body (661, 4)
, (661, 8)
tokens (661, 10)
, (661, 16)
errors (661, 18)
let (663, 0)
parseAccessModifier (663, 4)
tokens (663, 24)
= (663, 31)
match (664, 2)
tokens (664, 8)
with (664, 15)
| (665, 2)
( (665, 4)
t (665, 5)
, (665, 6)
_ (665, 8)
) (665, 9)
:: (665, 11)
tokens (665, 14)
when (665, 21)
t (665, 26)
|> (665, 28)
tokenIsAccessModifier (665, 31)
-> (665, 53)
tokens (667, 4)
| (669, 2)
_ (669, 4)
-> (669, 6)
tokens (670, 4)
let (672, 0)
parseLet (672, 4)
letLoc (672, 13)
( (672, 20)
tokens (672, 21)
, (672, 27)
errors (672, 29)
) (672, 35)
= (672, 37)
let (673, 2)
innerBaseLoc (673, 6)
= (673, 19)
letLoc (673, 21)
|> (673, 28)
locAddX (673, 31)
1 (673, 39)
let (675, 2)
tokens (675, 6)
= (675, 13)
parseAccessModifier (675, 15)
tokens (675, 35)
let (677, 2)
pat (677, 6)
, (677, 9)
tokens (677, 11)
, (677, 17)
errors (677, 19)
= (677, 26)
parsePatLet (677, 28)
innerBaseLoc (677, 40)
( (677, 53)
tokens (677, 54)
, (677, 60)
errors (677, 62)
) (677, 68)
let (679, 2)
body (679, 6)
, (679, 10)
tokens (679, 12)
, (679, 18)
errors (679, 20)
= (679, 27)
match (680, 4)
tokens (680, 10)
with (680, 17)
| (681, 4)
( (681, 6)
Token (681, 7)
. (681, 12)
Eq (681, 13)
, (681, 15)
eqLoc (681, 17)
) (681, 22)
:: (681, 24)
tokens (681, 27)
-> (681, 34)
parseSemi (682, 6)
innerBaseLoc (682, 16)
eqLoc (682, 29)
( (682, 35)
tokens (682, 36)
, (682, 42)
errors (682, 44)
) (682, 50)
| (684, 4)
_ (684, 6)
-> (684, 8)
parseExprError (685, 6)
"Missing \'=\'" (685, 21)
( (685, 35)
tokens (685, 36)
, (685, 42)
errors (685, 44)
) (685, 50)
let (687, 2)
next (687, 6)
, (687, 10)
tokens (687, 12)
, (687, 18)
errors (687, 20)
= (687, 27)
match (688, 4)
tokens (688, 10)
with (688, 17)
| (689, 4)
( (689, 6)
Token (689, 7)
. (689, 12)
In (689, 13)
, (689, 15)
inLoc (689, 17)
) (689, 22)
:: (689, 24)
tokens (689, 27)
when (689, 34)
locInside (689, 39)
letLoc (689, 49)
inLoc (689, 56)
-> (689, 62)
parseSemi (690, 6)
letLoc (690, 16)
inLoc (690, 23)
( (690, 29)
tokens (690, 30)
, (690, 36)
errors (690, 38)
) (690, 44)
| (692, 4)
_ (692, 6)
:: (692, 8)
_ (692, 11)
when (692, 13)
locIsSameColumn (692, 18)
( (692, 34)
nextLoc (692, 35)
tokens (692, 43)
) (692, 49)
letLoc (692, 51)
-> (692, 58)
parseSemi (694, 6)
letLoc (694, 16)
( (694, 23)
nextLoc (694, 24)
tokens (694, 32)
) (694, 38)
( (694, 40)
tokens (694, 41)
, (694, 47)
errors (694, 49)
) (694, 55)
| (696, 4)
tokens (696, 6)
-> (696, 13)
AExpr (697, 6)
. (697, 11)
TupleLit (697, 12)
( (697, 21)
[ (697, 22)
] (697, 23)
, (697, 24)
letLoc (697, 26)
) (697, 32)
, (697, 33)
tokens (697, 35)
, (697, 41)
errors (697, 43)
AExpr (699, 2)
. (699, 7)
Let (699, 8)
( (699, 12)
pat (699, 13)
, (699, 16)
body (699, 18)
, (699, 22)
next (699, 24)
, (699, 28)
letLoc (699, 30)
) (699, 36)
, (699, 37)
tokens (699, 39)
, (699, 45)
errors (699, 47)
let (701, 0)
parseTyDecl (701, 4)
typeLoc (701, 16)
( (701, 24)
tokens (701, 25)
, (701, 31)
errors (701, 33)
) (701, 39)
= (701, 41)
let (702, 2)
baseLoc (702, 6)
= (702, 14)
typeLoc (702, 16)
|> (702, 24)
locAddX (702, 27)
1 (702, 35)
let (704, 2)
tokens (704, 6)
= (704, 13)
parseAccessModifier (704, 15)
tokens (704, 35)
match (706, 2)
tokens (706, 8)
with (706, 15)
| (707, 2)
( (707, 4)
Token (707, 5)
. (707, 10)
Ident (707, 11)
tyIdent (707, 17)
, (707, 24)
_ (707, 26)
) (707, 27)
:: (707, 29)
tokens (707, 32)
-> (707, 39)
match (708, 4)
tokens (708, 10)
with (708, 17)
| (709, 4)
( (709, 6)
Token (709, 7)
. (709, 12)
Eq (709, 13)
, (709, 15)
_ (709, 17)
) (709, 18)
:: (709, 20)
tokens (709, 23)
-> (709, 30)
let (710, 6)
tyDecl (710, 10)
, (710, 16)
tokens (710, 18)
, (710, 24)
errors (710, 26)
= (710, 33)
parseTyDeclBody (710, 35)
baseLoc (710, 51)
( (710, 59)
tokens (710, 60)
, (710, 66)
errors (710, 68)
) (710, 74)
let (712, 6)
expr (712, 10)
= (712, 15)
match (713, 8)
tyDecl (713, 14)
with (713, 21)
| (714, 8)
ATyDecl (714, 10)
. (714, 17)
Synonym (714, 18)
ty (714, 26)
-> (714, 29)
AExpr (715, 10)
. (715, 15)
TySynonym (715, 16)
( (715, 26)
tyIdent (715, 27)
, (715, 34)
ty (715, 36)
, (715, 38)
typeLoc (715, 40)
) (715, 47)
| (717, 8)
ATyDecl (717, 10)
. (717, 17)
Union (717, 18)
variants (717, 24)
-> (717, 33)
AExpr (718, 10)
. (718, 15)
TyUnion (718, 16)
( (718, 24)
tyIdent (718, 25)
, (718, 32)
variants (718, 34)
, (718, 42)
typeLoc (718, 44)
) (718, 51)
expr (720, 6)
, (720, 10)
tokens (720, 12)
, (720, 18)
errors (720, 20)
| (722, 4)
_ (722, 6)
-> (722, 8)
let (723, 6)
ty (723, 10)
, (723, 12)
tokens (723, 14)
, (723, 20)
errors (723, 22)
= (723, 29)
parseTyError (723, 31)
"Expected \'=\'" (723, 44)
( (723, 59)
tokens (723, 60)
, (723, 66)
errors (723, 68)
) (723, 74)
AExpr (724, 6)
. (724, 11)
TySynonym (724, 12)
( (724, 22)
tyIdent (724, 23)
, (724, 30)
ty (724, 32)
, (724, 34)
typeLoc (724, 36)
) (724, 43)
, (724, 44)
tokens (724, 46)
, (724, 52)
errors (724, 54)
| (726, 2)
_ (726, 4)
-> (726, 6)
parseExprError (727, 4)
"Expected identifier" (727, 19)
( (727, 41)
tokens (727, 42)
, (727, 48)
errors (727, 50)
) (727, 56)
let (730, 0)
parseOpen (730, 4)
openLoc (730, 14)
( (730, 22)
tokens (730, 23)
, (730, 29)
errors (730, 31)
) (730, 37)
= (730, 39)
let (731, 2)
parsePath (731, 6)
( (731, 16)
tokens (731, 17)
, (731, 23)
errors (731, 25)
) (731, 31)
= (731, 33)
let (732, 4)
rec (732, 8)
go (732, 12)
acc (732, 15)
( (732, 19)
tokens (732, 20)
, (732, 26)
errors (732, 28)
) (732, 34)
= (732, 36)
match (733, 6)
tokens (733, 12)
with (733, 19)
| (734, 6)
( (734, 8)
Token (734, 9)
. (734, 14)
Dot (734, 15)
, (734, 18)
_ (734, 20)
) (734, 21)
:: (734, 23)
( (734, 26)
Token (734, 27)
. (734, 32)
Ident (734, 33)
ident (734, 39)
, (734, 44)
_ (734, 46)
) (734, 47)
:: (734, 49)
tokens (734, 52)
-> (734, 59)
go (735, 8)
( (735, 11)
ident (735, 12)
:: (735, 18)
acc (735, 21)
) (735, 24)
( (735, 26)
tokens (735, 27)
, (735, 33)
errors (735, 35)
) (735, 41)
| (737, 6)
( (737, 8)
Token (737, 9)
. (737, 14)
Dot (737, 15)
, (737, 18)
_ (737, 20)
) (737, 21)
:: (737, 23)
tokens (737, 26)
-> (737, 33)
let (738, 8)
errors (738, 12)
= (738, 19)
parseNewError (738, 21)
"Expected identifier" (738, 35)
( (738, 57)
tokens (738, 58)
, (738, 64)
errors (738, 66)
) (738, 72)
listRev (739, 8)
acc (739, 16)
, (739, 19)
tokens (739, 21)
, (739, 27)
errors (739, 29)
| (741, 6)
_ (741, 8)
-> (741, 10)
listRev (742, 8)
acc (742, 16)
, (742, 19)
tokens (742, 21)
, (742, 27)
errors (742, 29)
match (744, 4)
tokens (744, 10)
with (744, 17)
| (745, 4)
( (745, 6)
Token (745, 7)
. (745, 12)
Ident (745, 13)
ident (745, 19)
, (745, 24)
_ (745, 26)
) (745, 27)
:: (745, 29)
tokens (745, 32)
-> (745, 39)
go (746, 6)
[ (746, 9)
ident (746, 10)
] (746, 15)
( (746, 17)
tokens (746, 18)
, (746, 24)
errors (746, 26)
) (746, 32)
| (748, 4)
_ (748, 6)
-> (748, 8)
let (749, 6)
errors (749, 10)
= (749, 17)
parseNewError (749, 19)
"Expected identifier" (749, 33)
( (749, 55)
tokens (749, 56)
, (749, 62)
errors (749, 64)
) (749, 70)
[ (750, 6)
] (750, 7)
, (750, 8)
tokens (750, 10)
, (750, 16)
errors (750, 18)
let (752, 2)
path (752, 6)
, (752, 10)
tokens (752, 12)
, (752, 18)
errors (752, 20)
= (752, 27)
parsePath (752, 29)
( (752, 39)
tokens (752, 40)
, (752, 46)
errors (752, 48)
) (752, 54)
AExpr (753, 2)
. (753, 7)
Open (753, 8)
( (753, 13)
path (753, 14)
, (753, 18)
openLoc (753, 20)
) (753, 27)
, (753, 28)
tokens (753, 30)
, (753, 36)
errors (753, 38)
let (755, 0)
parseAtom (755, 4)
baseLoc (755, 14)
( (755, 22)
tokens (755, 23)
, (755, 29)
errors (755, 31)
) (755, 37)
= (755, 39)
match (756, 2)
tokens (756, 8)
with (756, 15)
| (757, 2)
_ (757, 4)
when (757, 6)
not (757, 11)
( (757, 15)
nextInside (757, 16)
baseLoc (757, 27)
tokens (757, 35)
) (757, 41)
-> (757, 43)
parseExprError (758, 4)
"Expected an expression" (758, 19)
( (758, 44)
tokens (758, 45)
, (758, 51)
errors (758, 53)
) (758, 59)
| (760, 2)
( (760, 4)
Token (760, 5)
. (760, 10)
ParenL (760, 11)
, (760, 17)
loc (760, 19)
) (760, 22)
:: (760, 24)
( (760, 27)
Token (760, 28)
. (760, 33)
ParenR (760, 34)
, (760, 40)
_ (760, 42)
) (760, 43)
:: (760, 45)
tokens (760, 48)
-> (760, 55)
AExpr (761, 4)
. (761, 9)
TupleLit (761, 10)
( (761, 19)
[ (761, 20)
] (761, 21)
, (761, 22)
loc (761, 24)
) (761, 27)
, (761, 28)
tokens (761, 30)
, (761, 36)
errors (761, 38)
| (763, 2)
( (763, 4)
Token (763, 5)
. (763, 10)
Bool (763, 11)
value (763, 16)
, (763, 21)
loc (763, 23)
) (763, 26)
:: (763, 28)
tokens (763, 31)
-> (763, 38)
AExpr (764, 4)
. (764, 9)
Lit (764, 10)
( (764, 14)
Lit (764, 15)
. (764, 18)
Bool (764, 19)
value (764, 24)
, (764, 29)
loc (764, 31)
) (764, 34)
, (764, 35)
tokens (764, 37)
, (764, 43)
errors (764, 45)
| (766, 2)
( (766, 4)
Token (766, 5)
. (766, 10)
Int (766, 11)
value (766, 15)
, (766, 20)
loc (766, 22)
) (766, 25)
:: (766, 27)
tokens (766, 30)
-> (766, 37)
AExpr (767, 4)
. (767, 9)
Lit (767, 10)
( (767, 14)
Lit (767, 15)
. (767, 18)
Int (767, 19)
value (767, 23)
, (767, 28)
loc (767, 30)
) (767, 33)
, (767, 34)
tokens (767, 36)
, (767, 42)
errors (767, 44)
| (769, 2)
( (769, 4)
Token (769, 5)
. (769, 10)
Char (769, 11)
value (769, 16)
, (769, 21)
loc (769, 23)
) (769, 26)
:: (769, 28)
tokens (769, 31)
-> (769, 38)
AExpr (770, 4)
. (770, 9)
Lit (770, 10)
( (770, 14)
Lit (770, 15)
. (770, 18)
Char (770, 19)
value (770, 24)
, (770, 29)
loc (770, 31)
) (770, 34)
, (770, 35)
tokens (770, 37)
, (770, 43)
errors (770, 45)
| (772, 2)
( (772, 4)
Token (772, 5)
. (772, 10)
Str (772, 11)
value (772, 15)
, (772, 20)
loc (772, 22)
) (772, 25)
:: (772, 27)
tokens (772, 30)
-> (772, 37)
AExpr (773, 4)
. (773, 9)
Lit (773, 10)
( (773, 14)
Lit (773, 15)
. (773, 18)
Str (773, 19)
value (773, 23)
, (773, 28)
loc (773, 30)
) (773, 33)
, (773, 34)
tokens (773, 36)
, (773, 42)
errors (773, 44)
| (775, 2)
( (775, 4)
Token (775, 5)
. (775, 10)
Ident (775, 11)
ident (775, 17)
, (775, 22)
loc (775, 24)
) (775, 27)
:: (775, 29)
tokens (775, 32)
-> (775, 39)
AExpr (776, 4)
. (776, 9)
Ident (776, 10)
( (776, 16)
ident (776, 17)
, (776, 22)
loc (776, 24)
) (776, 27)
, (776, 28)
tokens (776, 30)
, (776, 36)
errors (776, 38)
| (778, 2)
( (778, 4)
Token (778, 5)
. (778, 10)
ParenL (778, 11)
, (778, 17)
parenLoc (778, 19)
) (778, 27)
:: (778, 29)
tokens (778, 32)
-> (778, 39)
parseParenBody (779, 4)
baseLoc (779, 19)
parenLoc (779, 27)
( (779, 36)
tokens (779, 37)
, (779, 43)
errors (779, 45)
) (779, 51)
| (781, 2)
( (781, 4)
Token (781, 5)
. (781, 10)
BracketL (781, 11)
, (781, 19)
bracketLoc (781, 21)
) (781, 31)
:: (781, 33)
tokens (781, 36)
-> (781, 43)
parseList (782, 4)
baseLoc (782, 14)
bracketLoc (782, 22)
( (782, 33)
tokens (782, 34)
, (782, 40)
errors (782, 42)
) (782, 48)
| (784, 2)
( (784, 4)
Token (784, 5)
. (784, 10)
If (784, 11)
, (784, 13)
loc (784, 15)
) (784, 18)
:: (784, 20)
tokens (784, 23)
-> (784, 30)
parseIf (785, 4)
loc (785, 12)
( (785, 16)
tokens (785, 17)
, (785, 23)
errors (785, 25)
) (785, 31)
| (787, 2)
( (787, 4)
Token (787, 5)
. (787, 10)
Match (787, 11)
, (787, 16)
loc (787, 18)
) (787, 21)
:: (787, 23)
tokens (787, 26)
-> (787, 33)
parseMatch (788, 4)
loc (788, 15)
( (788, 19)
tokens (788, 20)
, (788, 26)
errors (788, 28)
) (788, 34)
| (790, 2)
( (790, 4)
Token (790, 5)
. (790, 10)
Fun (790, 11)
, (790, 14)
loc (790, 16)
) (790, 19)
:: (790, 21)
tokens (790, 24)
-> (790, 31)
parseFun (791, 4)
baseLoc (791, 13)
loc (791, 21)
( (791, 25)
tokens (791, 26)
, (791, 32)
errors (791, 34)
) (791, 40)
| (793, 2)
( (793, 4)
Token (793, 5)
. (793, 10)
Let (793, 11)
, (793, 14)
letLoc (793, 16)
) (793, 22)
:: (793, 24)
tokens (793, 27)
-> (793, 34)
parseLet (794, 4)
letLoc (794, 13)
( (794, 20)
tokens (794, 21)
, (794, 27)
errors (794, 29)
) (794, 35)
| (796, 2)
_ (796, 4)
-> (796, 6)
parseExprError (797, 4)
"Expected an expression" (797, 19)
( (797, 44)
tokens (797, 45)
, (797, 51)
errors (797, 53)
) (797, 59)
let (800, 0)
parseSuffix (800, 4)
baseLoc (800, 16)
( (800, 24)
tokens (800, 25)
, (800, 31)
errors (800, 33)
) (800, 39)
= (800, 41)
let (801, 2)
l (801, 6)
, (801, 7)
tokens (801, 9)
, (801, 15)
errors (801, 17)
= (801, 24)
parseAtom (801, 26)
baseLoc (801, 36)
( (801, 44)
tokens (801, 45)
, (801, 51)
errors (801, 53)
) (801, 59)
let (803, 2)
rec (803, 6)
go (803, 10)
acc (803, 13)
( (803, 17)
tokens (803, 18)
, (803, 24)
errors (803, 26)
) (803, 32)
= (803, 34)
match (804, 4)
tokens (804, 10)
with (804, 17)
| (805, 4)
( (805, 6)
Token (805, 7)
. (805, 12)
Dot (805, 13)
, (805, 16)
loc (805, 18)
) (805, 21)
:: (805, 23)
( (805, 26)
Token (805, 27)
. (805, 32)
BracketL (805, 33)
, (805, 41)
_ (805, 43)
) (805, 44)
:: (805, 46)
tokens (805, 49)
-> (805, 56)
let (806, 6)
r (806, 10)
, (806, 11)
tokens (806, 13)
, (806, 19)
errors (806, 21)
= (806, 28)
parseRange (806, 30)
baseLoc (806, 41)
( (806, 49)
tokens (806, 50)
, (806, 56)
errors (806, 58)
) (806, 64)
let (808, 6)
tokens (808, 10)
, (808, 16)
errors (808, 18)
= (808, 25)
match (809, 8)
tokens (809, 14)
with (809, 21)
| (810, 8)
( (810, 10)
Token (810, 11)
. (810, 16)
BracketR (810, 17)
, (810, 25)
_ (810, 27)
) (810, 28)
:: (810, 30)
tokens (810, 33)
-> (810, 40)
tokens (811, 10)
, (811, 16)
errors (811, 18)
| (813, 8)
_ (813, 10)
-> (813, 12)
let (814, 10)
errors (814, 14)
= (814, 21)
parseNewError (814, 23)
"Expected closing \']\'" (814, 37)
( (814, 60)
tokens (814, 61)
, (814, 67)
errors (814, 69)
) (814, 75)
tokens (815, 10)
, (815, 16)
errors (815, 18)
go (817, 6)
( (817, 9)
AExpr (817, 10)
. (817, 15)
Index (817, 16)
( (817, 22)
acc (817, 23)
, (817, 26)
r (817, 28)
, (817, 29)
loc (817, 31)
) (817, 34)
) (817, 35)
( (817, 37)
tokens (817, 38)
, (817, 44)
errors (817, 46)
) (817, 52)
| (819, 4)
( (819, 6)
Token (819, 7)
. (819, 12)
Dot (819, 13)
, (819, 16)
loc (819, 18)
) (819, 21)
:: (819, 23)
( (819, 26)
Token (819, 27)
. (819, 32)
Ident (819, 33)
r (819, 39)
, (819, 40)
_ (819, 42)
) (819, 43)
:: (819, 45)
tokens (819, 48)
-> (819, 55)
go (820, 6)
( (820, 9)
AExpr (820, 10)
. (820, 15)
Nav (820, 16)
( (820, 20)
acc (820, 21)
, (820, 24)
r (820, 26)
, (820, 27)
loc (820, 29)
) (820, 32)
) (820, 33)
( (820, 35)
tokens (820, 36)
, (820, 42)
errors (820, 44)
) (820, 50)
| (822, 4)
( (822, 6)
Token (822, 7)
. (822, 12)
Dot (822, 13)
, (822, 16)
_ (822, 18)
) (822, 19)
:: (822, 21)
tokens (822, 24)
-> (822, 31)
let (823, 6)
errors (823, 10)
= (823, 17)
parseNewError (823, 19)
"Expected .[] or .field" (823, 33)
( (823, 58)
tokens (823, 59)
, (823, 65)
errors (823, 67)
) (823, 73)
acc (824, 6)
, (824, 9)
tokens (824, 11)
, (824, 17)
errors (824, 19)
| (826, 4)
_ (826, 6)
-> (826, 8)
acc (827, 6)
, (827, 9)
tokens (827, 11)
, (827, 17)
errors (827, 19)
go (829, 2)
l (829, 5)
( (829, 7)
tokens (829, 8)
, (829, 14)
errors (829, 16)
) (829, 22)
let (832, 0)
parseApp (832, 4)
baseLoc (832, 13)
( (832, 21)
tokens (832, 22)
, (832, 28)
errors (832, 30)
) (832, 36)
= (832, 38)
let (833, 2)
calleeLoc (833, 6)
= (833, 16)
nextLoc (833, 18)
tokens (833, 26)
let (834, 2)
argBaseLoc (834, 6)
= (834, 17)
calleeLoc (834, 19)
|> (834, 29)
locAddX (834, 32)
1 (834, 40)
let (836, 2)
callee (836, 6)
, (836, 12)
tokens (836, 14)
, (836, 20)
errors (836, 22)
= (836, 29)
parseSuffix (836, 31)
baseLoc (836, 43)
( (836, 51)
tokens (836, 52)
, (836, 58)
errors (836, 60)
) (836, 66)
let (838, 2)
rec (838, 6)
go (838, 10)
callee (838, 13)
( (838, 20)
tokens (838, 21)
, (838, 27)
errors (838, 29)
) (838, 35)
= (838, 37)
if (839, 4)
nextInside (839, 7)
argBaseLoc (839, 18)
tokens (839, 29)
&& (839, 36)
leadsArg (839, 39)
tokens (839, 48)
then (839, 55)
let (840, 6)
arg (840, 10)
, (840, 13)
tokens (840, 15)
, (840, 21)
errors (840, 23)
= (840, 30)
parseSuffix (840, 32)
baseLoc (840, 44)
( (840, 52)
tokens (840, 53)
, (840, 59)
errors (840, 61)
) (840, 67)
go (841, 6)
( (841, 9)
AExpr (841, 10)
. (841, 15)
Bin (841, 16)
( (841, 20)
Op (841, 21)
. (841, 23)
App (841, 24)
, (841, 27)
callee (841, 29)
, (841, 35)
arg (841, 37)
, (841, 40)
calleeLoc (841, 42)
) (841, 51)
) (841, 52)
( (841, 54)
tokens (841, 55)
, (841, 61)
errors (841, 63)
) (841, 69)
else (842, 4)
callee (843, 6)
, (843, 12)
tokens (843, 14)
, (843, 20)
errors (843, 22)
go (845, 2)
callee (845, 5)
( (845, 12)
tokens (845, 13)
, (845, 19)
errors (845, 21)
) (845, 27)
let (848, 0)
parsePrefix (848, 4)
baseLoc (848, 16)
( (848, 24)
tokens (848, 25)
, (848, 31)
errors (848, 33)
) (848, 39)
= (848, 41)
match (849, 2)
tokens (849, 8)
with (849, 15)
| (850, 2)
( (850, 4)
Token (850, 5)
. (850, 10)
Minus (850, 11)
, (850, 16)
loc (850, 18)
) (850, 21)
:: (850, 23)
tokens (850, 26)
-> (850, 33)
let (851, 4)
arg (851, 8)
, (851, 11)
tokens (851, 13)
, (851, 19)
errors (851, 21)
= (851, 28)
parseApp (851, 30)
baseLoc (851, 39)
( (851, 47)
tokens (851, 48)
, (851, 54)
errors (851, 56)
) (851, 62)
AExpr (852, 4)
. (852, 9)
Uni (852, 10)
( (852, 14)
UniOp (852, 15)
. (852, 20)
Neg (852, 21)
, (852, 24)
arg (852, 26)
, (852, 29)
loc (852, 31)
) (852, 34)
, (852, 35)
tokens (852, 37)
, (852, 43)
errors (852, 45)
| (854, 2)
_ (854, 4)
-> (854, 6)
parseApp (855, 4)
baseLoc (855, 13)
( (855, 21)
tokens (855, 22)
, (855, 28)
errors (855, 30)
) (855, 36)
let (857, 0)
parseNextLevelOp (857, 4)
level (857, 21)
baseLoc (857, 27)
( (857, 35)
tokens (857, 36)
, (857, 42)
errors (857, 44)
) (857, 50)
= (857, 52)
match (858, 2)
opLevelToNext (858, 8)
level (858, 22)
with (858, 28)
| (859, 2)
OpLevel (859, 4)
. (859, 11)
Prefix (859, 12)
-> (859, 19)
parsePrefix (860, 4)
baseLoc (860, 16)
( (860, 24)
tokens (860, 25)
, (860, 31)
errors (860, 33)
) (860, 39)
| (862, 2)
nextLevel (862, 4)
-> (862, 14)
parseOp (863, 4)
nextLevel (863, 12)
baseLoc (863, 22)
( (863, 30)
tokens (863, 31)
, (863, 37)
errors (863, 39)
) (863, 45)
let (865, 0)
rec (865, 4)
parseOps (865, 8)
level (865, 17)
baseLoc (865, 23)
first (865, 31)
( (865, 37)
tokens (865, 38)
, (865, 44)
errors (865, 46)
) (865, 52)
= (865, 54)
let (866, 2)
nextL (866, 6)
expr (866, 12)
op (866, 17)
opLoc (866, 20)
( (866, 26)
tokens (866, 27)
, (866, 33)
errors (866, 35)
) (866, 41)
= (866, 43)
let (867, 4)
second (867, 8)
, (867, 14)
tokens (867, 16)
, (867, 22)
errors (867, 24)
= (867, 31)
parseNextLevelOp (867, 33)
level (867, 50)
baseLoc (867, 56)
( (867, 64)
tokens (867, 65)
, (867, 71)
errors (867, 73)
) (867, 79)
let (868, 4)
expr (868, 8)
= (868, 13)
AExpr (868, 15)
. (868, 20)
Bin (868, 21)
( (868, 25)
op (868, 26)
, (868, 28)
expr (868, 30)
, (868, 34)
second (868, 36)
, (868, 42)
opLoc (868, 44)
) (868, 49)
parseOps (869, 4)
level (869, 13)
baseLoc (869, 19)
expr (869, 27)
( (869, 32)
tokens (869, 33)
, (869, 39)
errors (869, 41)
) (869, 47)
let (871, 2)
nextR (871, 6)
expr (871, 12)
op (871, 17)
opLoc (871, 20)
( (871, 26)
tokens (871, 27)
, (871, 33)
errors (871, 35)
) (871, 41)
= (871, 43)
let (872, 4)
second (872, 8)
, (872, 14)
tokens (872, 16)
, (872, 22)
errors (872, 24)
= (872, 31)
parseOp (872, 33)
level (872, 41)
baseLoc (872, 47)
( (872, 55)
tokens (872, 56)
, (872, 62)
errors (872, 64)
) (872, 70)
let (873, 4)
expr (873, 8)
= (873, 13)
AExpr (873, 15)
. (873, 20)
Bin (873, 21)
( (873, 25)
op (873, 26)
, (873, 28)
expr (873, 30)
, (873, 34)
second (873, 36)
, (873, 42)
opLoc (873, 44)
) (873, 49)
parseOps (874, 4)
level (874, 13)
baseLoc (874, 19)
expr (874, 27)
( (874, 32)
tokens (874, 33)
, (874, 39)
errors (874, 41)
) (874, 47)
match (876, 2)
level (876, 8)
, (876, 13)
tokens (876, 15)
with (876, 22)
| (877, 2)
OpLevel (877, 4)
. (877, 11)
Or (877, 12)
, (877, 14)
( (877, 16)
Token (877, 17)
. (877, 22)
PipePipe (877, 23)
, (877, 31)
opLoc (877, 33)
) (877, 38)
:: (877, 40)
tokens (877, 43)
-> (877, 50)
nextL (878, 4)
first (878, 10)
Op (878, 16)
. (878, 18)
Or (878, 19)
opLoc (878, 22)
( (878, 28)
tokens (878, 29)
, (878, 35)
errors (878, 37)
) (878, 43)
| (880, 2)
OpLevel (880, 4)
. (880, 11)
And (880, 12)
, (880, 15)
( (880, 17)
Token (880, 18)
. (880, 23)
AmpAmp (880, 24)
, (880, 30)
opLoc (880, 32)
) (880, 37)
:: (880, 39)
tokens (880, 42)
-> (880, 49)
nextL (881, 4)
first (881, 10)
Op (881, 16)
. (881, 18)
And (881, 19)
opLoc (881, 23)
( (881, 29)
tokens (881, 30)
, (881, 36)
errors (881, 38)
) (881, 44)
| (883, 2)
OpLevel (883, 4)
. (883, 11)
Cmp (883, 12)
, (883, 15)
( (883, 17)
Token (883, 18)
. (883, 23)
Eq (883, 24)
, (883, 26)
opLoc (883, 28)
) (883, 33)
:: (883, 35)
tokens (883, 38)
-> (883, 45)
nextL (884, 4)
first (884, 10)
Op (884, 16)
. (884, 18)
Eq (884, 19)
opLoc (884, 22)
( (884, 28)
tokens (884, 29)
, (884, 35)
errors (884, 37)
) (884, 43)
| (886, 2)
OpLevel (886, 4)
. (886, 11)
Cmp (886, 12)
, (886, 15)
( (886, 17)
Token (886, 18)
. (886, 23)
LtGt (886, 24)
, (886, 28)
opLoc (886, 30)
) (886, 35)
:: (886, 37)
tokens (886, 40)
-> (886, 47)
nextL (887, 4)
first (887, 10)
Op (887, 16)
. (887, 18)
Ne (887, 19)
opLoc (887, 22)
( (887, 28)
tokens (887, 29)
, (887, 35)
errors (887, 37)
) (887, 43)
| (889, 2)
OpLevel (889, 4)
. (889, 11)
Cmp (889, 12)
, (889, 15)
( (889, 17)
Token (889, 18)
. (889, 23)
Lt (889, 24)
, (889, 26)
opLoc (889, 28)
) (889, 33)
:: (889, 35)
tokens (889, 38)
-> (889, 45)
nextL (890, 4)
first (890, 10)
Op (890, 16)
. (890, 18)
Lt (890, 19)
opLoc (890, 22)
( (890, 28)
tokens (890, 29)
, (890, 35)
errors (890, 37)
) (890, 43)
| (892, 2)
OpLevel (892, 4)
. (892, 11)
Cmp (892, 12)
, (892, 15)
( (892, 17)
Token (892, 18)
. (892, 23)
LtEq (892, 24)
, (892, 28)
opLoc (892, 30)
) (892, 35)
:: (892, 37)
tokens (892, 40)
-> (892, 47)
nextL (893, 4)
first (893, 10)
Op (893, 16)
. (893, 18)
Le (893, 19)
opLoc (893, 22)
( (893, 28)
tokens (893, 29)
, (893, 35)
errors (893, 37)
) (893, 43)
| (895, 2)
OpLevel (895, 4)
. (895, 11)
Cmp (895, 12)
, (895, 15)
( (895, 17)
Token (895, 18)
. (895, 23)
Gt (895, 24)
, (895, 26)
opLoc (895, 28)
) (895, 33)
:: (895, 35)
tokens (895, 38)
-> (895, 45)
nextL (896, 4)
first (896, 10)
Op (896, 16)
. (896, 18)
Gt (896, 19)
opLoc (896, 22)
( (896, 28)
tokens (896, 29)
, (896, 35)
errors (896, 37)
) (896, 43)
| (898, 2)
OpLevel (898, 4)
. (898, 11)
Cmp (898, 12)
, (898, 15)
( (898, 17)
Token (898, 18)
. (898, 23)
GtEq (898, 24)
, (898, 28)
opLoc (898, 30)
) (898, 35)
:: (898, 37)
tokens (898, 40)
-> (898, 47)
nextL (899, 4)
first (899, 10)
Op (899, 16)
. (899, 18)
Ge (899, 19)
opLoc (899, 22)
( (899, 28)
tokens (899, 29)
, (899, 35)
errors (899, 37)
) (899, 43)
| (901, 2)
OpLevel (901, 4)
. (901, 11)
Pipe (901, 12)
, (901, 16)
( (901, 18)
Token (901, 19)
. (901, 24)
PipeGt (901, 25)
, (901, 31)
opLoc (901, 33)
) (901, 38)
:: (901, 40)
tokens (901, 43)
-> (901, 50)
nextL (902, 4)
first (902, 10)
Op (902, 16)
. (902, 18)
Pipe (902, 19)
opLoc (902, 24)
( (902, 30)
tokens (902, 31)
, (902, 37)
errors (902, 39)
) (902, 45)
| (904, 2)
OpLevel (904, 4)
. (904, 11)
Cons (904, 12)
, (904, 16)
( (904, 18)
Token (904, 19)
. (904, 24)
ColonColon (904, 25)
, (904, 35)
opLoc (904, 37)
) (904, 42)
:: (904, 44)
tokens (904, 47)
-> (904, 54)
nextR (905, 4)
first (905, 10)
Op (905, 16)
. (905, 18)
Cons (905, 19)
opLoc (905, 24)
( (905, 30)
tokens (905, 31)
, (905, 37)
errors (905, 39)
) (905, 45)
| (907, 2)
OpLevel (907, 4)
. (907, 11)
Add (907, 12)
, (907, 15)
( (907, 17)
Token (907, 18)
. (907, 23)
Plus (907, 24)
, (907, 28)
opLoc (907, 30)
) (907, 35)
:: (907, 37)
tokens (907, 40)
-> (907, 47)
nextL (908, 4)
first (908, 10)
Op (908, 16)
. (908, 18)
Add (908, 19)
opLoc (908, 23)
( (908, 29)
tokens (908, 30)
, (908, 36)
errors (908, 38)
) (908, 44)
| (910, 2)
OpLevel (910, 4)
. (910, 11)
Add (910, 12)
, (910, 15)
( (910, 17)
Token (910, 18)
. (910, 23)
Minus (910, 24)
, (910, 29)
opLoc (910, 31)
) (910, 36)
:: (910, 38)
tokens (910, 41)
-> (910, 48)
nextL (911, 4)
first (911, 10)
Op (911, 16)
. (911, 18)
Sub (911, 19)
opLoc (911, 23)
( (911, 29)
tokens (911, 30)
, (911, 36)
errors (911, 38)
) (911, 44)
| (913, 2)
OpLevel (913, 4)
. (913, 11)
Mul (913, 12)
, (913, 15)
( (913, 17)
Token (913, 18)
. (913, 23)
Star (913, 24)
, (913, 28)
opLoc (913, 30)
) (913, 35)
:: (913, 37)
tokens (913, 40)
-> (913, 47)
nextL (914, 4)
first (914, 10)
Op (914, 16)
. (914, 18)
Mul (914, 19)
opLoc (914, 23)
( (914, 29)
tokens (914, 30)
, (914, 36)
errors (914, 38)
) (914, 44)
| (916, 2)
OpLevel (916, 4)
. (916, 11)
Mul (916, 12)
, (916, 15)
( (916, 17)
Token (916, 18)
. (916, 23)
Slash (916, 24)
, (916, 29)
opLoc (916, 31)
) (916, 36)
:: (916, 38)
tokens (916, 41)
-> (916, 48)
nextL (917, 4)
first (917, 10)
Op (917, 16)
. (917, 18)
Div (917, 19)
opLoc (917, 23)
( (917, 29)
tokens (917, 30)
, (917, 36)
errors (917, 38)
) (917, 44)
| (919, 2)
OpLevel (919, 4)
. (919, 11)
Mul (919, 12)
, (919, 15)
( (919, 17)
Token (919, 18)
. (919, 23)
Percent (919, 24)
, (919, 31)
opLoc (919, 33)
) (919, 38)
:: (919, 40)
tokens (919, 43)
-> (919, 50)
nextL (920, 4)
first (920, 10)
Op (920, 16)
. (920, 18)
Mod (920, 19)
opLoc (920, 23)
( (920, 29)
tokens (920, 30)
, (920, 36)
errors (920, 38)
) (920, 44)
| (922, 2)
_ (922, 4)
-> (922, 6)
first (923, 4)
, (923, 9)
tokens (923, 11)
, (923, 17)
errors (923, 19)
let (926, 0)
parseOp (926, 4)
level (926, 12)
baseLoc (926, 18)
( (926, 26)
tokens (926, 27)
, (926, 33)
errors (926, 35)
) (926, 41)
= (926, 43)
let (927, 2)
first (927, 6)
, (927, 11)
tokens (927, 13)
, (927, 19)
errors (927, 21)
= (927, 28)
parseNextLevelOp (927, 30)
level (927, 47)
baseLoc (927, 53)
( (927, 61)
tokens (927, 62)
, (927, 68)
errors (927, 70)
) (927, 76)
parseOps (928, 2)
level (928, 11)
baseLoc (928, 17)
first (928, 25)
( (928, 31)
tokens (928, 32)
, (928, 38)
errors (928, 40)
) (928, 46)
let (930, 0)
parseTupleItem (930, 4)
baseLoc (930, 19)
( (930, 27)
tokens (930, 28)
, (930, 34)
errors (930, 36)
) (930, 42)
= (930, 44)
parseOp (931, 2)
OpLevel (931, 10)
. (931, 17)
Or (931, 18)
baseLoc (931, 21)
( (931, 29)
tokens (931, 30)
, (931, 36)
errors (931, 38)
) (931, 44)
let (934, 0)
parseTuple (934, 4)
baseLoc (934, 15)
( (934, 23)
tokens (934, 24)
, (934, 30)
errors (934, 32)
) (934, 38)
= (934, 40)
let (935, 2)
rec (935, 6)
go (935, 10)
acc (935, 13)
( (935, 17)
tokens (935, 18)
, (935, 24)
errors (935, 26)
) (935, 32)
= (935, 34)
match (936, 4)
tokens (936, 10)
with (936, 17)
| (937, 4)
( (937, 6)
Token (937, 7)
. (937, 12)
Comma (937, 13)
, (937, 18)
_ (937, 20)
) (937, 21)
:: (937, 23)
tokens (937, 26)
-> (937, 33)
let (938, 6)
second (938, 10)
, (938, 16)
tokens (938, 18)
, (938, 24)
errors (938, 26)
= (938, 33)
parseTupleItem (938, 35)
baseLoc (938, 50)
( (938, 58)
tokens (938, 59)
, (938, 65)
errors (938, 67)
) (938, 73)
go (939, 6)
( (939, 9)
second (939, 10)
:: (939, 17)
acc (939, 20)
) (939, 23)
( (939, 25)
tokens (939, 26)
, (939, 32)
errors (939, 34)
) (939, 40)
| (941, 4)
tokens (941, 6)
-> (941, 13)
listRev (942, 6)
acc (942, 14)
, (942, 17)
tokens (942, 19)
, (942, 25)
errors (942, 27)
let (944, 2)
item (944, 6)
, (944, 10)
tokens (944, 12)
, (944, 18)
errors (944, 20)
= (944, 27)
parseTupleItem (944, 29)
baseLoc (944, 44)
( (944, 52)
tokens (944, 53)
, (944, 59)
errors (944, 61)
) (944, 67)
match (946, 2)
tokens (946, 8)
with (946, 15)
| (947, 2)
( (947, 4)
Token (947, 5)
. (947, 10)
Comma (947, 11)
, (947, 16)
loc (947, 18)
) (947, 21)
:: (947, 23)
_ (947, 26)
-> (947, 28)
let (948, 4)
items (948, 8)
, (948, 13)
tokens (948, 15)
, (948, 21)
errors (948, 23)
= (948, 30)
go (948, 32)
[ (948, 35)
] (948, 36)
( (948, 38)
tokens (948, 39)
, (948, 45)
errors (948, 47)
) (948, 53)
AExpr (949, 4)
. (949, 9)
TupleLit (949, 10)
( (949, 19)
item (949, 20)
:: (949, 25)
items (949, 28)
, (949, 33)
loc (949, 35)
) (949, 38)
, (949, 39)
tokens (949, 41)
, (949, 47)
errors (949, 49)
| (951, 2)
_ (951, 4)
-> (951, 6)
item (952, 4)
, (952, 8)
tokens (952, 10)
, (952, 16)
errors (952, 18)
let (955, 0)
parseAnno (955, 4)
baseLoc (955, 14)
( (955, 22)
tokens (955, 23)
, (955, 29)
errors (955, 31)
) (955, 37)
= (955, 39)
let (956, 2)
body (956, 6)
, (956, 10)
tokens (956, 12)
, (956, 18)
errors (956, 20)
= (956, 27)
parseTuple (956, 29)
baseLoc (956, 40)
( (956, 48)
tokens (956, 49)
, (956, 55)
errors (956, 57)
) (956, 63)
match (958, 2)
tokens (958, 8)
with (958, 15)
| (959, 2)
( (959, 4)
Token (959, 5)
. (959, 10)
Colon (959, 11)
, (959, 16)
loc (959, 18)
) (959, 21)
:: (959, 23)
tokens (959, 26)
-> (959, 33)
let (960, 4)
ty (960, 8)
, (960, 10)
tokens (960, 12)
, (960, 18)
errors (960, 20)
= (960, 27)
parseTy (960, 29)
baseLoc (960, 37)
( (960, 45)
tokens (960, 46)
, (960, 52)
errors (960, 54)
) (960, 60)
AExpr (961, 4)
. (961, 9)
Anno (961, 10)
( (961, 15)
body (961, 16)
, (961, 20)
ty (961, 22)
, (961, 24)
loc (961, 26)
) (961, 29)
, (961, 30)
tokens (961, 32)
, (961, 38)
errors (961, 40)
| (963, 2)
_ (963, 4)
-> (963, 6)
body (964, 4)
, (964, 8)
tokens (964, 10)
, (964, 16)
errors (964, 18)
let (966, 0)
parseExpr (966, 4)
baseLoc (966, 14)
( (966, 22)
tokens (966, 23)
, (966, 29)
errors (966, 31)
) (966, 37)
= (966, 39)
parseAnno (967, 2)
baseLoc (967, 12)
( (967, 20)
tokens (967, 21)
, (967, 27)
errors (967, 29)
) (967, 35)
let (969, 0)
parseStmt (969, 4)
baseLoc (969, 14)
( (969, 22)
tokens (969, 23)
, (969, 29)
errors (969, 31)
) (969, 37)
= (969, 39)
match (970, 2)
tokens (970, 8)
with (970, 15)
| (971, 2)
( (971, 4)
Token (971, 5)
. (971, 10)
Let (971, 11)
, (971, 14)
letLoc (971, 16)
) (971, 22)
:: (971, 24)
( (971, 27)
Token (971, 28)
. (971, 33)
Rec (971, 34)
, (971, 37)
_ (971, 39)
) (971, 40)
:: (971, 42)
tokens (971, 45)
-> (971, 52)
parseLet (973, 4)
letLoc (973, 13)
( (973, 20)
tokens (973, 21)
, (973, 27)
errors (973, 29)
) (973, 35)
| (975, 2)
( (975, 4)
Token (975, 5)
. (975, 10)
Let (975, 11)
, (975, 14)
letLoc (975, 16)
) (975, 22)
:: (975, 24)
tokens (975, 27)
-> (975, 34)
parseLet (976, 4)
letLoc (976, 13)
( (976, 20)
tokens (976, 21)
, (976, 27)
errors (976, 29)
) (976, 35)
| (978, 2)
( (978, 4)
Token (978, 5)
. (978, 10)
Type (978, 11)
, (978, 15)
typeLoc (978, 17)
) (978, 24)
:: (978, 26)
tokens (978, 29)
-> (978, 36)
parseTyDecl (979, 4)
typeLoc (979, 16)
( (979, 24)
tokens (979, 25)
, (979, 31)
errors (979, 33)
) (979, 39)
| (981, 2)
( (981, 4)
Token (981, 5)
. (981, 10)
Open (981, 11)
, (981, 15)
typeLoc (981, 17)
) (981, 24)
:: (981, 26)
tokens (981, 29)
-> (981, 36)
parseOpen (982, 4)
typeLoc (982, 14)
( (982, 22)
tokens (982, 23)
, (982, 29)
errors (982, 31)
) (982, 37)
| (984, 2)
_ (984, 4)
-> (984, 6)
parseExpr (985, 4)
baseLoc (985, 14)
( (985, 22)
tokens (985, 23)
, (985, 29)
errors (985, 31)
) (985, 37)
let (990, 0)
rec (990, 4)
parseStmts (990, 8)
baseLoc (990, 19)
( (990, 27)
tokens (990, 28)
, (990, 34)
errors (990, 36)
) (990, 42)
= (990, 44)
let (991, 2)
rec (991, 6)
go (991, 10)
acc (991, 13)
alignLoc (991, 17)
( (991, 26)
tokens (991, 27)
, (991, 33)
errors (991, 35)
) (991, 41)
= (991, 43)
match (992, 4)
tokens (992, 10)
with (992, 17)
| (993, 4)
( (993, 6)
Token (993, 7)
. (993, 12)
Semi (993, 13)
, (993, 17)
semiLoc (993, 19)
) (993, 26)
:: (993, 28)
tokens (993, 31)
when (994, 6)
locInside (994, 11)
alignLoc (994, 21)
semiLoc (994, 30)
-> (994, 38)
let (995, 6)
expr (995, 10)
, (995, 14)
tokens (995, 16)
, (995, 22)
errors (995, 24)
= (995, 31)
parseStmt (995, 33)
baseLoc (995, 43)
( (995, 51)
tokens (995, 52)
, (995, 58)
errors (995, 60)
) (995, 66)
go (996, 6)
( (996, 9)
expr (996, 10)
:: (996, 15)
acc (996, 18)
) (996, 21)
alignLoc (996, 23)
( (996, 32)
tokens (996, 33)
, (996, 39)
errors (996, 41)
) (996, 47)
| (998, 4)
_ (998, 6)
when (998, 8)
locIsSameColumn (998, 13)
alignLoc (998, 29)
( (998, 38)
nextLoc (998, 39)
tokens (998, 47)
) (998, 53)
&& (998, 55)
leadsExpr (998, 58)
tokens (998, 68)
-> (998, 75)
let (999, 6)
expr (999, 10)
, (999, 14)
tokens (999, 16)
, (999, 22)
errors (999, 24)
= (999, 31)
parseStmt (999, 33)
baseLoc (999, 43)
( (999, 51)
tokens (999, 52)
, (999, 58)
errors (999, 60)
) (999, 66)
go (1000, 6)
( (1000, 9)
expr (1000, 10)
:: (1000, 15)
acc (1000, 18)
) (1000, 21)
alignLoc (1000, 23)
( (1000, 32)
tokens (1000, 33)
, (1000, 39)
errors (1000, 41)
) (1000, 47)
| (1002, 4)
_ (1002, 6)
-> (1002, 8)
listRev (1003, 6)
acc (1003, 14)
, (1003, 17)
tokens (1003, 19)
, (1003, 25)
errors (1003, 27)
let (1005, 2)
alignLoc (1005, 6)
= (1005, 15)
nextLoc (1005, 17)
tokens (1005, 25)
if (1006, 2)
locInside (1006, 5)
baseLoc (1006, 15)
alignLoc (1006, 23)
then (1006, 32)
go (1007, 4)
[ (1007, 7)
] (1007, 8)
alignLoc (1007, 10)
( (1007, 19)
tokens (1007, 20)
, (1007, 26)
errors (1007, 28)
) (1007, 34)
else (1008, 2)
[ (1009, 4)
] (1009, 5)
, (1009, 6)
tokens (1009, 8)
, (1009, 14)
errors (1009, 16)
let (1017, 0)
parseSemi (1017, 4)
baseLoc (1017, 14)
mainLoc (1017, 22)
( (1017, 30)
tokens (1017, 31)
, (1017, 37)
errors (1017, 39)
) (1017, 45)
= (1017, 47)
let (1018, 2)
items (1018, 6)
, (1018, 11)
tokens (1018, 13)
, (1018, 19)
errors (1018, 21)
= (1018, 28)
parseStmts (1018, 30)
baseLoc (1018, 41)
( (1018, 49)
tokens (1018, 50)
, (1018, 56)
errors (1018, 58)
) (1018, 64)
match (1020, 2)
items (1020, 8)
with (1020, 14)
| (1021, 2)
[ (1021, 4)
] (1021, 5)
-> (1021, 7)
parseExprError (1022, 4)
"Expected statements" (1022, 19)
( (1022, 41)
tokens (1022, 42)
, (1022, 48)
errors (1022, 50)
) (1022, 56)
| (1024, 2)
[ (1024, 4)
item (1024, 5)
] (1024, 9)
-> (1024, 11)
item (1025, 4)
, (1025, 8)
tokens (1025, 10)
, (1025, 16)
errors (1025, 18)
| (1027, 2)
_ (1027, 4)
-> (1027, 6)
AExpr (1028, 4)
. (1028, 9)
Semi (1028, 10)
( (1028, 15)
items (1028, 16)
, (1028, 21)
mainLoc (1028, 23)
) (1028, 30)
, (1028, 31)
tokens (1028, 33)
, (1028, 39)
errors (1028, 41)
let (1031, 0)
parseTopLevel (1031, 4)
( (1031, 18)
tokens (1031, 19)
, (1031, 25)
errors (1031, 27)
) (1031, 33)
= (1031, 35)
let (1032, 2)
topLoc (1032, 6)
= (1032, 13)
0 (1032, 15)
, (1032, 16)
0 (1032, 18)
match (1034, 2)
tokens (1034, 8)
with (1034, 15)
| (1035, 2)
[ (1035, 4)
] (1035, 5)
-> (1035, 7)
AExpr (1036, 4)
. (1036, 9)
TupleLit (1036, 10)
( (1036, 19)
[ (1036, 20)
] (1036, 21)
, (1036, 22)
topLoc (1036, 24)
) (1036, 30)
, (1036, 31)
tokens (1036, 33)
, (1036, 39)
errors (1036, 41)
| (1038, 2)
( (1038, 4)
Token (1038, 5)
. (1038, 10)
Module (1038, 11)
, (1038, 17)
moduleLoc (1038, 19)
) (1038, 28)
:: (1039, 4)
( (1039, 7)
Token (1039, 8)
. (1039, 13)
Rec (1039, 14)
, (1039, 17)
_ (1039, 19)
) (1039, 20)
:: (1040, 4)
( (1040, 7)
Token (1040, 8)
. (1040, 13)
Ident (1040, 14)
_ (1040, 20)
, (1040, 21)
_ (1040, 23)
) (1040, 24)
:: (1041, 4)
( (1041, 7)
Token (1041, 8)
. (1041, 13)
Dot (1041, 14)
, (1041, 17)
_ (1041, 19)
) (1041, 20)
:: (1042, 4)
( (1042, 7)
Token (1042, 8)
. (1042, 13)
Ident (1042, 14)
_ (1042, 20)
, (1042, 21)
_ (1042, 23)
) (1042, 24)
:: (1042, 26)
tokens (1042, 29)
-> (1042, 36)
parseSemi (1043, 4)
moduleLoc (1043, 14)
moduleLoc (1043, 24)
( (1043, 34)
tokens (1043, 35)
, (1043, 41)
errors (1043, 43)
) (1043, 49)
| (1045, 2)
( (1045, 4)
Token (1045, 5)
. (1045, 10)
Module (1045, 11)
, (1045, 17)
moduleLoc (1045, 19)
) (1045, 28)
:: (1046, 4)
( (1046, 7)
Token (1046, 8)
. (1046, 13)
Rec (1046, 14)
, (1046, 17)
_ (1046, 19)
) (1046, 20)
:: (1047, 4)
( (1047, 7)
Token (1047, 8)
. (1047, 13)
Ident (1047, 14)
_ (1047, 20)
, (1047, 21)
_ (1047, 23)
) (1047, 24)
:: (1047, 26)
tokens (1047, 29)
-> (1047, 36)
parseSemi (1048, 4)
moduleLoc (1048, 14)
moduleLoc (1048, 24)
( (1048, 34)
tokens (1048, 35)
, (1048, 41)
errors (1048, 43)
) (1048, 49)
| (1050, 2)
( (1050, 4)
Token (1050, 5)
. (1050, 10)
Module (1050, 11)
, (1050, 17)
moduleLoc (1050, 19)
) (1050, 28)
:: (1051, 4)
( (1051, 7)
Token (1051, 8)
. (1051, 13)
Ident (1051, 14)
_ (1051, 20)
, (1051, 21)
_ (1051, 23)
) (1051, 24)
:: (1051, 26)
tokens (1051, 29)
-> (1051, 36)
parseSemi (1052, 4)
moduleLoc (1052, 14)
moduleLoc (1052, 24)
( (1052, 34)
tokens (1052, 35)
, (1052, 41)
errors (1052, 43)
) (1052, 49)
| (1054, 2)
_ (1054, 4)
-> (1054, 6)
parseSemi (1055, 4)
topLoc (1055, 14)
topLoc (1055, 21)
( (1055, 28)
tokens (1055, 29)
, (1055, 35)
errors (1055, 37)
) (1055, 43)
let (1057, 0)
parse (1057, 4)
( (1057, 10)
tokens (1057, 11)
: (1057, 17)
( (1057, 19)
Token (1057, 20)
* (1057, 26)
Loc (1057, 28)
) (1057, 31)
list (1057, 33)
) (1057, 37)
: (1057, 38)
AExpr (1057, 40)
* (1057, 46)
( (1057, 48)
string (1057, 49)
* (1057, 56)
Loc (1057, 58)
) (1057, 61)
list (1057, 63)
= (1057, 68)
let (1058, 2)
expr (1058, 6)
, (1058, 10)
tokens (1058, 12)
, (1058, 18)
errors (1058, 20)
= (1058, 27)
parseTopLevel (1058, 29)
( (1058, 43)
tokens (1058, 44)
, (1058, 50)
[ (1058, 52)
] (1058, 53)
) (1058, 54)
let (1060, 2)
errors (1060, 6)
= (1060, 13)
match (1061, 4)
tokens (1061, 10)
with (1061, 17)
| (1062, 4)
[ (1062, 6)
] (1062, 7)
-> (1062, 9)
errors (1063, 6)
| (1065, 4)
_ (1065, 6)
-> (1065, 8)
parseNewError (1066, 6)
"Expected eof" (1066, 20)
( (1066, 35)
tokens (1066, 36)
, (1066, 42)
errors (1066, 44)
) (1066, 50)
expr (1068, 2)
, (1068, 6)
errors (1068, 8)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let:
  - fun:
    - leadsExpr
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (88:21)
      bin:
      - tokenIsExprFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (91:7)
      false
  let:
  - fun:
    - leadsArg
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (96:21)
      bin:
      - tokenIsArgFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (99:7)
      false
  let:
  - fun:
    - leadsPat
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (104:21)
      bin:
      - tokenIsPatFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (107:7)
      false
  let:
  - anno:
    - fun:
      - nextLoc
      - tokens
    - Loc
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (113:8)
      tuple:
      - -: 1
      - 0
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - ERROR:
        - missing
        - (116:19)
      loc
  let:
  - anno:
    - fun:
      - nextInside
      - baseLoc
      - tokens
    - bool
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (122:8)
      false
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - bin:
        - bin:
          - locInside
          - baseLoc
        - loc
      true
    - arm:
      - _
      - ERROR:
        - missing
        - (130:7)
      false
  let:
  - fun:
    - parseErrorCore
    - msg
    - loc
    - tokens
    - errors
  - let:
    - near
    - bin:
      - bin:
        - tokens
        - bin:
          - listMap
          - fst
      - bin:
        - listTruncate
        - 6
    let:
    - msg
    - bin:
      - bin:
        - bin:
          - sprintf
          - \"Parse error %s near %A\"
        - msg
      - near
    bin:
    - tuple:
      - msg
      - loc
    - errors
  let:
  - fun:
    - parseTyError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: ATy
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parsePatError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: APat
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseExprError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: AExpr
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseNewError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    bin:
    - bin:
      - bin:
        - bin:
          - parseErrorCore
          - msg
        - loc
      - tokens
    - errors
  let:
  - fun:
    - parseTyArgs
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Lt: Token
          - ltLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - ltLoc
      let:
      - fun:
        - go
        - acc
        - tuple:
          - tokens
          - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Comma: Token
              - _
            tokens
          - ERROR:
            - missing
            - (171:36)
          let:
          - tuple:
            - argTy
            - tokens
            - errors
          - bin:
            - bin:
              - parseTy
              - baseLoc
            - tuple:
              - tokens
              - errors
          bin:
          - bin:
            - go
            - bin:
              - argTy
              - acc
          - tuple:
            - tokens
            - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (175:11)
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
      let:
      - tuple:
        - argTy
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - tuple:
        - argTys
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list: argTy
        - tuple:
          - tokens
          - errors
      let:
      - tuple:
        - tokens
        - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Gt: Token
              - _
            tokens
          - ERROR:
            - missing
            - (183:33)
          tuple:
          - tokens
          - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (186:11)
          let:
          - errors
          - bin:
            - bin:
              - parseNewError
              - \"Expected \\\'>\\\'\"
            - tuple:
              - tokens
              - errors
          tuple:
          - tokens
          - errors
      tuple:
      - argTys
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (192:7)
      tuple:
      - list
      - tokens
      - errors
  let:
  - fun:
    - parseTyAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - not
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (200:40)
      let:
      - tuple:
        - argTys
        - tokens
        - errors
      - bin:
        - bin:
          - parseTyArgs
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .App: ATy
        - tuple:
          - ident
          - argTys
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (204:33)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .ParenR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (208:35)
        tuple:
        - ty
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (211:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\')\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - ty
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (215:7)
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTySuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - tuple:
        - ty
        - tokens
        - errors
    - let:
      - inside
      - bin:
        - bin:
          - nextInside
          - baseLoc
        - tokens
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - loc
          tokens
        - inside
        bin:
        - go
        - tuple:
          - bin:
            - .Suffix: ATy
            - tuple:
              - ty
              - ident
              - loc
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (226:9)
        tuple:
        - ty
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - parseTyAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    - go
  let:
  - fun:
    - parseTyPrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Colon: Token
          - _
        tokens
      - ERROR:
        - missing
        - (235:54)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (238:7)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTyTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Star: Token
            - _
          tokens
        - ERROR:
          - missing
          - (245:33)
        let:
        - tuple:
          - itemTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyPrefix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - itemTy
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (249:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyPrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Star: Token
          - opLoc
        _
      - ERROR:
        - missing
        - (255:30)
      let:
      - tuple:
        - itemTys
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Tuple: ATy
        - tuple:
          - bin:
            - itemTy
            - itemTys
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (259:7)
      tuple:
      - itemTy
      - tokens
      - errors
  let:
  - fun:
    - parseTyFun
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - sTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Arrow: Token
          - opLoc
        tokens
      - ERROR:
        - missing
        - (268:36)
      let:
      - tuple:
        - tTy
        - tokens
        - errors
      - bin:
        - bin:
          - parseTyFun
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Fun: ATy
        - tuple:
          - sTy
          - tTy
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (272:7)
      tuple:
      - sTy
      - tokens
      - errors
  let:
  - fun:
    - parseTy
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseTyFun
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTyDeclUnion
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          cons:
          - tuple:
            - .Of: Token
            - _
          tokens
        - ERROR:
          - missing
          - (284:34)
        let:
        - tuple:
          - payloadTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - bin:
                  - Some
                  - payloadTy
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          tokens
        - ERROR:
          - missing
          - (289:52)
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - None
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (292:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - variants
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Union: ATyDecl
      - variants
    - tokens
    - errors
  let:
  - fun:
    - parseTyDeclBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - _
        _
      - ERROR:
        - missing
        - (302:26)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Of: Token
          - _
        _
      - ERROR:
        - missing
        - (305:46)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (308:7)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Synonym: ATyDecl
        - ty
      - tokens
      - errors
  let:
  - fun:
    - parsePatParenBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (321:33)
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - tokens
      - ERROR:
        - missing
        - (324:12)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatListBody
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - patAcc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (332:37)
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - _
          tokens
        - ERROR:
          - missing
          - (336:33)
        let:
        - tuple:
          - pat
          - tokens
          - errors
        - bin:
          - bin:
            - parsePat
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - pat
            - patAcc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (340:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\';\\\' or \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - itemPats
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list: itemPat
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: APat
      - tuple:
        - itemPats
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parsePatAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - bin:
              - nextInside
              - baseLoc
            - tokens
          - bin:
            - leadsPat
            - tokens
      bin:
      - bin:
        - parsePatError
        - \"Expected a pattern atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (353:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (356:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (359:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (362:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (365:40)
      tuple:
      - bin:
        - .Ident: APat
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (368:56)
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (371:33)
      bin:
      - bin:
        - parsePatParenBody
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        cons:
        - tuple:
          - .BracketR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (374:60)
      tuple:
      - bin:
        - .ListLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (377:37)
      bin:
      - bin:
        - bin:
          - parsePatListBody
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (380:7)
      bin:
      - bin:
        - parsePatError
        - \"NEVER: The token must be a pat\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePatNav
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (388:58)
      tuple:
      - bin:
        - .Nav: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - _
        tokens
      - ERROR:
        - missing
        - (391:30)
      bin:
      - bin:
        - parsePatError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (394:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatCallArgs
    - baseLoc
    - calleeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - argBaseLoc
    - bin:
      - bin:
        - bin:
          - locMax
          - baseLoc
        - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
      - let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatNav
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - expr
            - acc
        - tuple:
          - tokens
          - errors
      - tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - list
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePatCall
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatNav
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - args
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - calleeLoc
      - tuple:
        - tokens
        - errors
    match:
    - args
    - arm:
      - list
      - ERROR:
        - missing
        - (417:8)
      tuple:
      - callee
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (420:7)
      tuple:
      - bin:
        - .Call: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      - tokens
      - errors
  let:
  - fun:
    - parsePatCons
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - head
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCall
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ColonColon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (428:39)
      let:
      - tuple:
        - tail
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatCons
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Cons: APat
        - tuple:
          - head
          - tail
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (432:7)
      tuple:
      - head
      - tokens
      - errors
  let:
  - fun:
    - parsePatAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCons
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (440:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: APat
        - tuple:
          - pat
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (444:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (451:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatAnno
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (455:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAnno
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (461:29)
      let:
      - tuple:
        - itemPats
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - bin:
            - itemPat
            - itemPats
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (465:7)
      tuple:
      - itemPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatAs
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (474:57)
      tuple:
      - bin:
        - .As: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - _
        tokens
      - ERROR:
        - missing
        - (477:29)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected an identifier\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (481:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatOr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - lPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAs
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (489:33)
      let:
      - tuple:
        - rPat
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatOr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Or: APat
        - tuple:
          - lPat
          - rPat
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (493:7)
      tuple:
      - lPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatLet
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - callee
          - calleeLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - calleeLoc
        - bin:
          - leadsPat
          - tokens
      let:
      - tuple:
        - args
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parsePatCallArgs
            - baseLoc
          - calleeLoc
        - tuple:
          - tokens
          - errors
      let:
      - pat
      - bin:
        - .Fun: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Colon: Token
            - loc
          tokens
        - ERROR:
          - missing
          - (507:36)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .Anno: APat
          - tuple:
            - pat
            - ty
            - loc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (511:9)
        tuple:
        - pat
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (514:7)
      bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePat
    - baseLoc
    - tuple:
      - tokens
      - errors
  - if:
    - bin:
      - not
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
    - bin:
      - bin:
        - parsePatError
        - \"Expected a pattern\"
      - tuple:
        - tokens
        - errors
    - bin:
      - bin:
        - parsePatOr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseRange
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .DotDot: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (533:35)
      let:
      - tuple:
        - r
        - tokens
        - errors
      - bin:
        - bin:
          - parseExpr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Range: AExpr
        - tuple:
          - list:
            - l
            - r
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (537:7)
      tuple:
      - l
      - tokens
      - errors
  let:
  - fun:
    - parseList
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (545:37)
        tuple:
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (548:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: AExpr
      - tuple:
        - items
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parseThenClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - baseLoc
      - bin:
        - locAddX
        - 1
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Then: Token
          - thenLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - thenLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - innerBaseLoc
        - thenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (561:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected \\\'then\\\'\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseElseClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        cons:
        - tuple:
          - .If: Token
          - nextIfLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - elseLoc
        - bin:
          - bin:
            - locIsSameRow
            - elseLoc
          - nextIfLoc
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - bin:
          - tuple:
            - .If: Token
            - elseLoc
          - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - elseLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - elseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (575:7)
      tuple:
      - bin:
        - .Missing: AExpr
        - baseLoc
      - tokens
      - errors
  let:
  - fun:
    - parseIf
    - ifLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - ifLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - cond
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseThenClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - alt
      - tokens
      - errors
    - bin:
      - bin:
        - parseElseClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .If: AExpr
      - tuple:
        - cond
        - body
        - alt
        - ifLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatchArm
    - matchLoc
    - armLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - matchLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - guard
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .When: Token
            - _
          tokens
        - ERROR:
          - missing
          - (594:33)
        bin:
        - bin:
          - parseExpr
          - innerBaseLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (597:9)
        let:
        - guard
        - bin:
          - .Missing: AExpr
          - bin:
            - nextLoc
            - tokens
        tuple:
        - guard
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (603:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - matchLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (606:9)
        bin:
        - bin:
          - parseExprError
          - \"Expected \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - AArm
      - tuple:
        - pat
        - guard
        - body
        - armLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatch
    - matchLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - target
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - matchLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - armLoc
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - _
          cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - ERROR:
          - missing
          - (616:58)
        tuple:
        - pipeLoc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - withLoc
          tokens
        - ERROR:
          - missing
          - (619:39)
        tuple:
        - withLoc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (622:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\'with\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - matchLoc
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - armLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - arm
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseMatchArm
            - matchLoc
          - armLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - bin:
          - bin:
            - locInside
            - matchLoc
          - pipeLoc
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - arm
              - acc
          - pipeLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (633:9)
        tuple:
        - bin:
          - listRev
          - bin:
            - arm
            - acc
        - tokens
        - errors
    let:
    - tuple:
      - arms
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - go
          - list
        - armLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Match: AExpr
      - tuple:
        - target
        - arms
        - matchLoc
    - tokens
    - errors
  let:
  - fun:
    - parseFun
    - baseLoc
    - funLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pats
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - funLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (645:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - baseLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (648:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - .Fun: AExpr
      - tuple:
        - pats
        - body
        - funLoc
    - tokens
    - errors
  let:
  - fun:
    - parseParenBody
    - baseLoc
    - parenLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (657:33)
      tuple:
      - body
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (660:7)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseAccessModifier
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - t
          - _
        tokens
      - bin:
        - t
        - tokenIsAccessModifier
      tokens
    - arm:
      - _
      - ERROR:
        - missing
        - (670:7)
      tokens
  let:
  - fun:
    - parseLet
    - letLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - letLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatLet
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - eqLoc
          tokens
        - ERROR:
          - missing
          - (682:35)
        bin:
        - bin:
          - bin:
            - parseSemi
            - innerBaseLoc
          - eqLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (685:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'=\\\'\"
        - tuple:
          - tokens
          - errors
    let:
    - tuple:
      - next
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .In: Token
            - inLoc
          tokens
        - bin:
          - bin:
            - locInside
            - letLoc
          - inLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - inLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons: _
          _
        - bin:
          - bin:
            - locIsSameColumn
            - bin:
              - nextLoc
              - tokens
          - letLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (697:14)
        tuple:
        - bin:
          - .TupleLit: AExpr
          - tuple:
            - list
            - letLoc
        - tokens
        - errors
    tuple:
    - bin:
      - .Let: AExpr
      - tuple:
        - pat
        - body
        - next
        - letLoc
    - tokens
    - errors
  let:
  - fun:
    - parseTyDecl
    - typeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - baseLoc
    - bin:
      - typeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - tyIdent
          - _
        tokens
      - ERROR:
        - missing
        - (708:40)
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - _
          tokens
        - ERROR:
          - missing
          - (710:31)
        let:
        - tuple:
          - tyDecl
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyDeclBody
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - expr
        - match:
          - tyDecl
          - arm:
            - call:
              - .Synonym: ATyDecl
              - ty
            - ERROR:
              - missing
              - (715:30)
            bin:
            - .TySynonym: AExpr
            - tuple:
              - tyIdent
              - ty
              - typeLoc
          - arm:
            - call:
              - .Union: ATyDecl
              - variants
            - ERROR:
              - missing
              - (718:34)
            bin:
            - .TyUnion: AExpr
            - tuple:
              - tyIdent
              - variants
              - typeLoc
        tuple:
        - expr
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (723:9)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyError
            - \"Expected \\\'=\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .TySynonym: AExpr
          - tuple:
            - tyIdent
            - ty
            - typeLoc
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (727:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOpen
    - openLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - parsePath
      - tuple:
        - tokens
        - errors
    - let:
      - fun:
        - go
        - acc
        - tuple:
          - tokens
          - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            cons:
            - tuple:
              - call:
                - .Ident: Token
                - ident
              - _
            tokens
          - ERROR:
            - missing
            - (735:60)
          bin:
          - bin:
            - go
            - bin:
              - ident
              - acc
          - tuple:
            - tokens
            - errors
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            tokens
          - ERROR:
            - missing
            - (738:34)
          let:
          - errors
          - bin:
            - bin:
              - parseNewError
              - \"Expected identifier\"
            - tuple:
              - tokens
              - errors
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (742:11)
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - _
          tokens
        - ERROR:
          - missing
          - (746:40)
        bin:
        - bin:
          - go
          - list: ident
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (749:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected identifier\"
          - tuple:
            - tokens
            - errors
        tuple:
        - list
        - tokens
        - errors
    let:
    - tuple:
      - path
      - tokens
      - errors
    - bin:
      - parsePath
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Open: AExpr
      - tuple:
        - path
        - openLoc
    - tokens
    - errors
  let:
  - fun:
    - parseAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (761:56)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (764:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (767:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (770:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (773:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (776:40)
      tuple:
      - bin:
        - .Ident: AExpr
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - parenLoc
        tokens
      - ERROR:
        - missing
        - (779:40)
      bin:
      - bin:
        - bin:
          - parseParenBody
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - bracketLoc
        tokens
      - ERROR:
        - missing
        - (782:44)
      bin:
      - bin:
        - bin:
          - parseList
          - baseLoc
        - bracketLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .If: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (785:31)
      bin:
      - bin:
        - parseIf
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Match: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (788:34)
      bin:
      - bin:
        - parseMatch
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Fun: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (791:32)
      bin:
      - bin:
        - bin:
          - parseFun
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (794:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (797:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseSuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - .BracketL: Token
            - _
          tokens
        - ERROR:
          - missing
          - (806:57)
        let:
        - tuple:
          - r
          - tokens
          - errors
        - bin:
          - bin:
            - parseRange
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - tuple:
          - tokens
          - errors
        - match:
          - tokens
          - arm:
            - cons:
              - tuple:
                - .BracketR: Token
                - _
              tokens
            - ERROR:
              - missing
              - (811:41)
            tuple:
            - tokens
            - errors
          - arm:
            - _
            - ERROR:
              - missing
              - (814:13)
            let:
            - errors
            - bin:
              - bin:
                - parseNewError
                - \"Expected closing \\\']\\\'\"
              - tuple:
                - tokens
                - errors
            tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Index: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - r
            - _
          tokens
        - ERROR:
          - missing
          - (820:56)
        bin:
        - bin:
          - go
          - bin:
            - .Nav: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - _
          tokens
        - ERROR:
          - missing
          - (823:32)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected .[] or .field\"
          - tuple:
            - tokens
            - errors
        tuple:
        - acc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (827:9)
        tuple:
        - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - l
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseApp
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - argBaseLoc
    - bin:
      - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parseSuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - callee
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsArg
          - tokens
      - let:
        - tuple:
          - arg
          - tokens
          - errors
        - bin:
          - bin:
            - parseSuffix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Bin: AExpr
            - tuple:
              - .App: Op
              - callee
              - arg
              - calleeLoc
        - tuple:
          - tokens
          - errors
      - tuple:
        - callee
        - tokens
        - errors
    bin:
    - bin:
      - go
      - callee
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Minus: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (851:34)
      let:
      - tuple:
        - arg
        - tokens
        - errors
      - bin:
        - bin:
          - parseApp
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Uni: AExpr
        - tuple:
          - .Neg: UniOp
          - arg
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (855:7)
      bin:
      - bin:
        - parseApp
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseNextLevelOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - bin:
      - opLevelToNext
      - level
    - arm:
      - .Prefix: OpLevel
      - ERROR:
        - missing
        - (860:20)
      bin:
      - bin:
        - parsePrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - nextLevel
      - ERROR:
        - missing
        - (863:15)
      bin:
      - bin:
        - bin:
          - parseOp
          - nextLevel
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOps
    - level
    - baseLoc
    - first
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - nextL
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseNextLevelOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - nextR
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    match:
    - tuple:
      - level
      - tokens
    - arm:
      - tuple:
        - .Or: OpLevel
        - cons:
          - tuple:
            - .PipePipe: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (878:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Or: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .And: OpLevel
        - cons:
          - tuple:
            - .AmpAmp: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (881:50)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .And: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Eq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (884:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Eq: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (887:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ne: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Lt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (890:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Lt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (893:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Le: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Gt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (896:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Gt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .GtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (899:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ge: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Pipe: OpLevel
        - cons:
          - tuple:
            - .PipeGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (902:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Pipe: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cons: OpLevel
        - cons:
          - tuple:
            - .ColonColon: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (905:55)
      bin:
      - bin:
        - bin:
          - bin:
            - nextR
            - first
          - .Cons: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Plus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (908:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Add: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Minus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (911:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Sub: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Star: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (914:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mul: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Slash: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (917:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Div: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Percent: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (920:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mod: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (923:7)
      tuple:
      - first
      - tokens
      - errors
  let:
  - fun:
    - parseOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - first
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseNextLevelOp
          - level
        - baseLoc
      - tuple:
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - bin:
          - parseOps
          - level
        - baseLoc
      - first
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTupleItem
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - bin:
        - parseOp
        - .Or: OpLevel
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (938:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parseTupleItem
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (942:14)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - item
      - tokens
      - errors
    - bin:
      - bin:
        - parseTupleItem
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (948:29)
      let:
      - tuple:
        - items
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - bin:
            - item
            - items
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (952:7)
      tuple:
      - item
      - tokens
      - errors
  let:
  - fun:
    - parseAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (960:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: AExpr
        - tuple:
          - body
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (964:7)
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseExpr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseAnno
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseStmt
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        tokens
      - ERROR:
        - missing
        - (972:53)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (976:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Type: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (979:37)
      bin:
      - bin:
        - parseTyDecl
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Open: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (982:37)
      bin:
      - bin:
        - parseOpen
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (985:7)
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseStmts
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - alignLoc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - semiLoc
          tokens
        - bin:
          - bin:
            - locInside
            - alignLoc
          - semiLoc
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - bin:
          - bin:
            - bin:
              - locIsSameColumn
              - alignLoc
            - bin:
              - nextLoc
              - tokens
          - bin:
            - leadsExpr
            - tokens
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (1003:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - alignLoc
    - bin:
      - nextLoc
      - tokens
    if:
    - bin:
      - bin:
        - locInside
        - baseLoc
      - alignLoc
    - bin:
      - bin:
        - bin:
          - go
          - list
        - alignLoc
      - tuple:
        - tokens
        - errors
    - tuple:
      - list
      - tokens
      - errors
  let:
  - fun:
    - parseSemi
    - baseLoc
    - mainLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - items
    - arm:
      - list
      - ERROR:
        - missing
        - (1022:8)
      bin:
      - bin:
        - parseExprError
        - \"Expected statements\"
      - tuple:
        - tokens
        - errors
    - arm:
      - list: item
      - ERROR:
        - missing
        - (1025:12)
      tuple:
      - item
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (1028:7)
      tuple:
      - bin:
        - .Semi: AExpr
        - tuple:
          - items
          - mainLoc
      - tokens
      - errors
  let:
  - fun:
    - parseTopLevel
    - tuple:
      - tokens
      - errors
  - let:
    - topLoc
    - tuple:
      - 0
      - 0
    match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (1036:8)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - topLoc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Dot: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1043:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1048:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1052:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (1055:7)
      bin:
      - bin:
        - bin:
          - parseSemi
          - topLoc
        - topLoc
      - tuple:
        - tokens
        - errors
  let:
  - anno:
    - fun:
      - parse
      - anno:
        - tokens
        - list:
          - tuple:
            - Token
            - Loc
    - tuple:
      - AExpr
      - list:
        - tuple:
          - string
          - Loc
  - let:
    - tuple:
      - expr
      - tokens
      - errors
    - bin:
      - parseTopLevel
      - tuple:
        - tokens
        - list
    let:
    - errors
    - match:
      - tokens
      - arm:
        - list
        - ERROR:
          - missing
          - (1063:10)
        errors
      - arm:
        - _
        - ERROR:
          - missing
          - (1066:9)
        bin:
        - bin:
          - parseNewError
          - \"Expected eof\"
        - tuple:
          - tokens
          - errors
    tuple:
    - expr
    - errors
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let-fun:
  - 1
  - match: 3
  let-fun:
  - 10
  - match: 12
  let-fun:
  - 19
  - match: 21
  let-fun:
  - 28
  - inf:
    - match: 30
  let-fun:
  - 36
  - inf:
    - match: 39
  let-fun:
  - 48
  - let-val:
    - inf:
      - inf:
        - 54
        - 6
      - inf:
        - inf:
          - 55
          - 56
        - 57
    let-val:
    - inf:
      - inf:
        - inf:
          - 59
          - \"Parse error %s near %A\"
        - 60
      - 61
    inf:
    - inf:
      - prim
      - inf:
        - 62
        - 63
    - 64
  let-fun:
  - 65
  - let-val:
    - inf:
      - 70
      - 71
    let-val:
    - inf:
      - inf:
        - inf:
          - inf:
            - 73
            - 74
          - 75
        - 76
      - 77
    inf:
    - inf:
      - .Missing: 78
      - 79
    - 80
    - 81
  let-fun:
  - 82
  - let-val:
    - inf:
      - 87
      - 88
    let-val:
    - inf:
      - inf:
        - inf:
          - inf:
            - 90
            - 91
          - 92
        - 93
      - 94
    inf:
    - inf:
      - .Missing: 95
      - 96
    - 97
    - 98
  let-fun:
  - 99
  - let-val:
    - inf:
      - 104
      - 105
    let-val:
    - inf:
      - inf:
        - inf:
          - inf:
            - 107
            - 108
          - 109
        - 110
      - 111
    inf:
    - inf:
      - .Missing: 112
      - 113
    - 114
    - 115
  let-fun:
  - 116
  - let-val:
    - inf:
      - 121
      - 122
    inf:
    - inf:
      - inf:
        - inf:
          - 123
          - 124
        - 125
      - 126
    - 127
  let-fun:
  - 128
  - match: 132
  let-fun:
  - 199
  - match: 203
  let-fun:
  - 258
  - let-fun:
    - 262
    - let-val:
      - inf:
        - inf:
          - 267
          - 268
        - 269
      match: 270
    inf:
    - 287
    - inf:
      - inf:
        - 288
        - 289
      - inf:
        - 290
        - 291
  let-fun:
  - 292
  - match: 296
  let-fun:
  - 312
  - let-fun:
    - 316
    - match: 320
    let-val:
    - inf:
      - inf:
        - 344
        - 345
      - inf:
        - 346
        - 347
    match: 348
  let-fun:
  - 368
  - let-val:
    - inf:
      - inf:
        - 375
        - 376
      - inf:
        - 377
        - 378
    match: 379
  let-fun:
  - 400
  - inf:
    - inf:
      - 404
      - 405
    - inf:
      - 406
      - 407
  let-fun:
  - 408
  - let-fun:
    - 412
    - match: 416
    let-val:
    - inf:
      - inf:
        - 463
        - prim
      - inf:
        - 464
        - 465
    inf:
    - inf:
      - .Union: 466
      - 467
    - 468
    - 469
  let-fun:
  - 470
  - match: 474
  let-fun:
  - 504
  - let-val:
    - inf:
      - inf:
        - 511
        - 512
      - inf:
        - 513
        - 514
    match: 515
  let-fun:
  - 530
  - let-fun:
    - 535
    - match: 539
    let-val:
    - inf:
      - inf:
        - 574
        - 575
      - inf:
        - 576
        - 577
    let-val:
    - inf:
      - inf:
        - 581
        - inf:
          - inf:
            - prim
            - 582
          - prim
      - inf:
        - 583
        - 584
    inf:
    - inf:
      - .ListLit: 585
      - inf:
        - 586
        - 587
    - 588
    - 589
  let-fun:
  - 590
  - match: 594
  let-fun:
  - 691
  - let-val:
    - inf:
      - inf:
        - 698
        - 699
      - inf:
        - 700
        - 701
    match: 702
  let-fun:
  - 725
  - let-val:
    - inf:
      - inf:
        - 731
        - 1
      - inf:
        - inf:
          - 732
          - 733
        - 734
    let-fun:
    - 735
    - match:
      - match:
        - inf:
          - inf:
            - 739
            - 740
          - 741
    inf:
    - inf:
      - 760
      - prim
    - inf:
      - 761
      - 762
  let-fun:
  - 763
  - let-val:
    - inf:
      - 768
      - 769
    let-val:
    - inf:
      - inf:
        - 773
        - 774
      - inf:
        - 775
        - 776
    let-val:
    - inf:
      - inf:
        - inf:
          - 780
          - 781
        - 782
      - inf:
        - 783
        - 784
    match: 785
  let-fun:
  - 796
  - let-val:
    - inf:
      - inf:
        - 803
        - 804
      - inf:
        - 805
        - 806
    match: 807
  let-fun:
  - 828
  - let-val:
    - inf:
      - inf:
        - 835
        - 836
      - inf:
        - 837
        - 838
    match: 839
  let-fun:
  - 861
  - let-fun:
    - 865
    - match: 869
    let-val:
    - inf:
      - inf:
        - 893
        - 894
      - inf:
        - 895
        - 896
    match: 897
  let-fun:
  - 917
  - let-val:
    - inf:
      - inf:
        - 924
        - 925
      - inf:
        - 926
        - 927
    match: 928
  let-fun:
  - 955
  - let-val:
    - inf:
      - inf:
        - 962
        - 963
      - inf:
        - 964
        - 965
    match: 966
  let-fun:
  - 987
  - match: 991
  let-fun:
  - 1040
  - match:
    - inf:
      - 1044
      - match:
        - inf:
          - inf:
            - 1045
            - 1046
          - 1047
  let-fun:
  - 1057
  - let-val:
    - inf:
      - inf:
        - 1064
        - 1065
      - inf:
        - 1066
        - 1067
    match: 1068
  let-fun:
  - 1089
  - let-val:
    - inf:
      - inf:
        - 1097
        - 1098
      - inf:
        - 1099
        - 1100
    let-val:
    - match: 1103
    inf:
    - inf:
      - .ListLit: 1116
      - inf:
        - 1117
        - 1118
    - 1119
    - 1120
  let-fun:
  - 1121
  - let-val:
    - inf:
      - inf:
        - 1126
        - 1
      - 1127
    match: 1128
  let-fun:
  - 1144
  - match: 1148
  let-fun:
  - 1182
  - let-val:
    - inf:
      - inf:
        - 1187
        - 1
      - 1188
    let-val:
    - inf:
      - inf:
        - 1192
        - 1193
      - inf:
        - 1194
        - 1195
    let-val:
    - inf:
      - inf:
        - 1199
        - 1200
      - inf:
        - 1201
        - 1202
    let-val:
    - inf:
      - inf:
        - 1206
        - 1207
      - inf:
        - 1208
        - 1209
    inf:
    - inf:
      - .If: 1210
      - inf:
        - 1211
        - 1212
        - 1213
        - 1214
    - 1215
    - 1216
  let-fun:
  - 1217
  - let-val:
    - inf:
      - inf:
        - 1223
        - 1
      - 1224
    let-val:
    - inf:
      - inf:
        - 1228
        - 1229
      - inf:
        - 1230
        - 1231
    let-val:
    - match: 1235
    let-val:
    - match: 1254
    inf:
    - inf:
      - 1267
      - inf:
        - 1268
        - 1269
        - 1270
        - 1271
    - 1272
    - 1273
  let-fun:
  - 1274
  - let-val:
    - inf:
      - inf:
        - 1281
        - 1282
      - inf:
        - 1283
        - 1284
    let-val:
    - match: 1288
    let-fun:
    - 1311
    - let-val:
      - inf:
        - inf:
          - inf:
            - 1319
            - 1320
          - 1321
        - inf:
          - 1322
          - 1323
      match: 1324
    let-val:
    - inf:
      - inf:
        - inf:
          - 1346
          - prim
        - 1347
      - inf:
        - 1348
        - 1349
    inf:
    - inf:
      - .Match: 1350
      - inf:
        - 1351
        - 1352
        - 1353
    - 1354
    - 1355
  let-fun:
  - 1356
  - let-val:
    - inf:
      - inf:
        - inf:
          - 1364
          - 1365
        - 1366
      - inf:
        - 1367
        - 1368
    let-val:
    - match: 1372
    inf:
    - inf:
      - .Fun: 1385
      - inf:
        - 1386
        - 1387
        - 1388
    - 1389
    - 1390
  let-fun:
  - 1391
  - let-val:
    - inf:
      - inf:
        - inf:
          - 1399
          - 1400
        - 1401
      - inf:
        - 1402
        - 1403
    match: 1404
  let-fun:
  - 1419
  - match: 1421
  let-fun:
  - 1430
  - let-val:
    - inf:
      - inf:
        - 1435
        - 1
      - 1436
    let-val:
    - inf:
      - 1438
      - 1439
    let-val:
    - inf:
      - inf:
        - 1443
        - 1444
      - inf:
        - 1445
        - 1446
    let-val:
    - match: 1450
    let-val:
    - match: 1466
    inf:
    - inf:
      - .Let: 1495
      - inf:
        - 1496
        - 1497
        - 1498
        - 1499
    - 1500
    - 1501
  let-fun:
  - 1502
  - let-val:
    - inf:
      - inf:
        - 1507
        - 1
      - 1508
    let-val:
    - inf:
      - 1510
      - 1511
    match: 1512
  let-fun:
  - 1562
  - let-fun:
    - 1566
    - let-fun:
      - 1569
      - match: 1573
      match: 1601
    let-val:
    - inf:
      - 1620
      - inf:
        - 1621
        - 1622
    inf:
    - inf:
      - .Open: 1623
      - inf:
        - 1624
        - 1625
    - 1626
    - 1627
  let-fun:
  - 1628
  - match: 1632
  let-fun:
  - 1748
  - let-val:
    - inf:
      - inf:
        - 1755
        - 1756
      - inf:
        - 1757
        - 1758
    let-fun:
    - 1759
    - match: 1763
    inf:
    - inf:
      - 1825
      - 1826
    - inf:
      - 1827
      - 1828
  let-fun:
  - 1829
  - let-val:
    - inf:
      - 1834
      - 1835
    let-val:
    - inf:
      - inf:
        - 1837
        - 1
      - 1838
    let-val:
    - inf:
      - inf:
        - 1842
        - 1843
      - inf:
        - 1844
        - 1845
    let-fun:
    - 1846
    - match:
      - match:
        - inf:
          - inf:
            - 1850
            - 1851
          - 1852
    inf:
    - inf:
      - 1873
      - 1874
    - inf:
      - 1875
      - 1876
  let-fun:
  - 1877
  - match: 1881
  let-fun:
  - 1903
  - match:
    - inf:
      - 1908
      - 1909
  let-fun:
  - 1921
  - let-fun:
    - 1927
    - let-val:
      - inf:
        - inf:
          - inf:
            - 1936
            - 1937
          - 1938
        - inf:
          - 1939
          - 1940
      let-val:
      - inf:
        - .Bin: 1942
        - inf:
          - 1943
          - 1944
          - 1945
          - 1946
      inf:
      - inf:
        - inf:
          - inf:
            - 1947
            - 1948
          - 1949
        - 1950
      - inf:
        - 1951
        - 1952
    let-fun:
    - 1953
    - let-val:
      - inf:
        - inf:
          - inf:
            - 1962
            - 1963
          - 1964
        - inf:
          - 1965
          - 1966
      let-val:
      - inf:
        - .Bin: 1968
        - inf:
          - 1969
          - 1970
          - 1971
          - 1972
      inf:
      - inf:
        - inf:
          - inf:
            - 1973
            - 1974
          - 1975
        - 1976
      - inf:
        - 1977
        - 1978
    match:
    - inf:
      - 1979
      - 1980
  let-fun:
  - 2135
  - let-val:
    - inf:
      - inf:
        - inf:
          - 2143
          - 2144
        - 2145
      - inf:
        - 2146
        - 2147
    inf:
    - inf:
      - inf:
        - inf:
          - 2148
          - 2149
        - 2150
      - 2151
    - inf:
      - 2152
      - 2153
  let-fun:
  - 2154
  - inf:
    - inf:
      - inf:
        - 2158
        - .Or: 2159
      - 2160
    - inf:
      - 2161
      - 2162
  let-fun:
  - 2163
  - let-fun:
    - 2167
    - match: 2171
    let-val:
    - inf:
      - inf:
        - 2195
        - 2196
      - inf:
        - 2197
        - 2198
    match: 2199
  let-fun:
  - 2219
  - let-val:
    - inf:
      - inf:
        - 2226
        - 2227
      - inf:
        - 2228
        - 2229
    match: 2230
  let-fun:
  - 2251
  - inf:
    - inf:
      - 2255
      - 2256
    - inf:
      - 2257
      - 2258
  let-fun:
  - 2259
  - match: 2263
  let-fun:
  - 2299
  - let-fun:
    - 2303
    - match: 2308
    let-val:
    - inf:
      - 2354
      - 2355
    match:
    - inf:
      - inf:
        - 2356
        - 2357
      - 2358
  let-fun:
  - 2365
  - let-val:
    - inf:
      - inf:
        - 2373
        - 2374
      - inf:
        - 2375
        - 2376
    match: 2377
  let-fun:
  - 2391
  - let-val:
    - inf:
      - 0
      - 0
    match: 2395
  let-fun:
  - 2448
  - inf:
    - let-val:
      - inf:
        - 2456
        - inf:
          - 2457
          - prim
      let-val:
      - match: 2459
      inf:
      - 2465
      - 2466
  inf
FILE MiloneLang/AstToHir.fs
module (21, 0)
rec (21, 7)
MiloneLang (21, 11)
. (21, 21)
AstToHir (21, 22)
open (23, 0)
MiloneLang (23, 5)
. (23, 15)
Types (23, 16)
open (24, 0)
MiloneLang (24, 5)
. (24, 15)
Helpers (24, 16)
let (26, 0)
opToPrim (26, 4)
op (26, 13)
= (26, 16)
match (27, 2)
op (27, 8)
with (27, 11)
| (28, 2)
Op (28, 4)
. (28, 6)
Add (28, 7)
-> (28, 11)
HPrim (29, 4)
. (29, 9)
Add (29, 10)
| (31, 2)
Op (31, 4)
. (31, 6)
Sub (31, 7)
-> (31, 11)
HPrim (32, 4)
. (32, 9)
Sub (32, 10)
| (34, 2)
Op (34, 4)
. (34, 6)
Mul (34, 7)
-> (34, 11)
HPrim (35, 4)
. (35, 9)
Mul (35, 10)
| (37, 2)
Op (37, 4)
. (37, 6)
Div (37, 7)
-> (37, 11)
HPrim (38, 4)
. (38, 9)
Div (38, 10)
| (40, 2)
Op (40, 4)
. (40, 6)
Mod (40, 7)
-> (40, 11)
HPrim (41, 4)
. (41, 9)
Mod (41, 10)
| (43, 2)
Op (43, 4)
. (43, 6)
Eq (43, 7)
-> (43, 10)
HPrim (44, 4)
. (44, 9)
Eq (44, 10)
| (46, 2)
Op (46, 4)
. (46, 6)
Lt (46, 7)
-> (46, 10)
HPrim (47, 4)
. (47, 9)
Lt (47, 10)
| (49, 2)
Op (49, 4)
. (49, 6)
Cons (49, 7)
-> (49, 12)
HPrim (50, 4)
. (50, 9)
Cons (50, 10)
| (52, 2)
Op (52, 4)
. (52, 6)
Ne (52, 7)
| (53, 2)
Op (53, 4)
. (53, 6)
Le (53, 7)
| (54, 2)
Op (54, 4)
. (54, 6)
Gt (54, 7)
| (55, 2)
Op (55, 4)
. (55, 6)
Ge (55, 7)
| (56, 2)
Op (56, 4)
. (56, 6)
And (56, 7)
| (57, 2)
Op (57, 4)
. (57, 6)
Or (57, 7)
| (58, 2)
Op (58, 4)
. (58, 6)
App (58, 7)
| (59, 2)
Op (59, 4)
. (59, 6)
Pipe (59, 7)
-> (59, 12)
failwithf (60, 4)
"NEVER: %A" (60, 14)
op (60, 26)
let (63, 0)
desugarListLitPat (63, 4)
pats (63, 22)
loc (63, 27)
= (63, 31)
assert (64, 2)
( (64, 9)
pats (64, 10)
|> (64, 15)
listIsEmpty (64, 18)
|> (64, 30)
not (64, 33)
) (64, 36)
let (66, 2)
rec (66, 6)
go (66, 10)
pats (66, 13)
= (66, 18)
match (67, 4)
pats (67, 10)
with (67, 15)
| (68, 4)
[ (68, 6)
] (68, 7)
-> (68, 9)
APat (69, 6)
. (69, 10)
ListLit (69, 11)
( (69, 19)
[ (69, 20)
] (69, 21)
, (69, 22)
loc (69, 24)
) (69, 27)
| (71, 4)
head (71, 6)
:: (71, 11)
tail (71, 14)
-> (71, 19)
let (72, 6)
tail (72, 10)
= (72, 15)
go (72, 17)
tail (72, 20)
APat (73, 6)
. (73, 10)
Cons (73, 11)
( (73, 16)
head (73, 17)
, (73, 21)
tail (73, 23)
, (73, 27)
loc (73, 29)
) (73, 32)
go (75, 2)
pats (75, 5)
let (78, 0)
desugarListLitExpr (78, 4)
items (78, 23)
loc (78, 29)
= (78, 33)
assert (79, 2)
( (79, 9)
items (79, 10)
|> (79, 16)
listIsEmpty (79, 19)
|> (79, 31)
not (79, 34)
) (79, 37)
let (81, 2)
rec (81, 6)
go (81, 10)
items (81, 13)
= (81, 19)
match (82, 4)
items (82, 10)
with (82, 16)
| (83, 4)
[ (83, 6)
] (83, 7)
-> (83, 9)
AExpr (84, 6)
. (84, 11)
ListLit (84, 12)
( (84, 20)
[ (84, 21)
] (84, 22)
, (84, 23)
loc (84, 25)
) (84, 28)
| (86, 4)
head (86, 6)
:: (86, 11)
tail (86, 14)
-> (86, 19)
let (87, 6)
tail (87, 10)
= (87, 15)
go (87, 17)
tail (87, 20)
AExpr (88, 6)
. (88, 11)
Bin (88, 12)
( (88, 16)
Op (88, 17)
. (88, 19)
Cons (88, 20)
, (88, 24)
head (88, 26)
, (88, 30)
tail (88, 32)
, (88, 36)
loc (88, 38)
) (88, 41)
go (90, 2)
items (90, 5)
let (95, 0)
desugarIf (95, 4)
cond (95, 14)
body (95, 19)
alt (95, 24)
loc (95, 28)
= (95, 32)
let (96, 2)
alt (96, 6)
= (96, 10)
match (97, 4)
alt (97, 10)
with (97, 14)
| (98, 4)
AExpr (98, 6)
. (98, 11)
Missing (98, 12)
_ (98, 20)
-> (98, 22)
axUnit (99, 6)
loc (99, 13)
| (100, 4)
_ (100, 6)
-> (100, 8)
alt (101, 6)
let (103, 2)
arms (103, 6)
= (103, 11)
[ (104, 4)
AArm (105, 6)
( (105, 11)
apTrue (105, 12)
loc (105, 19)
, (105, 22)
axTrue (105, 24)
loc (105, 31)
, (105, 34)
body (105, 36)
, (105, 40)
loc (105, 42)
) (105, 45)
AArm (106, 6)
( (106, 11)
apFalse (106, 12)
loc (106, 20)
, (106, 23)
axTrue (106, 25)
loc (106, 32)
, (106, 35)
alt (106, 37)
, (106, 40)
loc (106, 42)
) (106, 45)
] (107, 4)
AExpr (109, 2)
. (109, 7)
Match (109, 8)
( (109, 14)
cond (109, 15)
, (109, 19)
arms (109, 21)
, (109, 25)
loc (109, 27)
) (109, 30)
let (113, 0)
desugarFun (113, 4)
pats (113, 15)
body (113, 20)
loc (113, 25)
= (113, 29)
let (114, 2)
ident (114, 6)
= (114, 12)
"fun" (114, 14)
let (115, 2)
pat (115, 6)
= (115, 10)
APat (115, 12)
. (115, 16)
Fun (115, 17)
( (115, 21)
ident (115, 22)
, (115, 27)
pats (115, 29)
, (115, 33)
loc (115, 35)
) (115, 38)
let (116, 2)
next (116, 6)
= (116, 11)
AExpr (116, 13)
. (116, 18)
Ident (116, 19)
( (116, 25)
ident (116, 26)
, (116, 31)
loc (116, 33)
) (116, 36)
AExpr (117, 2)
. (117, 7)
Let (117, 8)
( (117, 12)
pat (117, 13)
, (117, 16)
body (117, 18)
, (117, 22)
next (117, 24)
, (117, 28)
loc (117, 30)
) (117, 33)
let (120, 0)
desugarUniNeg (120, 4)
arg (120, 18)
loc (120, 22)
= (120, 26)
let (121, 2)
zero (121, 6)
= (121, 11)
AExpr (121, 13)
. (121, 18)
Lit (121, 19)
( (121, 23)
Lit (121, 24)
. (121, 27)
Int (121, 28)
0 (121, 32)
, (121, 33)
loc (121, 35)
) (121, 38)
AExpr (122, 2)
. (122, 7)
Bin (122, 8)
( (122, 12)
Op (122, 13)
. (122, 15)
Sub (122, 16)
, (122, 19)
zero (122, 21)
, (122, 25)
arg (122, 27)
, (122, 30)
loc (122, 32)
) (122, 35)
let (125, 0)
desugarBinNe (125, 4)
l (125, 17)
r (125, 19)
loc (125, 21)
= (125, 25)
let (126, 2)
eqExpr (126, 6)
= (126, 13)
AExpr (126, 15)
. (126, 20)
Bin (126, 21)
( (126, 25)
Op (126, 26)
. (126, 28)
Eq (126, 29)
, (126, 31)
l (126, 33)
, (126, 34)
r (126, 36)
, (126, 37)
loc (126, 39)
) (126, 42)
axNot (127, 2)
eqExpr (127, 8)
loc (127, 15)
let (131, 0)
desugarBinLe (131, 4)
l (131, 17)
r (131, 19)
loc (131, 21)
= (131, 25)
let (132, 2)
ltExpr (132, 6)
= (132, 13)
AExpr (132, 15)
. (132, 20)
Bin (132, 21)
( (132, 25)
Op (132, 26)
. (132, 28)
Lt (132, 29)
, (132, 31)
r (132, 33)
, (132, 34)
l (132, 36)
, (132, 37)
loc (132, 39)
) (132, 42)
axNot (133, 2)
ltExpr (133, 8)
loc (133, 15)
let (137, 0)
desugarBinGt (137, 4)
l (137, 17)
r (137, 19)
loc (137, 21)
= (137, 25)
AExpr (138, 2)
. (138, 7)
Bin (138, 8)
( (138, 12)
Op (138, 13)
. (138, 15)
Lt (138, 16)
, (138, 18)
r (138, 20)
, (138, 21)
l (138, 23)
, (138, 24)
loc (138, 26)
) (138, 29)
let (141, 0)
desugarBinGe (141, 4)
l (141, 17)
r (141, 19)
loc (141, 21)
= (141, 25)
let (142, 2)
ltExpr (142, 6)
= (142, 13)
AExpr (142, 15)
. (142, 20)
Bin (142, 21)
( (142, 25)
Op (142, 26)
. (142, 28)
Lt (142, 29)
, (142, 31)
l (142, 33)
, (142, 34)
r (142, 36)
, (142, 37)
loc (142, 39)
) (142, 42)
axNot (143, 2)
ltExpr (143, 8)
loc (143, 15)
let (146, 0)
desugarBinAnd (146, 4)
l (146, 18)
r (146, 20)
loc (146, 22)
= (146, 26)
desugarIf (147, 2)
l (147, 12)
r (147, 14)
( (147, 16)
axFalse (147, 17)
loc (147, 25)
) (147, 28)
loc (147, 30)
let (150, 0)
desugarBinOr (150, 4)
l (150, 17)
r (150, 19)
loc (150, 21)
= (150, 25)
desugarIf (151, 2)
l (151, 12)
( (151, 14)
axTrue (151, 15)
loc (151, 22)
) (151, 25)
r (151, 27)
loc (151, 29)
let (155, 0)
desugarBinPipe (155, 4)
l (155, 19)
r (155, 21)
loc (155, 23)
= (155, 27)
AExpr (156, 2)
. (156, 7)
Bin (156, 8)
( (156, 12)
Op (156, 13)
. (156, 15)
App (156, 16)
, (156, 19)
r (156, 21)
, (156, 22)
l (156, 24)
, (156, 25)
loc (156, 27)
) (156, 30)
let (160, 0)
tryDesugarIndexRange (160, 4)
expr (160, 25)
loc (160, 30)
= (160, 34)
match (161, 2)
expr (161, 8)
with (161, 13)
| (162, 2)
AExpr (162, 4)
. (162, 9)
Index (162, 10)
( (162, 16)
s (162, 17)
, (162, 18)
AExpr (162, 20)
. (162, 25)
Range (162, 26)
( (162, 32)
[ (162, 33)
l (162, 34)
; (162, 35)
r (162, 37)
] (162, 38)
, (162, 39)
_ (162, 41)
) (162, 42)
, (162, 43)
_ (162, 45)
) (162, 46)
-> (162, 48)
let (163, 4)
getSlice (163, 8)
= (163, 17)
AExpr (163, 19)
. (163, 24)
Nav (163, 25)
( (163, 29)
AExpr (163, 30)
. (163, 35)
Ident (163, 36)
( (163, 42)
"String" (163, 43)
, (163, 51)
loc (163, 53)
) (163, 56)
, (163, 57)
"getSlice" (163, 59)
, (163, 69)
loc (163, 71)
) (163, 74)
true (164, 4)
, (164, 8)
axApp3 (164, 10)
getSlice (164, 17)
l (164, 26)
r (164, 28)
s (164, 30)
loc (164, 32)
| (166, 2)
_ (166, 4)
-> (166, 6)
false (167, 4)
, (167, 9)
expr (167, 11)
let (182, 0)
desugarLet (182, 4)
pat (182, 15)
body (182, 19)
next (182, 24)
loc (182, 29)
= (182, 33)
match (183, 2)
pat (183, 8)
with (183, 12)
| (184, 2)
APat (184, 4)
. (184, 8)
Anno (184, 9)
( (184, 14)
pat (184, 15)
, (184, 18)
annoTy (184, 20)
, (184, 26)
annoLoc (184, 28)
) (184, 35)
-> (184, 37)
let (185, 4)
body (185, 8)
= (185, 13)
AExpr (185, 15)
. (185, 20)
Anno (185, 21)
( (185, 26)
body (185, 27)
, (185, 31)
annoTy (185, 33)
, (185, 39)
annoLoc (185, 41)
) (185, 48)
desugarLet (186, 4)
pat (186, 15)
body (186, 19)
next (186, 24)
loc (186, 29)
| (188, 2)
APat (188, 4)
. (188, 8)
Fun (188, 9)
( (188, 13)
ident (188, 14)
, (188, 19)
args (188, 21)
, (188, 25)
_ (188, 27)
) (188, 28)
-> (188, 30)
ALet (189, 4)
. (189, 8)
LetFun (189, 9)
( (189, 16)
ident (189, 17)
, (189, 22)
args (189, 24)
, (189, 28)
body (189, 30)
, (189, 34)
next (189, 36)
, (189, 40)
loc (189, 42)
) (189, 45)
| (191, 2)
_ (191, 4)
-> (191, 6)
ALet (192, 4)
. (192, 8)
LetVal (192, 9)
( (192, 16)
pat (192, 17)
, (192, 20)
body (192, 22)
, (192, 26)
next (192, 28)
, (192, 32)
loc (192, 34)
) (192, 37)
let (194, 0)
onTy (194, 4)
( (194, 9)
ty (194, 10)
: (194, 12)
ATy (194, 14)
, (194, 17)
nameCtx (194, 19)
: (194, 26)
NameCtx (194, 28)
) (194, 35)
: (194, 36)
Ty (194, 38)
* (194, 41)
NameCtx (194, 43)
= (194, 51)
match (195, 2)
ty (195, 8)
with (195, 11)
| (196, 2)
ATy (196, 4)
. (196, 7)
Missing (196, 8)
loc (196, 16)
-> (196, 20)
Ty (197, 4)
. (197, 6)
Error (197, 7)
loc (197, 13)
, (197, 16)
nameCtx (197, 18)
| (199, 2)
ATy (199, 4)
. (199, 7)
App (199, 8)
( (199, 12)
ident (199, 13)
, (199, 18)
argTys (199, 20)
, (199, 26)
_ (199, 28)
) (199, 29)
-> (199, 31)
let (200, 4)
tySerial (200, 8)
, (200, 16)
nameCtx (200, 18)
= (200, 26)
nameCtx (200, 28)
|> (200, 36)
nameCtxAdd (200, 39)
ident (200, 50)
let (201, 4)
argTys (201, 8)
, (201, 14)
nameCtx (201, 16)
= (201, 24)
( (201, 26)
argTys (201, 27)
, (201, 33)
nameCtx (201, 35)
) (201, 42)
|> (201, 44)
stMap (201, 47)
onTy (201, 53)
tyRef (202, 4)
tySerial (202, 10)
argTys (202, 19)
, (202, 25)
nameCtx (202, 27)
| (204, 2)
ATy (204, 4)
. (204, 7)
Suffix (204, 8)
( (204, 15)
lTy (204, 16)
, (204, 19)
ident (204, 21)
, (204, 26)
_ (204, 28)
) (204, 29)
-> (204, 31)
let (205, 4)
lTy (205, 8)
, (205, 11)
nameCtx (205, 13)
= (205, 21)
( (205, 23)
lTy (205, 24)
, (205, 27)
nameCtx (205, 29)
) (205, 36)
|> (205, 38)
onTy (205, 41)
let (206, 4)
tySerial (206, 8)
, (206, 16)
nameCtx (206, 18)
= (206, 26)
nameCtx (206, 28)
|> (206, 36)
nameCtxAdd (206, 39)
ident (206, 50)
tyRef (207, 4)
tySerial (207, 10)
[ (207, 19)
lTy (207, 20)
] (207, 23)
, (207, 24)
nameCtx (207, 26)
| (209, 2)
ATy (209, 4)
. (209, 7)
Tuple (209, 8)
( (209, 14)
itemTys (209, 15)
, (209, 22)
_ (209, 24)
) (209, 25)
-> (209, 27)
let (210, 4)
itemTys (210, 8)
, (210, 15)
nameCtx (210, 17)
= (210, 25)
( (210, 27)
itemTys (210, 28)
, (210, 35)
nameCtx (210, 37)
) (210, 44)
|> (210, 46)
stMap (210, 49)
onTy (210, 55)
tyTuple (211, 4)
itemTys (211, 12)
, (211, 19)
nameCtx (211, 21)
| (213, 2)
ATy (213, 4)
. (213, 7)
Fun (213, 8)
( (213, 12)
sTy (213, 13)
, (213, 16)
tTy (213, 18)
, (213, 21)
_ (213, 23)
) (213, 24)
-> (213, 26)
let (214, 4)
sTy (214, 8)
, (214, 11)
nameCtx (214, 13)
= (214, 21)
( (214, 23)
sTy (214, 24)
, (214, 27)
nameCtx (214, 29)
) (214, 36)
|> (214, 38)
onTy (214, 41)
let (215, 4)
tTy (215, 8)
, (215, 11)
nameCtx (215, 13)
= (215, 21)
( (215, 23)
tTy (215, 24)
, (215, 27)
nameCtx (215, 29)
) (215, 36)
|> (215, 38)
onTy (215, 41)
tyFun (216, 4)
sTy (216, 10)
tTy (216, 14)
, (216, 17)
nameCtx (216, 19)
let (218, 0)
onPat (218, 4)
( (218, 10)
pat (218, 11)
: (218, 14)
APat (218, 16)
, (218, 20)
nameCtx (218, 22)
: (218, 29)
NameCtx (218, 31)
) (218, 38)
: (218, 39)
HPat (218, 41)
* (218, 46)
NameCtx (218, 48)
= (218, 56)
match (219, 2)
pat (219, 8)
with (219, 12)
| (220, 2)
APat (220, 4)
. (220, 8)
Missing (220, 9)
( (220, 17)
_ (220, 18)
, (220, 19)
loc (220, 21)
) (220, 24)
-> (220, 26)
failwithf (221, 4)
"Missing pattern %A" (221, 14)
loc (221, 35)
| (223, 2)
APat (223, 4)
. (223, 8)
Lit (223, 9)
( (223, 13)
lit (223, 14)
, (223, 17)
loc (223, 19)
) (223, 22)
-> (223, 24)
HPat (224, 4)
. (224, 8)
Lit (224, 9)
( (224, 13)
lit (224, 14)
, (224, 17)
loc (224, 19)
) (224, 22)
, (224, 23)
nameCtx (224, 25)
| (226, 2)
APat (226, 4)
. (226, 8)
Ident (226, 9)
( (226, 15)
ident (226, 16)
, (226, 21)
loc (226, 23)
) (226, 26)
-> (226, 28)
let (227, 4)
serial (227, 8)
, (227, 14)
nameCtx (227, 16)
= (227, 24)
nameCtx (227, 26)
|> (227, 34)
nameCtxAdd (227, 37)
ident (227, 48)
HPat (228, 4)
. (228, 8)
Ref (228, 9)
( (228, 13)
serial (228, 14)
, (228, 20)
noTy (228, 22)
, (228, 26)
loc (228, 28)
) (228, 31)
, (228, 32)
nameCtx (228, 34)
| (230, 2)
APat (230, 4)
. (230, 8)
ListLit (230, 9)
( (230, 17)
[ (230, 18)
] (230, 19)
, (230, 20)
loc (230, 22)
) (230, 25)
-> (230, 27)
patNil (231, 4)
noTy (231, 11)
loc (231, 16)
, (231, 19)
nameCtx (231, 21)
| (233, 2)
APat (233, 4)
. (233, 8)
ListLit (233, 9)
( (233, 17)
pats (233, 18)
, (233, 22)
loc (233, 24)
) (233, 27)
-> (233, 29)
let (234, 4)
pat (234, 8)
= (234, 12)
desugarListLitPat (234, 14)
pats (234, 32)
loc (234, 37)
( (235, 4)
pat (235, 5)
, (235, 8)
nameCtx (235, 10)
) (235, 17)
|> (235, 19)
onPat (235, 22)
| (237, 2)
APat (237, 4)
. (237, 8)
Nav (237, 9)
( (237, 13)
l (237, 14)
, (237, 15)
r (237, 17)
, (237, 18)
loc (237, 20)
) (237, 23)
-> (237, 25)
let (238, 4)
l (238, 8)
, (238, 9)
nameCtx (238, 11)
= (238, 19)
( (238, 21)
l (238, 22)
, (238, 23)
nameCtx (238, 25)
) (238, 32)
|> (238, 34)
onPat (238, 37)
HPat (239, 4)
. (239, 8)
Nav (239, 9)
( (239, 13)
l (239, 14)
, (239, 15)
r (239, 17)
, (239, 18)
noTy (239, 20)
, (239, 24)
loc (239, 26)
) (239, 29)
, (239, 30)
nameCtx (239, 32)
| (241, 2)
APat (241, 4)
. (241, 8)
Call (241, 9)
( (241, 14)
calleePat (241, 15)
, (241, 24)
argPats (241, 26)
, (241, 33)
loc (241, 35)
) (241, 38)
-> (241, 40)
let (242, 4)
calleePat (242, 8)
, (242, 17)
nameCtx (242, 19)
= (242, 27)
( (242, 29)
calleePat (242, 30)
, (242, 39)
nameCtx (242, 41)
) (242, 48)
|> (242, 50)
onPat (242, 53)
let (243, 4)
argPats (243, 8)
, (243, 15)
nameCtx (243, 17)
= (243, 25)
( (243, 27)
argPats (243, 28)
, (243, 35)
nameCtx (243, 37)
) (243, 44)
|> (243, 46)
stMap (243, 49)
onPat (243, 55)
HPat (244, 4)
. (244, 8)
Call (244, 9)
( (244, 14)
calleePat (244, 15)
, (244, 24)
argPats (244, 26)
, (244, 33)
noTy (244, 35)
, (244, 39)
loc (244, 41)
) (244, 44)
, (244, 45)
nameCtx (244, 47)
| (246, 2)
APat (246, 4)
. (246, 8)
Cons (246, 9)
( (246, 14)
head (246, 15)
, (246, 19)
tail (246, 21)
, (246, 25)
loc (246, 27)
) (246, 30)
-> (246, 32)
let (247, 4)
head (247, 8)
, (247, 12)
nameCtx (247, 14)
= (247, 22)
( (247, 24)
head (247, 25)
, (247, 29)
nameCtx (247, 31)
) (247, 38)
|> (247, 40)
onPat (247, 43)
let (248, 4)
tail (248, 8)
, (248, 12)
nameCtx (248, 14)
= (248, 22)
( (248, 24)
tail (248, 25)
, (248, 29)
nameCtx (248, 31)
) (248, 38)
|> (248, 40)
onPat (248, 43)
HPat (249, 4)
. (249, 8)
Cons (249, 9)
( (249, 14)
head (249, 15)
, (249, 19)
tail (249, 21)
, (249, 25)
noTy (249, 27)
, (249, 31)
loc (249, 33)
) (249, 36)
, (249, 37)
nameCtx (249, 39)
| (251, 2)
APat (251, 4)
. (251, 8)
TupleLit (251, 9)
( (251, 18)
pats (251, 19)
, (251, 23)
loc (251, 25)
) (251, 28)
-> (251, 30)
let (252, 4)
pats (252, 8)
, (252, 12)
nameCtx (252, 14)
= (252, 22)
( (252, 24)
pats (252, 25)
, (252, 29)
nameCtx (252, 31)
) (252, 38)
|> (252, 40)
stMap (252, 43)
onPat (252, 49)
HPat (253, 4)
. (253, 8)
Tuple (253, 9)
( (253, 15)
pats (253, 16)
, (253, 20)
noTy (253, 22)
, (253, 26)
loc (253, 28)
) (253, 31)
, (253, 32)
nameCtx (253, 34)
| (255, 2)
APat (255, 4)
. (255, 8)
As (255, 9)
( (255, 12)
pat (255, 13)
, (255, 16)
ident (255, 18)
, (255, 23)
loc (255, 25)
) (255, 28)
-> (255, 30)
let (256, 4)
serial (256, 8)
, (256, 14)
nameCtx (256, 16)
= (256, 24)
nameCtx (256, 26)
|> (256, 34)
nameCtxAdd (256, 37)
ident (256, 48)
let (257, 4)
pat (257, 8)
, (257, 11)
nameCtx (257, 13)
= (257, 21)
( (257, 23)
pat (257, 24)
, (257, 27)
nameCtx (257, 29)
) (257, 36)
|> (257, 38)
onPat (257, 41)
HPat (258, 4)
. (258, 8)
As (258, 9)
( (258, 12)
pat (258, 13)
, (258, 16)
serial (258, 18)
, (258, 24)
loc (258, 26)
) (258, 29)
, (258, 30)
nameCtx (258, 32)
| (260, 2)
APat (260, 4)
. (260, 8)
Anno (260, 9)
( (260, 14)
pat (260, 15)
, (260, 18)
ty (260, 20)
, (260, 22)
loc (260, 24)
) (260, 27)
-> (260, 29)
let (261, 4)
pat (261, 8)
, (261, 11)
nameCtx (261, 13)
= (261, 21)
( (261, 23)
pat (261, 24)
, (261, 27)
nameCtx (261, 29)
) (261, 36)
|> (261, 38)
onPat (261, 41)
let (262, 4)
ty (262, 8)
, (262, 10)
nameCtx (262, 12)
= (262, 20)
( (262, 22)
ty (262, 23)
, (262, 25)
nameCtx (262, 27)
) (262, 34)
|> (262, 36)
onTy (262, 39)
HPat (263, 4)
. (263, 8)
Anno (263, 9)
( (263, 14)
pat (263, 15)
, (263, 18)
ty (263, 20)
, (263, 22)
loc (263, 24)
) (263, 27)
, (263, 28)
nameCtx (263, 30)
| (265, 2)
APat (265, 4)
. (265, 8)
Or (265, 9)
( (265, 12)
l (265, 13)
, (265, 14)
r (265, 16)
, (265, 17)
loc (265, 19)
) (265, 22)
-> (265, 24)
let (266, 4)
l (266, 8)
, (266, 9)
nameCtx (266, 11)
= (266, 19)
( (266, 21)
l (266, 22)
, (266, 23)
nameCtx (266, 25)
) (266, 32)
|> (266, 34)
onPat (266, 37)
let (267, 4)
r (267, 8)
, (267, 9)
nameCtx (267, 11)
= (267, 19)
( (267, 21)
r (267, 22)
, (267, 23)
nameCtx (267, 25)
) (267, 32)
|> (267, 34)
onPat (267, 37)
HPat (268, 4)
. (268, 8)
Or (268, 9)
( (268, 12)
l (268, 13)
, (268, 14)
r (268, 16)
, (268, 17)
noTy (268, 19)
, (268, 23)
loc (268, 25)
) (268, 28)
, (268, 29)
nameCtx (268, 31)
| (270, 2)
APat (270, 4)
. (270, 8)
Fun (270, 9)
( (270, 13)
_ (270, 14)
, (270, 15)
_ (270, 17)
, (270, 18)
loc (270, 20)
) (270, 23)
-> (270, 25)
failwithf (271, 4)
"Invalid occurrence of fun pattern: %A" (271, 14)
loc (271, 54)
let (273, 0)
onExpr (273, 4)
( (273, 11)
expr (273, 12)
: (273, 16)
AExpr (273, 18)
, (273, 23)
nameCtx (273, 25)
: (273, 32)
NameCtx (273, 34)
) (273, 41)
: (273, 42)
HExpr (273, 44)
* (273, 50)
NameCtx (273, 52)
= (273, 60)
match (274, 2)
expr (274, 8)
with (274, 13)
| (275, 2)
AExpr (275, 4)
. (275, 9)
Missing (275, 10)
loc (275, 18)
-> (275, 22)
HExpr (276, 4)
. (276, 9)
Error (276, 10)
( (276, 16)
"Missing expression" (276, 17)
, (276, 37)
loc (276, 39)
) (276, 42)
, (276, 43)
nameCtx (276, 45)
| (278, 2)
AExpr (278, 4)
. (278, 9)
Lit (278, 10)
( (278, 14)
lit (278, 15)
, (278, 18)
loc (278, 20)
) (278, 23)
-> (278, 25)
HExpr (279, 4)
. (279, 9)
Lit (279, 10)
( (279, 14)
lit (279, 15)
, (279, 18)
loc (279, 20)
) (279, 23)
, (279, 24)
nameCtx (279, 26)
| (281, 2)
AExpr (281, 4)
. (281, 9)
Ident (281, 10)
( (281, 16)
ident (281, 17)
, (281, 22)
loc (281, 24)
) (281, 27)
-> (281, 29)
let (282, 4)
serial (282, 8)
, (282, 14)
nameCtx (282, 16)
= (282, 24)
nameCtx (282, 26)
|> (282, 34)
nameCtxAdd (282, 37)
ident (282, 48)
HExpr (283, 4)
. (283, 9)
Ref (283, 10)
( (283, 14)
serial (283, 15)
, (283, 21)
noTy (283, 23)
, (283, 27)
loc (283, 29)
) (283, 32)
, (283, 33)
nameCtx (283, 35)
| (285, 2)
AExpr (285, 4)
. (285, 9)
ListLit (285, 10)
( (285, 18)
[ (285, 19)
] (285, 20)
, (285, 21)
loc (285, 23)
) (285, 26)
-> (285, 28)
hxNil (286, 4)
noTy (286, 10)
loc (286, 15)
, (286, 18)
nameCtx (286, 20)
| (288, 2)
AExpr (288, 4)
. (288, 9)
ListLit (288, 10)
( (288, 18)
items (288, 19)
, (288, 24)
loc (288, 26)
) (288, 29)
-> (288, 31)
let (289, 4)
expr (289, 8)
= (289, 13)
desugarListLitExpr (289, 15)
items (289, 34)
loc (289, 40)
( (290, 4)
expr (290, 5)
, (290, 9)
nameCtx (290, 11)
) (290, 18)
|> (290, 20)
onExpr (290, 23)
| (292, 2)
AExpr (292, 4)
. (292, 9)
If (292, 10)
( (292, 13)
cond (292, 14)
, (292, 18)
body (292, 20)
, (292, 24)
alt (292, 26)
, (292, 29)
loc (292, 31)
) (292, 34)
-> (292, 36)
let (293, 4)
expr (293, 8)
= (293, 13)
desugarIf (293, 15)
cond (293, 25)
body (293, 30)
alt (293, 35)
loc (293, 39)
( (294, 4)
expr (294, 5)
, (294, 9)
nameCtx (294, 11)
) (294, 18)
|> (294, 20)
onExpr (294, 23)
| (296, 2)
AExpr (296, 4)
. (296, 9)
Match (296, 10)
( (296, 16)
target (296, 17)
, (296, 23)
arms (296, 25)
, (296, 29)
loc (296, 31)
) (296, 34)
-> (296, 36)
let (298, 4)
onArm (298, 8)
( (298, 14)
AArm (298, 15)
( (298, 20)
pat (298, 21)
, (298, 24)
guard (298, 26)
, (298, 31)
body (298, 33)
, (298, 37)
loc (298, 39)
) (298, 42)
, (298, 43)
nameCtx (298, 45)
) (298, 52)
= (298, 54)
let (299, 6)
pat (299, 10)
, (299, 13)
nameCtx (299, 15)
= (299, 23)
( (300, 8)
pat (300, 9)
, (300, 12)
nameCtx (300, 14)
) (300, 21)
|> (300, 23)
onPat (300, 26)
let (301, 6)
guard (301, 10)
, (301, 15)
nameCtx (301, 17)
= (301, 25)
match (302, 8)
guard (302, 14)
with (302, 20)
| (303, 8)
AExpr (303, 10)
. (303, 15)
Missing (303, 16)
_ (303, 24)
-> (303, 26)
hxTrue (304, 10)
loc (304, 17)
, (304, 20)
nameCtx (304, 22)
| (305, 8)
_ (305, 10)
-> (305, 12)
( (306, 10)
guard (306, 11)
, (306, 16)
nameCtx (306, 18)
) (306, 25)
|> (306, 27)
onExpr (306, 30)
let (307, 6)
body (307, 10)
, (307, 14)
nameCtx (307, 16)
= (307, 24)
( (308, 8)
body (308, 9)
, (308, 13)
nameCtx (308, 15)
) (308, 22)
|> (308, 24)
onExpr (308, 27)
( (309, 6)
pat (309, 7)
, (309, 10)
guard (309, 12)
, (309, 17)
body (309, 19)
) (309, 23)
, (309, 24)
nameCtx (309, 26)
let (310, 4)
target (310, 8)
, (310, 14)
nameCtx (310, 16)
= (310, 24)
( (310, 26)
target (310, 27)
, (310, 33)
nameCtx (310, 35)
) (310, 42)
|> (310, 44)
onExpr (310, 47)
let (311, 4)
arms (311, 8)
, (311, 12)
nameCtx (311, 14)
= (311, 22)
( (311, 24)
arms (311, 25)
, (311, 29)
nameCtx (311, 31)
) (311, 38)
|> (311, 40)
stMap (311, 43)
onArm (311, 49)
HExpr (312, 4)
. (312, 9)
Match (312, 10)
( (312, 16)
target (312, 17)
, (312, 23)
arms (312, 25)
, (312, 29)
noTy (312, 31)
, (312, 35)
loc (312, 37)
) (312, 40)
, (312, 41)
nameCtx (312, 43)
| (314, 2)
AExpr (314, 4)
. (314, 9)
Fun (314, 10)
( (314, 14)
pats (314, 15)
, (314, 19)
body (314, 21)
, (314, 25)
loc (314, 27)
) (314, 30)
-> (314, 32)
let (315, 4)
expr (315, 8)
= (315, 13)
desugarFun (315, 15)
pats (315, 26)
body (315, 31)
loc (315, 36)
( (316, 4)
expr (316, 5)
, (316, 9)
nameCtx (316, 11)
) (316, 18)
|> (316, 20)
onExpr (316, 23)
| (318, 2)
AExpr (318, 4)
. (318, 9)
Nav (318, 10)
( (318, 14)
l (318, 15)
, (318, 16)
r (318, 18)
, (318, 19)
loc (318, 21)
) (318, 24)
-> (318, 26)
let (319, 4)
l (319, 8)
, (319, 9)
nameCtx (319, 11)
= (319, 19)
( (319, 21)
l (319, 22)
, (319, 23)
nameCtx (319, 25)
) (319, 32)
|> (319, 34)
onExpr (319, 37)
HExpr (320, 4)
. (320, 9)
Nav (320, 10)
( (320, 14)
l (320, 15)
, (320, 16)
r (320, 18)
, (320, 19)
noTy (320, 21)
, (320, 25)
loc (320, 27)
) (320, 30)
, (320, 31)
nameCtx (320, 33)
| (322, 2)
AExpr (322, 4)
. (322, 9)
Index (322, 10)
( (322, 16)
l (322, 17)
, (322, 18)
r (322, 20)
, (322, 21)
loc (322, 23)
) (322, 26)
-> (322, 28)
match (323, 4)
tryDesugarIndexRange (323, 10)
expr (323, 31)
loc (323, 36)
with (323, 40)
| (324, 4)
true (324, 6)
, (324, 10)
expr (324, 12)
-> (324, 17)
( (325, 6)
expr (325, 7)
, (325, 11)
nameCtx (325, 13)
) (325, 20)
|> (325, 22)
onExpr (325, 25)
| (327, 4)
false (327, 6)
, (327, 11)
_ (327, 13)
-> (327, 15)
let (328, 6)
l (328, 10)
, (328, 11)
nameCtx (328, 13)
= (328, 21)
( (328, 23)
l (328, 24)
, (328, 25)
nameCtx (328, 27)
) (328, 34)
|> (328, 36)
onExpr (328, 39)
let (329, 6)
r (329, 10)
, (329, 11)
nameCtx (329, 13)
= (329, 21)
( (329, 23)
r (329, 24)
, (329, 25)
nameCtx (329, 27)
) (329, 34)
|> (329, 36)
onExpr (329, 39)
let (330, 6)
hxIndex (330, 10)
= (330, 18)
hxApp (330, 20)
( (330, 26)
hxApp (330, 27)
( (330, 33)
HExpr (330, 34)
. (330, 39)
Prim (330, 40)
( (330, 45)
HPrim (330, 46)
. (330, 51)
Index (330, 52)
, (330, 57)
noTy (330, 59)
, (330, 63)
loc (330, 65)
) (330, 68)
) (330, 69)
l (330, 71)
noTy (330, 73)
loc (330, 78)
) (330, 81)
r (330, 83)
noTy (330, 85)
loc (330, 90)
hxIndex (331, 6)
, (331, 13)
nameCtx (331, 15)
| (333, 2)
AExpr (333, 4)
. (333, 9)
Uni (333, 10)
( (333, 14)
UniOp (333, 15)
. (333, 20)
Neg (333, 21)
, (333, 24)
arg (333, 26)
, (333, 29)
loc (333, 31)
) (333, 34)
-> (333, 36)
let (334, 4)
expr (334, 8)
= (334, 13)
desugarUniNeg (334, 15)
arg (334, 29)
loc (334, 33)
( (335, 4)
expr (335, 5)
, (335, 9)
nameCtx (335, 11)
) (335, 18)
|> (335, 20)
onExpr (335, 23)
| (337, 2)
AExpr (337, 4)
. (337, 9)
Bin (337, 10)
( (337, 14)
Op (337, 15)
. (337, 17)
Ne (337, 18)
, (337, 20)
l (337, 22)
, (337, 23)
r (337, 25)
, (337, 26)
loc (337, 28)
) (337, 31)
-> (337, 33)
let (338, 4)
expr (338, 8)
= (338, 13)
desugarBinNe (338, 15)
l (338, 28)
r (338, 30)
loc (338, 32)
( (339, 4)
expr (339, 5)
, (339, 9)
nameCtx (339, 11)
) (339, 18)
|> (339, 20)
onExpr (339, 23)
| (341, 2)
AExpr (341, 4)
. (341, 9)
Bin (341, 10)
( (341, 14)
Op (341, 15)
. (341, 17)
Le (341, 18)
, (341, 20)
l (341, 22)
, (341, 23)
r (341, 25)
, (341, 26)
loc (341, 28)
) (341, 31)
-> (341, 33)
let (342, 4)
expr (342, 8)
= (342, 13)
desugarBinLe (342, 15)
l (342, 28)
r (342, 30)
loc (342, 32)
( (343, 4)
expr (343, 5)
, (343, 9)
nameCtx (343, 11)
) (343, 18)
|> (343, 20)
onExpr (343, 23)
| (345, 2)
AExpr (345, 4)
. (345, 9)
Bin (345, 10)
( (345, 14)
Op (345, 15)
. (345, 17)
Gt (345, 18)
, (345, 20)
l (345, 22)
, (345, 23)
r (345, 25)
, (345, 26)
loc (345, 28)
) (345, 31)
-> (345, 33)
let (346, 4)
expr (346, 8)
= (346, 13)
desugarBinGt (346, 15)
l (346, 28)
r (346, 30)
loc (346, 32)
( (347, 4)
expr (347, 5)
, (347, 9)
nameCtx (347, 11)
) (347, 18)
|> (347, 20)
onExpr (347, 23)
| (349, 2)
AExpr (349, 4)
. (349, 9)
Bin (349, 10)
( (349, 14)
Op (349, 15)
. (349, 17)
Ge (349, 18)
, (349, 20)
l (349, 22)
, (349, 23)
r (349, 25)
, (349, 26)
loc (349, 28)
) (349, 31)
-> (349, 33)
let (350, 4)
expr (350, 8)
= (350, 13)
desugarBinGe (350, 15)
l (350, 28)
r (350, 30)
loc (350, 32)
( (351, 4)
expr (351, 5)
, (351, 9)
nameCtx (351, 11)
) (351, 18)
|> (351, 20)
onExpr (351, 23)
| (353, 2)
AExpr (353, 4)
. (353, 9)
Bin (353, 10)
( (353, 14)
Op (353, 15)
. (353, 17)
And (353, 18)
, (353, 21)
l (353, 23)
, (353, 24)
r (353, 26)
, (353, 27)
loc (353, 29)
) (353, 32)
-> (353, 34)
let (354, 4)
expr (354, 8)
= (354, 13)
desugarBinAnd (354, 15)
l (354, 29)
r (354, 31)
loc (354, 33)
( (355, 4)
expr (355, 5)
, (355, 9)
nameCtx (355, 11)
) (355, 18)
|> (355, 20)
onExpr (355, 23)
| (357, 2)
AExpr (357, 4)
. (357, 9)
Bin (357, 10)
( (357, 14)
Op (357, 15)
. (357, 17)
Or (357, 18)
, (357, 20)
l (357, 22)
, (357, 23)
r (357, 25)
, (357, 26)
loc (357, 28)
) (357, 31)
-> (357, 33)
let (358, 4)
expr (358, 8)
= (358, 13)
desugarBinOr (358, 15)
l (358, 28)
r (358, 30)
loc (358, 32)
( (359, 4)
expr (359, 5)
, (359, 9)
nameCtx (359, 11)
) (359, 18)
|> (359, 20)
onExpr (359, 23)
| (361, 2)
AExpr (361, 4)
. (361, 9)
Bin (361, 10)
( (361, 14)
Op (361, 15)
. (361, 17)
Pipe (361, 18)
, (361, 22)
l (361, 24)
, (361, 25)
r (361, 27)
, (361, 28)
loc (361, 30)
) (361, 33)
-> (361, 35)
let (362, 4)
expr (362, 8)
= (362, 13)
desugarBinPipe (362, 15)
l (362, 30)
r (362, 32)
loc (362, 34)
( (363, 4)
expr (363, 5)
, (363, 9)
nameCtx (363, 11)
) (363, 18)
|> (363, 20)
onExpr (363, 23)
| (365, 2)
AExpr (365, 4)
. (365, 9)
Bin (365, 10)
( (365, 14)
Op (365, 15)
. (365, 17)
App (365, 18)
, (365, 21)
l (365, 23)
, (365, 24)
r (365, 26)
, (365, 27)
loc (365, 29)
) (365, 32)
-> (365, 34)
let (366, 4)
l (366, 8)
, (366, 9)
nameCtx (366, 11)
= (366, 19)
( (366, 21)
l (366, 22)
, (366, 23)
nameCtx (366, 25)
) (366, 32)
|> (366, 34)
onExpr (366, 37)
let (367, 4)
r (367, 8)
, (367, 9)
nameCtx (367, 11)
= (367, 19)
( (367, 21)
r (367, 22)
, (367, 23)
nameCtx (367, 25)
) (367, 32)
|> (367, 34)
onExpr (367, 37)
hxApp (368, 4)
l (368, 10)
r (368, 12)
noTy (368, 14)
loc (368, 19)
, (368, 22)
nameCtx (368, 24)
| (370, 2)
AExpr (370, 4)
. (370, 9)
Bin (370, 10)
( (370, 14)
op (370, 15)
, (370, 17)
l (370, 19)
, (370, 20)
r (370, 22)
, (370, 23)
loc (370, 25)
) (370, 28)
-> (370, 30)
let (371, 4)
prim (371, 8)
= (371, 13)
op (371, 15)
|> (371, 18)
opToPrim (371, 21)
let (372, 4)
l (372, 8)
, (372, 9)
nameCtx (372, 11)
= (372, 19)
( (372, 21)
l (372, 22)
, (372, 23)
nameCtx (372, 25)
) (372, 32)
|> (372, 34)
onExpr (372, 37)
let (373, 4)
r (373, 8)
, (373, 9)
nameCtx (373, 11)
= (373, 19)
( (373, 21)
r (373, 22)
, (373, 23)
nameCtx (373, 25)
) (373, 32)
|> (373, 34)
onExpr (373, 37)
let (374, 4)
primExpr (374, 8)
= (374, 17)
HExpr (374, 19)
. (374, 24)
Prim (374, 25)
( (374, 30)
prim (374, 31)
, (374, 35)
noTy (374, 37)
, (374, 41)
loc (374, 43)
) (374, 46)
hxApp (375, 4)
( (375, 10)
hxApp (375, 11)
primExpr (375, 17)
l (375, 26)
noTy (375, 28)
loc (375, 33)
) (375, 36)
r (375, 38)
noTy (375, 40)
loc (375, 45)
, (375, 48)
nameCtx (375, 50)
| (377, 2)
AExpr (377, 4)
. (377, 9)
Range (377, 10)
( (377, 16)
_ (377, 17)
, (377, 18)
loc (377, 20)
) (377, 23)
-> (377, 25)
HExpr (378, 4)
. (378, 9)
Error (378, 10)
( (378, 16)
"Invalid use of range syntax." (378, 17)
, (378, 47)
loc (378, 49)
) (378, 52)
, (378, 53)
nameCtx (378, 55)
| (380, 2)
AExpr (380, 4)
. (380, 9)
TupleLit (380, 10)
( (380, 19)
items (380, 20)
, (380, 25)
loc (380, 27)
) (380, 30)
-> (380, 32)
let (381, 4)
items (381, 8)
, (381, 13)
nameCtx (381, 15)
= (381, 23)
( (381, 25)
items (381, 26)
, (381, 31)
nameCtx (381, 33)
) (381, 40)
|> (381, 42)
stMap (381, 45)
onExpr (381, 51)
hxTuple (382, 4)
items (382, 12)
loc (382, 18)
, (382, 21)
nameCtx (382, 23)
| (384, 2)
AExpr (384, 4)
. (384, 9)
Anno (384, 10)
( (384, 15)
body (384, 16)
, (384, 20)
ty (384, 22)
, (384, 24)
loc (384, 26)
) (384, 29)
-> (384, 31)
let (385, 4)
body (385, 8)
, (385, 12)
nameCtx (385, 14)
= (385, 22)
( (385, 24)
body (385, 25)
, (385, 29)
nameCtx (385, 31)
) (385, 38)
|> (385, 40)
onExpr (385, 43)
let (386, 4)
ty (386, 8)
, (386, 10)
nameCtx (386, 12)
= (386, 20)
( (386, 22)
ty (386, 23)
, (386, 25)
nameCtx (386, 27)
) (386, 34)
|> (386, 36)
onTy (386, 39)
hxAnno (387, 4)
body (387, 11)
ty (387, 16)
loc (387, 19)
, (387, 22)
nameCtx (387, 24)
| (389, 2)
AExpr (389, 4)
. (389, 9)
Semi (389, 10)
( (389, 15)
exprs (389, 16)
, (389, 21)
loc (389, 23)
) (389, 26)
-> (389, 28)
assert (390, 4)
( (390, 11)
exprs (390, 12)
|> (390, 18)
listIsEmpty (390, 21)
|> (390, 33)
not (390, 36)
) (390, 39)
let (391, 4)
exprs (391, 8)
, (391, 13)
nameCtx (391, 15)
= (391, 23)
( (391, 25)
exprs (391, 26)
, (391, 31)
nameCtx (391, 33)
) (391, 40)
|> (391, 42)
stMap (391, 45)
onExpr (391, 51)
hxSemi (392, 4)
exprs (392, 11)
loc (392, 17)
, (392, 20)
nameCtx (392, 22)
| (394, 2)
AExpr (394, 4)
. (394, 9)
Let (394, 10)
( (394, 14)
pat (394, 15)
, (394, 18)
body (394, 20)
, (394, 24)
next (394, 26)
, (394, 30)
loc (394, 32)
) (394, 35)
-> (394, 37)
match (395, 4)
desugarLet (395, 10)
pat (395, 21)
body (395, 25)
next (395, 30)
loc (395, 35)
with (395, 39)
| (396, 4)
ALet (396, 6)
. (396, 10)
LetFun (396, 11)
( (396, 18)
ident (396, 19)
, (396, 24)
args (396, 26)
, (396, 30)
body (396, 32)
, (396, 36)
next (396, 38)
, (396, 42)
loc (396, 44)
) (396, 47)
-> (396, 49)
let (397, 6)
serial (397, 10)
, (397, 16)
nameCtx (397, 18)
= (397, 26)
nameCtx (397, 28)
|> (397, 36)
nameCtxAdd (397, 39)
ident (397, 50)
let (398, 6)
isMainFun (398, 10)
= (398, 20)
false (398, 22)
let (399, 6)
args (399, 10)
, (399, 14)
nameCtx (399, 16)
= (399, 24)
( (399, 26)
args (399, 27)
, (399, 31)
nameCtx (399, 33)
) (399, 40)
|> (399, 42)
stMap (399, 45)
onPat (399, 51)
let (400, 6)
body (400, 10)
, (400, 14)
nameCtx (400, 16)
= (400, 24)
( (400, 26)
body (400, 27)
, (400, 31)
nameCtx (400, 33)
) (400, 40)
|> (400, 42)
onExpr (400, 45)
let (401, 6)
next (401, 10)
, (401, 14)
nameCtx (401, 16)
= (401, 24)
( (401, 26)
next (401, 27)
, (401, 31)
nameCtx (401, 33)
) (401, 40)
|> (401, 42)
onExpr (401, 45)
HExpr (402, 6)
. (402, 11)
LetFun (402, 12)
( (402, 19)
serial (402, 20)
, (402, 26)
isMainFun (402, 28)
, (402, 37)
args (402, 39)
, (402, 43)
body (402, 45)
, (402, 49)
next (402, 51)
, (402, 55)
noTy (402, 57)
, (402, 61)
loc (402, 63)
) (402, 66)
, (402, 67)
nameCtx (402, 69)
| (404, 4)
ALet (404, 6)
. (404, 10)
LetVal (404, 11)
( (404, 18)
pat (404, 19)
, (404, 22)
body (404, 24)
, (404, 28)
next (404, 30)
, (404, 34)
loc (404, 36)
) (404, 39)
-> (404, 41)
let (405, 6)
pat (405, 10)
, (405, 13)
nameCtx (405, 15)
= (405, 23)
( (405, 25)
pat (405, 26)
, (405, 29)
nameCtx (405, 31)
) (405, 38)
|> (405, 40)
onPat (405, 43)
let (406, 6)
body (406, 10)
, (406, 14)
nameCtx (406, 16)
= (406, 24)
( (406, 26)
body (406, 27)
, (406, 31)
nameCtx (406, 33)
) (406, 40)
|> (406, 42)
onExpr (406, 45)
let (407, 6)
next (407, 10)
, (407, 14)
nameCtx (407, 16)
= (407, 24)
( (407, 26)
next (407, 27)
, (407, 31)
nameCtx (407, 33)
) (407, 40)
|> (407, 42)
onExpr (407, 45)
HExpr (408, 6)
. (408, 11)
Let (408, 12)
( (408, 16)
pat (408, 17)
, (408, 20)
body (408, 22)
, (408, 26)
next (408, 28)
, (408, 32)
noTy (408, 34)
, (408, 38)
loc (408, 40)
) (408, 43)
, (408, 44)
nameCtx (408, 46)
| (410, 2)
AExpr (410, 4)
. (410, 9)
TySynonym (410, 10)
( (410, 20)
ident (410, 21)
, (410, 26)
ty (410, 28)
, (410, 30)
loc (410, 32)
) (410, 35)
-> (410, 37)
let (411, 4)
serial (411, 8)
, (411, 14)
nameCtx (411, 16)
= (411, 24)
nameCtx (411, 26)
|> (411, 34)
nameCtxAdd (411, 37)
ident (411, 48)
let (412, 4)
ty (412, 8)
, (412, 10)
nameCtx (412, 12)
= (412, 20)
( (412, 22)
ty (412, 23)
, (412, 25)
nameCtx (412, 27)
) (412, 34)
|> (412, 36)
onTy (412, 39)
HExpr (413, 4)
. (413, 9)
TyDecl (413, 10)
( (413, 17)
serial (413, 18)
, (413, 24)
TyDecl (413, 26)
. (413, 32)
Synonym (413, 33)
( (413, 41)
ty (413, 42)
, (413, 44)
loc (413, 46)
) (413, 49)
, (413, 50)
loc (413, 52)
) (413, 55)
, (413, 56)
nameCtx (413, 58)
| (415, 2)
AExpr (415, 4)
. (415, 9)
TyUnion (415, 10)
( (415, 18)
ident (415, 19)
, (415, 24)
variants (415, 26)
, (415, 34)
loc (415, 36)
) (415, 39)
-> (415, 41)
let (416, 4)
onVariant (416, 8)
( (416, 18)
AVariant (416, 19)
( (416, 28)
ident (416, 29)
, (416, 34)
payloadTy (416, 36)
, (416, 45)
_variantLoc (416, 47)
) (416, 58)
, (416, 59)
nameCtx (416, 61)
) (416, 68)
= (416, 70)
let (417, 6)
serial (417, 10)
, (417, 16)
nameCtx (417, 18)
= (417, 26)
nameCtx (417, 28)
|> (417, 36)
nameCtxAdd (417, 39)
ident (417, 50)
let (418, 6)
hasPayload (418, 10)
, (418, 20)
payloadTy (418, 22)
, (418, 31)
nameCtx (418, 33)
= (418, 41)
match (419, 8)
payloadTy (419, 14)
with (419, 24)
| (420, 8)
Some (420, 10)
ty (420, 15)
-> (420, 18)
let (421, 10)
ty (421, 14)
, (421, 16)
nameCtx (421, 18)
= (421, 26)
( (421, 28)
ty (421, 29)
, (421, 31)
nameCtx (421, 33)
) (421, 40)
|> (421, 42)
onTy (421, 45)
true (422, 10)
, (422, 14)
ty (422, 16)
, (422, 18)
nameCtx (422, 20)
| (423, 8)
None (423, 10)
-> (423, 15)
false (424, 10)
, (424, 15)
tyUnit (424, 17)
, (424, 23)
nameCtx (424, 25)
( (425, 6)
ident (425, 7)
, (425, 12)
serial (425, 14)
, (425, 20)
hasPayload (425, 22)
, (425, 32)
payloadTy (425, 34)
) (425, 43)
, (425, 44)
nameCtx (425, 46)
let (426, 4)
unionSerial (426, 8)
, (426, 19)
nameCtx (426, 21)
= (426, 29)
nameCtx (427, 6)
|> (427, 14)
nameCtxAdd (427, 17)
ident (427, 28)
let (428, 4)
variants (428, 8)
, (428, 16)
nameCtx (428, 18)
= (428, 26)
( (429, 6)
variants (429, 7)
, (429, 15)
nameCtx (429, 17)
) (429, 24)
|> (429, 26)
stMap (429, 29)
onVariant (429, 35)
HExpr (430, 4)
. (430, 9)
TyDecl (430, 10)
( (430, 17)
unionSerial (430, 18)
, (430, 29)
TyDecl (430, 31)
. (430, 37)
Union (430, 38)
( (430, 44)
ident (430, 45)
, (430, 50)
variants (430, 52)
, (430, 60)
loc (430, 62)
) (430, 65)
, (430, 66)
loc (430, 68)
) (430, 71)
, (430, 72)
nameCtx (430, 74)
| (432, 2)
AExpr (432, 4)
. (432, 9)
Open (432, 10)
( (432, 15)
path (432, 16)
, (432, 20)
loc (432, 22)
) (432, 25)
-> (432, 27)
HExpr (433, 4)
. (433, 9)
Open (433, 10)
( (433, 15)
path (433, 16)
, (433, 20)
loc (433, 22)
) (433, 25)
, (433, 26)
nameCtx (433, 28)
let (435, 0)
astToHir (435, 4)
( (435, 13)
expr (435, 14)
: (435, 18)
AExpr (435, 20)
, (435, 25)
nameCtx (435, 27)
: (435, 34)
NameCtx (435, 36)
) (435, 43)
: (435, 44)
HExpr (435, 46)
* (435, 52)
NameCtx (435, 54)
= (435, 62)
( (436, 2)
expr (436, 3)
, (436, 7)
nameCtx (436, 9)
) (436, 16)
|> (436, 18)
onExpr (436, 21)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let:
  - fun:
    - opToPrim
    - op
  - match:
    - op
    - arm:
      - .Add: Op
      - ERROR:
        - missing
        - (29:12)
      .Add: HPrim
    - arm:
      - .Sub: Op
      - ERROR:
        - missing
        - (32:12)
      .Sub: HPrim
    - arm:
      - .Mul: Op
      - ERROR:
        - missing
        - (35:12)
      .Mul: HPrim
    - arm:
      - .Div: Op
      - ERROR:
        - missing
        - (38:12)
      .Div: HPrim
    - arm:
      - .Mod: Op
      - ERROR:
        - missing
        - (41:12)
      .Mod: HPrim
    - arm:
      - .Eq: Op
      - ERROR:
        - missing
        - (44:11)
      .Eq: HPrim
    - arm:
      - .Lt: Op
      - ERROR:
        - missing
        - (47:11)
      .Lt: HPrim
    - arm:
      - .Cons: Op
      - ERROR:
        - missing
        - (50:13)
      .Cons: HPrim
    - arm:
      - or:
        - .Ne: Op
        or:
        - .Le: Op
        or:
        - .Gt: Op
        or:
        - .Ge: Op
        or:
        - .And: Op
        or:
        - .Or: Op
        or:
        - .App: Op
        .Pipe: Op
      - ERROR:
        - missing
        - (60:13)
      bin:
      - bin:
        - failwithf
        - \"NEVER: %A\"
      - op
  let:
  - fun:
    - desugarListLitPat
    - pats
    - loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - pats
          - listIsEmpty
        - not
    - let:
      - fun:
        - go
        - pats
      - match:
        - pats
        - arm:
          - list
          - ERROR:
            - missing
            - (69:10)
          bin:
          - .ListLit: APat
          - tuple:
            - list
            - loc
        - arm:
          - cons: head
            tail
          - ERROR:
            - missing
            - (72:20)
          let:
          - tail
          - bin:
            - go
            - tail
          bin:
          - .Cons: APat
          - tuple:
            - head
            - tail
            - loc
      bin:
      - go
      - pats
  let:
  - fun:
    - desugarListLitExpr
    - items
    - loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - items
          - listIsEmpty
        - not
    - let:
      - fun:
        - go
        - items
      - match:
        - items
        - arm:
          - list
          - ERROR:
            - missing
            - (84:10)
          bin:
          - .ListLit: AExpr
          - tuple:
            - list
            - loc
        - arm:
          - cons: head
            tail
          - ERROR:
            - missing
            - (87:20)
          let:
          - tail
          - bin:
            - go
            - tail
          bin:
          - .Bin: AExpr
          - tuple:
            - .Cons: Op
            - head
            - tail
            - loc
      bin:
      - go
      - items
  let:
  - fun:
    - desugarIf
    - cond
    - body
    - alt
    - loc
  - let:
    - alt
    - match:
      - alt
      - arm:
        - call:
          - .Missing: AExpr
          - _
        - ERROR:
          - missing
          - (99:23)
        bin:
        - axUnit
        - loc
      - arm:
        - _
        - ERROR:
          - missing
          - (101:9)
        alt
    let:
    - arms
    - list:
      - bin:
        - AArm
        - tuple:
          - bin:
            - apTrue
            - loc
          - bin:
            - axTrue
            - loc
          - body
          - loc
      - bin:
        - AArm
        - tuple:
          - bin:
            - apFalse
            - loc
          - bin:
            - axTrue
            - loc
          - alt
          - loc
    bin:
    - .Match: AExpr
    - tuple:
      - cond
      - arms
      - loc
  let:
  - fun:
    - desugarFun
    - pats
    - body
    - loc
  - let:
    - ident
    - \"fun\"
    let:
    - pat
    - bin:
      - .Fun: APat
      - tuple:
        - ident
        - pats
        - loc
    let:
    - next
    - bin:
      - .Ident: AExpr
      - tuple:
        - ident
        - loc
    bin:
    - .Let: AExpr
    - tuple:
      - pat
      - body
      - next
      - loc
  let:
  - fun:
    - desugarUniNeg
    - arg
    - loc
  - let:
    - zero
    - bin:
      - .Lit: AExpr
      - tuple:
        - bin:
          - .Int: Lit
          - 0
        - loc
    bin:
    - .Bin: AExpr
    - tuple:
      - .Sub: Op
      - zero
      - arg
      - loc
  let:
  - fun:
    - desugarBinNe
    - l
    - r
    - loc
  - let:
    - eqExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Eq: Op
        - l
        - r
        - loc
    bin:
    - bin:
      - axNot
      - eqExpr
    - loc
  let:
  - fun:
    - desugarBinLe
    - l
    - r
    - loc
  - let:
    - ltExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Lt: Op
        - r
        - l
        - loc
    bin:
    - bin:
      - axNot
      - ltExpr
    - loc
  let:
  - fun:
    - desugarBinGt
    - l
    - r
    - loc
  - bin:
    - .Bin: AExpr
    - tuple:
      - .Lt: Op
      - r
      - l
      - loc
  let:
  - fun:
    - desugarBinGe
    - l
    - r
    - loc
  - let:
    - ltExpr
    - bin:
      - .Bin: AExpr
      - tuple:
        - .Lt: Op
        - l
        - r
        - loc
    bin:
    - bin:
      - axNot
      - ltExpr
    - loc
  let:
  - fun:
    - desugarBinAnd
    - l
    - r
    - loc
  - bin:
    - bin:
      - bin:
        - bin:
          - desugarIf
          - l
        - r
      - bin:
        - axFalse
        - loc
    - loc
  let:
  - fun:
    - desugarBinOr
    - l
    - r
    - loc
  - bin:
    - bin:
      - bin:
        - bin:
          - desugarIf
          - l
        - bin:
          - axTrue
          - loc
      - r
    - loc
  let:
  - fun:
    - desugarBinPipe
    - l
    - r
    - loc
  - bin:
    - .Bin: AExpr
    - tuple:
      - .App: Op
      - r
      - l
      - loc
  let:
  - fun:
    - tryDesugarIndexRange
    - expr
    - loc
  - match:
    - expr
    - arm:
      - call:
        - .Index: AExpr
        - tuple:
          - s
          - call:
            - .Range: AExpr
            - tuple:
              - list:
                - l
                - r
              - _
          - _
      - ERROR:
        - missing
        - (163:49)
      let:
      - getSlice
      - bin:
        - .Nav: AExpr
        - tuple:
          - bin:
            - .Ident: AExpr
            - tuple:
              - \"String\"
              - loc
          - \"getSlice\"
          - loc
      tuple:
      - true
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - axApp3
                - getSlice
              - l
            - r
          - s
        - loc
    - arm:
      - _
      - ERROR:
        - missing
        - (167:7)
      tuple:
      - false
      - expr
  let:
  - fun:
    - desugarLet
    - pat
    - body
    - next
    - loc
  - match:
    - pat
    - arm:
      - call:
        - .Anno: APat
        - tuple:
          - pat
          - annoTy
          - annoLoc
      - ERROR:
        - missing
        - (185:38)
      let:
      - body
      - bin:
        - .Anno: AExpr
        - tuple:
          - body
          - annoTy
          - annoLoc
      bin:
      - bin:
        - bin:
          - bin:
            - desugarLet
            - pat
          - body
        - next
      - loc
    - arm:
      - call:
        - .Fun: APat
        - tuple:
          - ident
          - args
          - _
      - ERROR:
        - missing
        - (189:31)
      bin:
      - .LetFun: ALet
      - tuple:
        - ident
        - args
        - body
        - next
        - loc
    - arm:
      - _
      - ERROR:
        - missing
        - (192:7)
      bin:
      - .LetVal: ALet
      - tuple:
        - pat
        - body
        - next
        - loc
  let:
  - anno:
    - fun:
      - onTy
      - tuple:
        - anno:
          - ty
          - ATy
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - Ty
      - NameCtx
  - match:
    - ty
    - arm:
      - call:
        - .Missing: ATy
        - loc
      - ERROR:
        - missing
        - (197:21)
      tuple:
      - bin:
        - .Error: Ty
        - loc
      - nameCtx
    - arm:
      - call:
        - .App: ATy
        - tuple:
          - ident
          - argTys
          - _
      - ERROR:
        - missing
        - (200:32)
      let:
      - tuple:
        - tySerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - argTys
        - nameCtx
      - bin:
        - tuple:
          - argTys
          - nameCtx
        - bin:
          - stMap
          - onTy
      tuple:
      - bin:
        - bin:
          - tyRef
          - tySerial
        - argTys
      - nameCtx
    - arm:
      - call:
        - .Suffix: ATy
        - tuple:
          - lTy
          - ident
          - _
      - ERROR:
        - missing
        - (205:32)
      let:
      - tuple:
        - lTy
        - nameCtx
      - bin:
        - tuple:
          - lTy
          - nameCtx
        - onTy
      let:
      - tuple:
        - tySerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - bin:
          - tyRef
          - tySerial
        - list: lTy
      - nameCtx
    - arm:
      - call:
        - .Tuple: ATy
        - tuple:
          - itemTys
          - _
      - ERROR:
        - missing
        - (210:28)
      let:
      - tuple:
        - itemTys
        - nameCtx
      - bin:
        - tuple:
          - itemTys
          - nameCtx
        - bin:
          - stMap
          - onTy
      tuple:
      - bin:
        - tyTuple
        - itemTys
      - nameCtx
    - arm:
      - call:
        - .Fun: ATy
        - tuple:
          - sTy
          - tTy
          - _
      - ERROR:
        - missing
        - (214:27)
      let:
      - tuple:
        - sTy
        - nameCtx
      - bin:
        - tuple:
          - sTy
          - nameCtx
        - onTy
      let:
      - tuple:
        - tTy
        - nameCtx
      - bin:
        - tuple:
          - tTy
          - nameCtx
        - onTy
      tuple:
      - bin:
        - bin:
          - tyFun
          - sTy
        - tTy
      - nameCtx
  let:
  - anno:
    - fun:
      - onPat
      - tuple:
        - anno:
          - pat
          - APat
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HPat
      - NameCtx
  - match:
    - pat
    - arm:
      - call:
        - .Missing: APat
        - tuple:
          - _
          - loc
      - ERROR:
        - missing
        - (221:27)
      bin:
      - bin:
        - failwithf
        - \"Missing pattern %A\"
      - loc
    - arm:
      - call:
        - .Lit: APat
        - tuple:
          - lit
          - loc
      - ERROR:
        - missing
        - (224:25)
      tuple:
      - bin:
        - .Lit: HPat
        - tuple:
          - lit
          - loc
      - nameCtx
    - arm:
      - call:
        - .Ident: APat
        - tuple:
          - ident
          - loc
      - ERROR:
        - missing
        - (227:29)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - .Ref: HPat
        - tuple:
          - serial
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: APat
        - tuple:
          - list
          - loc
      - ERROR:
        - missing
        - (231:28)
      tuple:
      - bin:
        - bin:
          - patNil
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: APat
        - tuple:
          - pats
          - loc
      - ERROR:
        - missing
        - (234:30)
      let:
      - pat
      - bin:
        - bin:
          - desugarListLitPat
          - pats
        - loc
      bin:
      - tuple:
        - pat
        - nameCtx
      - onPat
    - arm:
      - call:
        - .Nav: APat
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (238:26)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Nav: HPat
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Call: APat
        - tuple:
          - calleePat
          - argPats
          - loc
      - ERROR:
        - missing
        - (242:41)
      let:
      - tuple:
        - calleePat
        - nameCtx
      - bin:
        - tuple:
          - calleePat
          - nameCtx
        - onPat
      let:
      - tuple:
        - argPats
        - nameCtx
      - bin:
        - tuple:
          - argPats
          - nameCtx
        - bin:
          - stMap
          - onPat
      tuple:
      - bin:
        - .Call: HPat
        - tuple:
          - calleePat
          - argPats
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Cons: APat
        - tuple:
          - head
          - tail
          - loc
      - ERROR:
        - missing
        - (247:33)
      let:
      - tuple:
        - head
        - nameCtx
      - bin:
        - tuple:
          - head
          - nameCtx
        - onPat
      let:
      - tuple:
        - tail
        - nameCtx
      - bin:
        - tuple:
          - tail
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Cons: HPat
        - tuple:
          - head
          - tail
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .TupleLit: APat
        - tuple:
          - pats
          - loc
      - ERROR:
        - missing
        - (252:31)
      let:
      - tuple:
        - pats
        - nameCtx
      - bin:
        - tuple:
          - pats
          - nameCtx
        - bin:
          - stMap
          - onPat
      tuple:
      - bin:
        - .Tuple: HPat
        - tuple:
          - pats
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .As: APat
        - tuple:
          - pat
          - ident
          - loc
      - ERROR:
        - missing
        - (256:31)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - pat
        - nameCtx
      - bin:
        - tuple:
          - pat
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .As: HPat
        - tuple:
          - pat
          - serial
          - loc
      - nameCtx
    - arm:
      - call:
        - .Anno: APat
        - tuple:
          - pat
          - ty
          - loc
      - ERROR:
        - missing
        - (261:30)
      let:
      - tuple:
        - pat
        - nameCtx
      - bin:
        - tuple:
          - pat
          - nameCtx
        - onPat
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - .Anno: HPat
        - tuple:
          - pat
          - ty
          - loc
      - nameCtx
    - arm:
      - call:
        - .Or: APat
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (266:25)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onPat
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onPat
      tuple:
      - bin:
        - .Or: HPat
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Fun: APat
        - tuple:
          - _
          - _
          - loc
      - ERROR:
        - missing
        - (271:26)
      bin:
      - bin:
        - failwithf
        - \"Invalid occurrence of fun pattern: %A\"
      - loc
  let:
  - anno:
    - fun:
      - onExpr
      - tuple:
        - anno:
          - expr
          - AExpr
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HExpr
      - NameCtx
  - match:
    - expr
    - arm:
      - call:
        - .Missing: AExpr
        - loc
      - ERROR:
        - missing
        - (276:23)
      tuple:
      - bin:
        - .Error: HExpr
        - tuple:
          - \"Missing expression\"
          - loc
      - nameCtx
    - arm:
      - call:
        - .Lit: AExpr
        - tuple:
          - lit
          - loc
      - ERROR:
        - missing
        - (279:26)
      tuple:
      - bin:
        - .Lit: HExpr
        - tuple:
          - lit
          - loc
      - nameCtx
    - arm:
      - call:
        - .Ident: AExpr
        - tuple:
          - ident
          - loc
      - ERROR:
        - missing
        - (282:30)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      tuple:
      - bin:
        - .Ref: HExpr
        - tuple:
          - serial
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: AExpr
        - tuple:
          - list
          - loc
      - ERROR:
        - missing
        - (286:29)
      tuple:
      - bin:
        - bin:
          - hxNil
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .ListLit: AExpr
        - tuple:
          - items
          - loc
      - ERROR:
        - missing
        - (289:32)
      let:
      - expr
      - bin:
        - bin:
          - desugarListLitExpr
          - items
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .If: AExpr
        - tuple:
          - cond
          - body
          - alt
          - loc
      - ERROR:
        - missing
        - (293:37)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - bin:
              - desugarIf
              - cond
            - body
          - alt
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Match: AExpr
        - tuple:
          - target
          - arms
          - loc
      - ERROR:
        - missing
        - (297:37)
      let:
      - fun:
        - onArm
        - tuple:
          - call:
            - AArm
            - tuple:
              - pat
              - guard
              - body
              - loc
          - nameCtx
      - let:
        - tuple:
          - pat
          - nameCtx
        - bin:
          - tuple:
            - pat
            - nameCtx
          - onPat
        let:
        - tuple:
          - guard
          - nameCtx
        - match:
          - guard
          - arm:
            - call:
              - .Missing: AExpr
              - _
            - ERROR:
              - missing
              - (304:27)
            tuple:
            - bin:
              - hxTrue
              - loc
            - nameCtx
          - arm:
            - _
            - ERROR:
              - missing
              - (306:13)
            bin:
            - tuple:
              - guard
              - nameCtx
            - onExpr
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        tuple:
        - tuple:
          - pat
          - guard
          - body
        - nameCtx
      let:
      - tuple:
        - target
        - nameCtx
      - bin:
        - tuple:
          - target
          - nameCtx
        - onExpr
      let:
      - tuple:
        - arms
        - nameCtx
      - bin:
        - tuple:
          - arms
          - nameCtx
        - bin:
          - stMap
          - onArm
      tuple:
      - bin:
        - .Match: HExpr
        - tuple:
          - target
          - arms
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Fun: AExpr
        - tuple:
          - pats
          - body
          - loc
      - ERROR:
        - missing
        - (315:33)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarFun
            - pats
          - body
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Nav: AExpr
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (319:27)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      tuple:
      - bin:
        - .Nav: HExpr
        - tuple:
          - l
          - r
          - noTy
          - loc
      - nameCtx
    - arm:
      - call:
        - .Index: AExpr
        - tuple:
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (323:29)
      match:
      - bin:
        - bin:
          - tryDesugarIndexRange
          - expr
        - loc
      - arm:
        - tuple:
          - true
          - expr
        - ERROR:
          - missing
          - (325:18)
        bin:
        - tuple:
          - expr
          - nameCtx
        - onExpr
      - arm:
        - tuple:
          - false
          - _
        - ERROR:
          - missing
          - (328:16)
        let:
        - tuple:
          - l
          - nameCtx
        - bin:
          - tuple:
            - l
            - nameCtx
          - onExpr
        let:
        - tuple:
          - r
          - nameCtx
        - bin:
          - tuple:
            - r
            - nameCtx
          - onExpr
        let:
        - hxIndex
        - bin:
          - bin:
            - bin:
              - bin:
                - hxApp
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - hxApp
                        - bin:
                          - .Prim: HExpr
                          - tuple:
                            - .Index: HPrim
                            - noTy
                            - loc
                      - l
                    - noTy
                  - loc
              - r
            - noTy
          - loc
        tuple:
        - hxIndex
        - nameCtx
    - arm:
      - call:
        - .Uni: AExpr
        - tuple:
          - .Neg: UniOp
          - arg
          - loc
      - ERROR:
        - missing
        - (334:37)
      let:
      - expr
      - bin:
        - bin:
          - desugarUniNeg
          - arg
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Ne: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (338:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinNe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Le: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (342:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinLe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Gt: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (346:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinGt
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Ge: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (350:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinGe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .And: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (354:35)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinAnd
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Or: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (358:34)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinOr
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .Pipe: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (362:36)
      let:
      - expr
      - bin:
        - bin:
          - bin:
            - desugarBinPipe
            - l
          - r
        - loc
      bin:
      - tuple:
        - expr
        - nameCtx
      - onExpr
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - .App: Op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (366:35)
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onExpr
      tuple:
      - bin:
        - bin:
          - bin:
            - bin:
              - hxApp
              - l
            - r
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .Bin: AExpr
        - tuple:
          - op
          - l
          - r
          - loc
      - ERROR:
        - missing
        - (371:31)
      let:
      - prim
      - bin:
        - op
        - opToPrim
      let:
      - tuple:
        - l
        - nameCtx
      - bin:
        - tuple:
          - l
          - nameCtx
        - onExpr
      let:
      - tuple:
        - r
        - nameCtx
      - bin:
        - tuple:
          - r
          - nameCtx
        - onExpr
      let:
      - primExpr
      - bin:
        - .Prim: HExpr
        - tuple:
          - prim
          - noTy
          - loc
      tuple:
      - bin:
        - bin:
          - bin:
            - bin:
              - hxApp
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - hxApp
                      - primExpr
                    - l
                  - noTy
                - loc
            - r
          - noTy
        - loc
      - nameCtx
    - arm:
      - call:
        - .Range: AExpr
        - tuple:
          - _
          - loc
      - ERROR:
        - missing
        - (378:26)
      tuple:
      - bin:
        - .Error: HExpr
        - tuple:
          - \"Invalid use of range syntax.\"
          - loc
      - nameCtx
    - arm:
      - call:
        - .TupleLit: AExpr
        - tuple:
          - items
          - loc
      - ERROR:
        - missing
        - (381:33)
      let:
      - tuple:
        - items
        - nameCtx
      - bin:
        - tuple:
          - items
          - nameCtx
        - bin:
          - stMap
          - onExpr
      tuple:
      - bin:
        - bin:
          - hxTuple
          - items
        - loc
      - nameCtx
    - arm:
      - call:
        - .Anno: AExpr
        - tuple:
          - body
          - ty
          - loc
      - ERROR:
        - missing
        - (385:32)
      let:
      - tuple:
        - body
        - nameCtx
      - bin:
        - tuple:
          - body
          - nameCtx
        - onExpr
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - bin:
          - bin:
            - hxAnno
            - body
          - ty
        - loc
      - nameCtx
    - arm:
      - call:
        - .Semi: AExpr
        - tuple:
          - exprs
          - loc
      - ERROR:
        - missing
        - (390:29)
      semi:
      - bin:
        - assert
        - bin:
          - bin:
            - exprs
            - listIsEmpty
          - not
      - let:
        - tuple:
          - exprs
          - nameCtx
        - bin:
          - tuple:
            - exprs
            - nameCtx
          - bin:
            - stMap
            - onExpr
        tuple:
        - bin:
          - bin:
            - hxSemi
            - exprs
          - loc
        - nameCtx
    - arm:
      - call:
        - .Let: AExpr
        - tuple:
          - pat
          - body
          - next
          - loc
      - ERROR:
        - missing
        - (395:38)
      match:
      - bin:
        - bin:
          - bin:
            - bin:
              - desugarLet
              - pat
            - body
          - next
        - loc
      - arm:
        - call:
          - .LetFun: ALet
          - tuple:
            - ident
            - args
            - body
            - next
            - loc
        - ERROR:
          - missing
          - (397:50)
        let:
        - tuple:
          - serial
          - nameCtx
        - bin:
          - nameCtx
          - bin:
            - nameCtxAdd
            - ident
        let:
        - isMainFun
        - false
        let:
        - tuple:
          - args
          - nameCtx
        - bin:
          - tuple:
            - args
            - nameCtx
          - bin:
            - stMap
            - onPat
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        let:
        - tuple:
          - next
          - nameCtx
        - bin:
          - tuple:
            - next
            - nameCtx
          - onExpr
        tuple:
        - bin:
          - .LetFun: HExpr
          - tuple:
            - serial
            - isMainFun
            - args
            - body
            - next
            - noTy
            - loc
        - nameCtx
      - arm:
        - call:
          - .LetVal: ALet
          - tuple:
            - pat
            - body
            - next
            - loc
        - ERROR:
          - missing
          - (405:42)
        let:
        - tuple:
          - pat
          - nameCtx
        - bin:
          - tuple:
            - pat
            - nameCtx
          - onPat
        let:
        - tuple:
          - body
          - nameCtx
        - bin:
          - tuple:
            - body
            - nameCtx
          - onExpr
        let:
        - tuple:
          - next
          - nameCtx
        - bin:
          - tuple:
            - next
            - nameCtx
          - onExpr
        tuple:
        - bin:
          - .Let: HExpr
          - tuple:
            - pat
            - body
            - next
            - noTy
            - loc
        - nameCtx
    - arm:
      - call:
        - .TySynonym: AExpr
        - tuple:
          - ident
          - ty
          - loc
      - ERROR:
        - missing
        - (411:38)
      let:
      - tuple:
        - serial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - ty
        - nameCtx
      - bin:
        - tuple:
          - ty
          - nameCtx
        - onTy
      tuple:
      - bin:
        - .TyDecl: HExpr
        - tuple:
          - serial
          - bin:
            - .Synonym: TyDecl
            - tuple:
              - ty
              - loc
          - loc
      - nameCtx
    - arm:
      - call:
        - .TyUnion: AExpr
        - tuple:
          - ident
          - variants
          - loc
      - ERROR:
        - missing
        - (416:42)
      let:
      - fun:
        - onVariant
        - tuple:
          - call:
            - AVariant
            - tuple:
              - ident
              - payloadTy
              - _variantLoc
          - nameCtx
      - let:
        - tuple:
          - serial
          - nameCtx
        - bin:
          - nameCtx
          - bin:
            - nameCtxAdd
            - ident
        let:
        - tuple:
          - hasPayload
          - payloadTy
          - nameCtx
        - match:
          - payloadTy
          - arm:
            - call:
              - Some
              - ty
            - ERROR:
              - missing
              - (421:19)
            let:
            - tuple:
              - ty
              - nameCtx
            - bin:
              - tuple:
                - ty
                - nameCtx
              - onTy
            tuple:
            - true
            - ty
            - nameCtx
          - arm:
            - None
            - ERROR:
              - missing
              - (424:16)
            tuple:
            - false
            - tyUnit
            - nameCtx
        tuple:
        - tuple:
          - ident
          - serial
          - hasPayload
          - payloadTy
        - nameCtx
      let:
      - tuple:
        - unionSerial
        - nameCtx
      - bin:
        - nameCtx
        - bin:
          - nameCtxAdd
          - ident
      let:
      - tuple:
        - variants
        - nameCtx
      - bin:
        - tuple:
          - variants
          - nameCtx
        - bin:
          - stMap
          - onVariant
      tuple:
      - bin:
        - .TyDecl: HExpr
        - tuple:
          - unionSerial
          - bin:
            - .Union: TyDecl
            - tuple:
              - ident
              - variants
              - loc
          - loc
      - nameCtx
    - arm:
      - call:
        - .Open: AExpr
        - tuple:
          - path
          - loc
      - ERROR:
        - missing
        - (433:28)
      tuple:
      - bin:
        - .Open: HExpr
        - tuple:
          - path
          - loc
      - nameCtx
  let:
  - anno:
    - fun:
      - astToHir
      - tuple:
        - anno:
          - expr
          - AExpr
        - anno:
          - nameCtx
          - NameCtx
    - tuple:
      - HExpr
      - NameCtx
  - bin:
    - tuple:
      - expr
      - nameCtx
    - onExpr
  tuple
HIR:
inf:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let-fun:
  - 1
  - match: 3
  let-fun:
  - 30
  - inf:
    - inf:
      - 33
      - inf:
        - 34
        - inf:
          - 35
          - 36
    - let-fun:
      - 37
      - match: 39
      inf:
      - 51
      - 52
  let-fun:
  - 53
  - inf:
    - inf:
      - 56
      - inf:
        - 57
        - inf:
          - 58
          - 59
    - let-fun:
      - 60
      - match: 62
      inf:
      - 75
      - 76
  let-fun:
  - 77
  - let-val:
    - match: 83
    let-val:
    - inf:
      - inf:
        - prim
        - inf:
          - 91
          - inf:
            - inf:
              - 92
              - 93
            - inf:
              - 94
              - 95
            - 96
            - 97
      - inf:
        - inf:
          - prim
          - inf:
            - 98
            - inf:
              - inf:
                - 99
                - 100
              - inf:
                - 101
                - 102
              - 103
              - 104
        - prim
    inf:
    - .Match: 105
    - inf:
      - 106
      - 107
      - 108
  let-fun:
  - 109
  - let-val: \"fun\"
    let-val:
    - inf:
      - .Fun: 115
      - inf:
        - 116
        - 117
        - 118
    let-val:
    - inf:
      - .Ident: 120
      - inf:
        - 121
        - 122
    inf:
    - .Let: 123
    - inf:
      - 124
      - 125
      - 126
      - 127
  let-fun:
  - 128
  - let-val:
    - inf:
      - .Lit: 132
      - inf:
        - inf:
          - .Int: 133
          - 0
        - 134
    inf:
    - .Bin: 135
    - inf:
      - .Sub: 136
      - 137
      - 138
      - 139
  let-fun:
  - 140
  - let-val:
    - inf:
      - .Bin: 145
      - inf:
        - .Eq: 146
        - 147
        - 148
        - 149
    inf:
    - inf:
      - 150
      - 151
    - 152
  let-fun:
  - 153
  - let-val:
    - inf:
      - .Bin: 158
      - inf:
        - .Lt: 159
        - 160
        - 161
        - 162
    inf:
    - inf:
      - 163
      - 164
    - 165
  let-fun:
  - 166
  - inf:
    - .Bin: 170
    - inf:
      - .Lt: 171
      - 172
      - 173
      - 174
  let-fun:
  - 175
  - let-val:
    - inf:
      - .Bin: 180
      - inf:
        - .Lt: 181
        - 182
        - 183
        - 184
    inf:
    - inf:
      - 185
      - 186
    - 187
  let-fun:
  - 188
  - inf:
    - inf:
      - inf:
        - inf:
          - 192
          - 193
        - 194
      - inf:
        - 195
        - 196
    - 197
  let-fun:
  - 198
  - inf:
    - inf:
      - inf:
        - inf:
          - 202
          - 203
        - inf:
          - 204
          - 205
      - 206
    - 207
  let-fun:
  - 208
  - inf:
    - .Bin: 212
    - inf:
      - .App: 213
      - 214
      - 215
      - 216
  let-fun:
  - 217
  - match: 220
  let-fun:
  - 241
  - match: 246
  let-fun:
  - 277
  - inf:
    - match: 282
  let-fun:
  - 357
  - inf:
    - match: 362
  let-fun:
  - 540
  - inf:
    - match: 545
  let-fun:
  - 1089
  - inf:
    - inf:
      - 1094
      - inf:
        - 1095
        - 1096
  inf
$? = 0
