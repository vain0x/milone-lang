FILE MiloneLang/Lexing.fs
module (29, 0)
rec (29, 7)
MiloneLang (29, 11)
. (29, 21)
Lexing (29, 22)
open (31, 0)
MiloneLang (31, 5)
. (31, 15)
Types (31, 16)
open (32, 0)
MiloneLang (32, 5)
. (32, 15)
Helpers (32, 16)
type (35, 0)
TokenizeCtx (35, 5)
= (35, 17)
string (35, 19)
* (35, 26)
int (35, 28)
* (35, 32)
Loc (35, 34)
* (35, 38)
( (35, 40)
Token (35, 41)
* (35, 47)
Loc (35, 49)
) (35, 52)
list (35, 54)
let (39, 0)
locShift (39, 4)
( (39, 13)
text (39, 14)
: (39, 18)
string (39, 20)
) (39, 26)
( (39, 28)
l (39, 29)
: (39, 30)
int (39, 32)
) (39, 35)
( (39, 37)
r (39, 38)
: (39, 39)
int (39, 41)
) (39, 44)
( (39, 46)
( (39, 47)
y (39, 48)
, (39, 49)
x (39, 51)
) (39, 52)
: (39, 53)
Loc (39, 55)
) (39, 58)
= (39, 60)
assert (40, 2)
( (40, 9)
0 (40, 10)
<= (40, 12)
l (40, 15)
&& (40, 17)
l (40, 20)
<= (40, 22)
r (40, 25)
&& (40, 27)
r (40, 30)
<= (40, 32)
text (40, 35)
. (40, 39)
Length (40, 40)
) (40, 46)
let (41, 2)
rec (41, 6)
go (41, 10)
y (41, 13)
x (41, 15)
i (41, 17)
= (41, 19)
if (42, 4)
i (42, 7)
= (42, 9)
r (42, 11)
then (42, 13)
y (43, 6)
, (43, 7)
x (43, 9)
else (44, 4)
if (44, 9)
text (44, 12)
. (44, 16)
[ (44, 17)
i (44, 18)
] (44, 19)
= (44, 21)
'\n' (44, 23)
then (44, 28)
go (45, 6)
( (45, 9)
y (45, 10)
+ (45, 12)
1 (45, 14)
) (45, 15)
0 (45, 17)
( (45, 19)
i (45, 20)
+ (45, 22)
1 (45, 24)
) (45, 25)
else (46, 4)
go (47, 6)
y (47, 9)
( (47, 11)
x (47, 12)
+ (47, 14)
1 (47, 16)
) (47, 17)
( (47, 19)
i (47, 20)
+ (47, 22)
1 (47, 24)
) (47, 25)
go (48, 2)
y (48, 5)
x (48, 7)
l (48, 9)
let (54, 0)
charNull (54, 4)
: (54, 12)
char (54, 14)
= (54, 19)
char (54, 21)
0 (54, 26)
let (56, 0)
charIsIdent (56, 4)
( (56, 16)
c (56, 17)
: (56, 18)
char (56, 20)
) (56, 24)
: (56, 25)
bool (56, 27)
= (56, 32)
c (57, 2)
= (57, 4)
'_' (57, 6)
|| (57, 10)
charIsDigit (57, 13)
c (57, 25)
|| (57, 27)
charIsAlpha (57, 30)
c (57, 42)
let (59, 0)
charIsOp (59, 4)
( (59, 13)
c (59, 14)
: (59, 15)
char (59, 17)
) (59, 21)
: (59, 22)
bool (59, 24)
= (59, 29)
c (60, 2)
= (60, 4)
'+' (60, 6)
|| (60, 10)
c (60, 13)
= (60, 15)
'-' (60, 17)
|| (60, 21)
c (60, 24)
= (60, 26)
'*' (60, 28)
|| (60, 32)
c (60, 35)
= (60, 37)
'/' (60, 39)
|| (60, 43)
c (60, 46)
= (60, 48)
'%' (60, 50)
|| (60, 54)
c (61, 2)
= (61, 4)
'=' (61, 6)
|| (61, 10)
c (61, 13)
= (61, 15)
'<' (61, 17)
|| (61, 21)
c (61, 24)
= (61, 26)
'>' (61, 28)
|| (61, 32)
c (61, 35)
= (61, 37)
'^' (61, 39)
|| (61, 43)
c (61, 46)
= (61, 48)
'&' (61, 50)
|| (61, 54)
c (62, 2)
= (62, 4)
'|' (62, 6)
|| (62, 10)
c (62, 13)
= (62, 15)
':' (62, 17)
|| (62, 21)
c (62, 24)
= (62, 26)
'@' (62, 28)
|| (62, 32)
c (62, 35)
= (62, 37)
';' (62, 39)
|| (62, 43)
c (62, 46)
= (62, 48)
'.' (62, 50)
let (64, 0)
charIsPun (64, 4)
( (64, 14)
c (64, 15)
: (64, 16)
char (64, 18)
) (64, 22)
: (64, 23)
bool (64, 25)
= (64, 30)
c (65, 2)
= (65, 4)
',' (65, 6)
|| (65, 10)
c (65, 13)
= (65, 15)
'(' (65, 17)
|| (65, 21)
c (65, 24)
= (65, 26)
')' (65, 28)
|| (65, 32)
c (65, 35)
= (65, 37)
'[' (65, 39)
|| (65, 43)
c (65, 46)
= (65, 48)
']' (65, 50)
let (72, 0)
strIsFollowedBy (72, 4)
( (72, 20)
i (72, 21)
: (72, 22)
int (72, 24)
) (72, 27)
( (72, 29)
prefix (72, 30)
: (72, 36)
string (72, 38)
) (72, 44)
( (72, 46)
s (72, 47)
: (72, 48)
string (72, 50)
) (72, 56)
: (72, 57)
bool (72, 59)
= (72, 64)
let (74, 2)
rec (74, 6)
go (74, 10)
pi (74, 13)
si (74, 16)
= (74, 19)
pi (75, 4)
= (75, 7)
prefix (75, 9)
. (75, 15)
Length (75, 16)
|| (75, 23)
( (75, 26)
si (76, 6)
< (76, 9)
s (76, 11)
. (76, 12)
Length (76, 13)
&& (77, 6)
prefix (77, 9)
. (77, 15)
[ (77, 16)
pi (77, 17)
] (77, 19)
= (77, 21)
s (77, 23)
. (77, 24)
[ (77, 25)
si (77, 26)
] (77, 28)
&& (78, 6)
go (78, 9)
( (78, 12)
pi (78, 13)
+ (78, 16)
1 (78, 18)
) (78, 19)
( (78, 21)
si (78, 22)
+ (78, 25)
1 (78, 27)
) (78, 28)
) (79, 4)
i (80, 2)
+ (80, 4)
prefix (80, 6)
. (80, 12)
Length (80, 13)
<= (80, 20)
s (80, 23)
. (80, 24)
Length (80, 25)
&& (80, 32)
go (80, 35)
0 (80, 38)
i (80, 40)
let (83, 0)
strIsFollowedByRawQuotes (83, 4)
( (83, 29)
i (83, 30)
: (83, 31)
int (83, 33)
) (83, 36)
( (83, 38)
s (83, 39)
: (83, 40)
string (83, 42)
) (83, 48)
: (83, 49)
bool (83, 51)
= (83, 56)
strIsFollowedBy (84, 2)
i (84, 18)
"\"\"\"" (84, 20)
s (84, 29)
let (90, 0)
scanError (90, 4)
( (90, 14)
_ (90, 15)
: (90, 16)
string (90, 18)
) (90, 24)
( (90, 26)
i (90, 27)
: (90, 28)
int (90, 30)
) (90, 33)
= (90, 35)
i (92, 2)
+ (92, 4)
1 (92, 6)
let (94, 0)
lookEof (94, 4)
( (94, 12)
text (94, 13)
: (94, 17)
string (94, 19)
) (94, 25)
( (94, 27)
i (94, 28)
: (94, 29)
int (94, 31)
) (94, 34)
= (94, 36)
i (95, 2)
>= (95, 4)
text (95, 7)
. (95, 11)
Length (95, 12)
let (98, 0)
lookSpace (98, 4)
( (98, 14)
text (98, 15)
: (98, 19)
string (98, 21)
) (98, 27)
( (98, 29)
i (98, 30)
: (98, 31)
int (98, 33)
) (98, 36)
= (98, 38)
text (99, 2)
. (99, 6)
[ (99, 7)
i (99, 8)
] (99, 9)
|> (99, 11)
charIsSpace (99, 14)
let (102, 0)
scanSpace (102, 4)
( (102, 14)
text (102, 15)
: (102, 19)
string (102, 21)
) (102, 27)
( (102, 29)
i (102, 30)
: (102, 31)
int (102, 33)
) (102, 36)
= (102, 38)
assert (103, 2)
( (103, 9)
lookSpace (103, 10)
text (103, 20)
i (103, 25)
) (103, 26)
let (104, 2)
rec (104, 6)
go (104, 10)
i (104, 13)
= (104, 15)
if (105, 4)
i (105, 7)
< (105, 9)
text (105, 11)
. (105, 15)
Length (105, 16)
&& (105, 23)
text (105, 26)
. (105, 30)
[ (105, 31)
i (105, 32)
] (105, 33)
|> (105, 35)
charIsSpace (105, 38)
then (105, 50)
go (106, 6)
( (106, 9)
i (106, 10)
+ (106, 12)
1 (106, 14)
) (106, 15)
else (107, 4)
i (108, 6)
go (109, 2)
i (109, 5)
let (111, 0)
lookComment (111, 4)
( (111, 16)
text (111, 17)
: (111, 21)
string (111, 23)
) (111, 29)
( (111, 31)
i (111, 32)
: (111, 33)
int (111, 35)
) (111, 38)
= (111, 40)
text (113, 2)
|> (113, 7)
strIsFollowedBy (113, 10)
i (113, 26)
"//" (113, 28)
|| (114, 2)
text (114, 5)
|> (114, 10)
strIsFollowedBy (114, 13)
i (114, 29)
"[<" (114, 31)
let (116, 0)
scanLine (116, 4)
( (116, 13)
text (116, 14)
: (116, 18)
string (116, 20)
) (116, 26)
( (116, 28)
i (116, 29)
: (116, 30)
int (116, 32)
) (116, 35)
= (116, 37)
assert (117, 2)
( (117, 9)
lookComment (117, 10)
text (117, 22)
i (117, 27)
) (117, 28)
let (118, 2)
rec (118, 6)
go (118, 10)
i (118, 13)
= (118, 15)
if (119, 4)
i (119, 7)
= (119, 9)
text (119, 11)
. (119, 15)
Length (119, 16)
then (119, 23)
i (120, 6)
else (121, 4)
if (121, 9)
text (121, 12)
. (121, 16)
[ (121, 17)
i (121, 18)
] (121, 19)
= (121, 21)
'\n' (121, 23)
then (121, 28)
i (122, 6)
+ (122, 8)
1 (122, 10)
else (123, 4)
go (124, 6)
( (124, 9)
i (124, 10)
+ (124, 12)
1 (124, 14)
) (124, 15)
go (125, 2)
i (125, 5)
let (127, 0)
lookPun (127, 4)
( (127, 12)
text (127, 13)
: (127, 17)
string (127, 19)
) (127, 25)
( (127, 27)
i (127, 28)
: (127, 29)
int (127, 31)
) (127, 34)
= (127, 36)
text (128, 2)
. (128, 6)
[ (128, 7)
i (128, 8)
] (128, 9)
|> (128, 11)
charIsPun (128, 14)
let (130, 0)
scanPun (130, 4)
( (130, 12)
text (130, 13)
: (130, 17)
string (130, 19)
) (130, 25)
( (130, 27)
i (130, 28)
: (130, 29)
int (130, 31)
) (130, 34)
= (130, 36)
assert (131, 2)
( (131, 9)
lookPun (131, 10)
text (131, 18)
i (131, 23)
) (131, 24)
i (132, 2)
+ (132, 4)
1 (132, 6)
let (134, 0)
lookOp (134, 4)
( (134, 11)
text (134, 12)
: (134, 16)
string (134, 18)
) (134, 24)
( (134, 26)
i (134, 27)
: (134, 28)
int (134, 30)
) (134, 33)
= (134, 35)
text (135, 2)
. (135, 6)
[ (135, 7)
i (135, 8)
] (135, 9)
|> (135, 11)
charIsOp (135, 14)
let (137, 0)
scanOp (137, 4)
( (137, 11)
text (137, 12)
: (137, 16)
string (137, 18)
) (137, 24)
( (137, 26)
i (137, 27)
: (137, 28)
int (137, 30)
) (137, 33)
= (137, 35)
assert (138, 2)
( (138, 9)
lookOp (138, 10)
text (138, 17)
i (138, 22)
) (138, 23)
let (139, 2)
rec (139, 6)
go (139, 10)
i (139, 13)
= (139, 15)
if (140, 4)
i (140, 7)
< (140, 9)
text (140, 11)
. (140, 15)
Length (140, 16)
&& (140, 23)
text (140, 26)
. (140, 30)
[ (140, 31)
i (140, 32)
] (140, 33)
|> (140, 35)
charIsOp (140, 38)
then (140, 47)
go (141, 6)
( (141, 9)
i (141, 10)
+ (141, 12)
1 (141, 14)
) (141, 15)
else (142, 4)
i (143, 6)
go (144, 2)
i (144, 5)
let (146, 0)
lookIdent (146, 4)
( (146, 14)
text (146, 15)
: (146, 19)
string (146, 21)
) (146, 27)
( (146, 29)
i (146, 30)
: (146, 31)
int (146, 33)
) (146, 36)
= (146, 38)
text (147, 2)
. (147, 6)
[ (147, 7)
i (147, 8)
] (147, 9)
|> (147, 11)
charIsIdent (147, 14)
&& (148, 2)
text (148, 5)
. (148, 9)
[ (148, 10)
i (148, 11)
] (148, 12)
|> (148, 14)
charIsDigit (148, 17)
|> (148, 29)
not (148, 32)
let (150, 0)
scanIdent (150, 4)
( (150, 14)
text (150, 15)
: (150, 19)
string (150, 21)
) (150, 27)
( (150, 29)
i (150, 30)
: (150, 31)
int (150, 33)
) (150, 36)
= (150, 38)
assert (151, 2)
( (151, 9)
lookIdent (151, 10)
text (151, 20)
i (151, 25)
) (151, 26)
let (152, 2)
rec (152, 6)
go (152, 10)
i (152, 13)
= (152, 15)
if (153, 4)
i (153, 7)
< (153, 9)
text (153, 11)
. (153, 15)
Length (153, 16)
&& (153, 23)
text (153, 26)
. (153, 30)
[ (153, 31)
i (153, 32)
] (153, 33)
|> (153, 35)
charIsIdent (153, 38)
then (153, 50)
go (154, 6)
( (154, 9)
i (154, 10)
+ (154, 12)
1 (154, 14)
) (154, 15)
else (155, 4)
i (156, 6)
go (157, 2)
i (157, 5)
let (159, 0)
lookIntLit (159, 4)
( (159, 15)
text (159, 16)
: (159, 20)
string (159, 22)
) (159, 28)
( (159, 30)
i (159, 31)
: (159, 32)
int (159, 34)
) (159, 37)
= (159, 39)
text (160, 2)
. (160, 6)
[ (160, 7)
i (160, 8)
] (160, 9)
|> (160, 11)
charIsDigit (160, 14)
let (162, 0)
scanIntLit (162, 4)
( (162, 15)
text (162, 16)
: (162, 20)
string (162, 22)
) (162, 28)
( (162, 30)
i (162, 31)
: (162, 32)
int (162, 34)
) (162, 37)
= (162, 39)
assert (163, 2)
( (163, 9)
lookIntLit (163, 10)
text (163, 21)
i (163, 26)
) (163, 27)
let (164, 2)
rec (164, 6)
go (164, 10)
i (164, 13)
= (164, 15)
if (165, 4)
i (165, 7)
< (165, 9)
text (165, 11)
. (165, 15)
Length (165, 16)
&& (165, 23)
text (165, 26)
. (165, 30)
[ (165, 31)
i (165, 32)
] (165, 33)
|> (165, 35)
charIsDigit (165, 38)
then (165, 50)
go (166, 6)
( (166, 9)
i (166, 10)
+ (166, 12)
1 (166, 14)
) (166, 15)
else (167, 4)
i (168, 6)
go (169, 2)
i (169, 5)
let (171, 0)
lookCharLit (171, 4)
( (171, 16)
text (171, 17)
: (171, 21)
string (171, 23)
) (171, 29)
( (171, 31)
i (171, 32)
: (171, 33)
int (171, 35)
) (171, 38)
= (171, 40)
text (172, 2)
. (172, 6)
[ (172, 7)
i (172, 8)
] (172, 9)
= (172, 11)
'\'' (172, 13)
let (174, 0)
scanCharLit (174, 4)
( (174, 16)
text (174, 17)
: (174, 21)
string (174, 23)
) (174, 29)
( (174, 31)
i (174, 32)
: (174, 33)
int (174, 35)
) (174, 38)
= (174, 40)
assert (175, 2)
( (175, 9)
lookCharLit (175, 10)
text (175, 22)
i (175, 27)
) (175, 28)
let (176, 2)
rec (176, 6)
go (176, 10)
i (176, 13)
= (176, 15)
if (177, 4)
i (177, 7)
+ (177, 9)
1 (177, 11)
< (177, 13)
text (177, 15)
. (177, 19)
Length (177, 20)
&& (177, 27)
text (177, 30)
. (177, 34)
[ (177, 35)
i (177, 36)
] (177, 37)
= (177, 39)
'\\' (177, 41)
then (177, 46)
go (179, 6)
( (179, 9)
i (179, 10)
+ (179, 12)
2 (179, 14)
) (179, 15)
else (180, 4)
if (180, 9)
i (180, 12)
< (180, 14)
text (180, 16)
. (180, 20)
Length (180, 21)
&& (180, 28)
text (180, 31)
. (180, 35)
[ (180, 36)
i (180, 37)
] (180, 38)
= (180, 40)
'\'' (180, 42)
then (180, 47)
true (182, 6)
, (182, 10)
i (182, 12)
+ (182, 14)
1 (182, 16)
else (183, 4)
if (183, 9)
i (183, 12)
< (183, 14)
text (183, 16)
. (183, 20)
Length (183, 21)
&& (183, 28)
text (183, 31)
. (183, 35)
[ (183, 36)
i (183, 37)
] (183, 38)
<> (183, 40)
'\n' (183, 43)
then (183, 48)
go (185, 6)
( (185, 9)
i (185, 10)
+ (185, 12)
1 (185, 14)
) (185, 15)
else (186, 4)
assert (188, 6)
( (188, 13)
i (188, 14)
= (188, 16)
text (188, 18)
. (188, 22)
Length (188, 23)
|| (188, 30)
text (188, 33)
. (188, 37)
[ (188, 38)
i (188, 39)
] (188, 40)
= (188, 42)
'\n' (188, 44)
) (188, 48)
false (189, 6)
, (189, 11)
i (189, 13)
go (190, 2)
( (190, 5)
i (190, 6)
+ (190, 8)
1 (190, 10)
) (190, 11)
let (192, 0)
lookStrLit (192, 4)
( (192, 15)
text (192, 16)
: (192, 20)
string (192, 22)
) (192, 28)
( (192, 30)
i (192, 31)
: (192, 32)
int (192, 34)
) (192, 37)
= (192, 39)
text (193, 2)
. (193, 6)
[ (193, 7)
i (193, 8)
] (193, 9)
= (193, 11)
'\"' (193, 13)
let (195, 0)
scanStrLit (195, 4)
( (195, 15)
text (195, 16)
: (195, 20)
string (195, 22)
) (195, 28)
( (195, 30)
i (195, 31)
: (195, 32)
int (195, 34)
) (195, 37)
= (195, 39)
assert (196, 2)
( (196, 9)
lookStrLit (196, 10)
text (196, 21)
i (196, 26)
) (196, 27)
let (197, 2)
rec (197, 6)
go (197, 10)
i (197, 13)
= (197, 15)
if (198, 4)
i (198, 7)
+ (198, 9)
1 (198, 11)
< (198, 13)
text (198, 15)
. (198, 19)
Length (198, 20)
&& (198, 27)
text (198, 30)
. (198, 34)
[ (198, 35)
i (198, 36)
] (198, 37)
= (198, 39)
'\\' (198, 41)
then (198, 46)
go (200, 6)
( (200, 9)
i (200, 10)
+ (200, 12)
2 (200, 14)
) (200, 15)
else (201, 4)
if (201, 9)
i (201, 12)
< (201, 14)
text (201, 16)
. (201, 20)
Length (201, 21)
&& (201, 28)
text (201, 31)
. (201, 35)
[ (201, 36)
i (201, 37)
] (201, 38)
= (201, 40)
'\"' (201, 42)
then (201, 46)
true (203, 6)
, (203, 10)
i (203, 12)
+ (203, 14)
1 (203, 16)
else (204, 4)
if (204, 9)
i (204, 12)
< (204, 14)
text (204, 16)
. (204, 20)
Length (204, 21)
&& (204, 28)
text (204, 31)
. (204, 35)
[ (204, 36)
i (204, 37)
] (204, 38)
<> (204, 40)
'\n' (204, 43)
then (204, 48)
go (206, 6)
( (206, 9)
i (206, 10)
+ (206, 12)
1 (206, 14)
) (206, 15)
else (207, 4)
assert (209, 6)
( (209, 13)
i (209, 14)
= (209, 16)
text (209, 18)
. (209, 22)
Length (209, 23)
|| (209, 30)
text (209, 33)
. (209, 37)
[ (209, 38)
i (209, 39)
] (209, 40)
= (209, 42)
'\n' (209, 44)
) (209, 48)
false (210, 6)
, (210, 11)
i (210, 13)
go (211, 2)
( (211, 5)
i (211, 6)
+ (211, 8)
1 (211, 10)
) (211, 11)
let (213, 0)
lookStrLitRaw (213, 4)
( (213, 18)
text (213, 19)
: (213, 23)
string (213, 25)
) (213, 31)
( (213, 33)
i (213, 34)
: (213, 35)
int (213, 37)
) (213, 40)
= (213, 42)
text (214, 2)
|> (214, 7)
strIsFollowedByRawQuotes (214, 10)
i (214, 35)
let (216, 0)
scanStrLitRaw (216, 4)
( (216, 18)
text (216, 19)
: (216, 23)
string (216, 25)
) (216, 31)
( (216, 33)
i (216, 34)
: (216, 35)
int (216, 37)
) (216, 40)
= (216, 42)
assert (217, 2)
( (217, 9)
lookStrLitRaw (217, 10)
text (217, 24)
i (217, 29)
) (217, 30)
let (218, 2)
rec (218, 6)
go (218, 10)
i (218, 13)
= (218, 15)
if (219, 4)
text (219, 7)
|> (219, 12)
strIsFollowedByRawQuotes (219, 15)
i (219, 40)
then (219, 42)
true (220, 6)
, (220, 10)
i (220, 12)
+ (220, 14)
3 (220, 16)
else (221, 4)
if (221, 9)
i (221, 12)
+ (221, 14)
1 (221, 16)
< (221, 18)
text (221, 20)
. (221, 24)
Length (221, 25)
then (221, 32)
go (222, 6)
( (222, 9)
i (222, 10)
+ (222, 12)
1 (222, 14)
) (222, 15)
else (223, 4)
assert (224, 6)
( (224, 13)
i (224, 14)
= (224, 16)
text (224, 18)
. (224, 22)
Length (224, 23)
) (224, 29)
false (225, 6)
, (225, 11)
i (225, 13)
go (226, 2)
( (226, 5)
i (226, 6)
+ (226, 8)
3 (226, 10)
) (226, 11)
let (232, 0)
tokenFromIdent (232, 4)
( (232, 19)
text (232, 20)
: (232, 24)
string (232, 26)
) (232, 32)
l (232, 34)
r (232, 36)
: (232, 37)
Token (232, 39)
= (232, 45)
match (233, 2)
text (233, 8)
|> (233, 13)
strSlice (233, 16)
l (233, 25)
r (233, 27)
with (233, 29)
| (234, 2)
"true" (234, 4)
-> (234, 11)
Token (235, 4)
. (235, 9)
Bool (235, 10)
true (235, 15)
| (236, 2)
"false" (236, 4)
-> (236, 12)
Token (237, 4)
. (237, 9)
Bool (237, 10)
false (237, 15)
| (238, 2)
"do" (238, 4)
-> (238, 9)
Token (239, 4)
. (239, 9)
Do (239, 10)
| (240, 2)
"let" (240, 4)
-> (240, 10)
Token (241, 4)
. (241, 9)
Let (241, 10)
| (242, 2)
"if" (242, 4)
-> (242, 9)
Token (243, 4)
. (243, 9)
If (243, 10)
| (244, 2)
"then" (244, 4)
-> (244, 11)
Token (245, 4)
. (245, 9)
Then (245, 10)
| (246, 2)
"else" (246, 4)
-> (246, 11)
Token (247, 4)
. (247, 9)
Else (247, 10)
| (248, 2)
"match" (248, 4)
-> (248, 12)
Token (249, 4)
. (249, 9)
Match (249, 10)
| (250, 2)
"with" (250, 4)
-> (250, 11)
Token (251, 4)
. (251, 9)
With (251, 10)
| (252, 2)
"as" (252, 4)
-> (252, 9)
Token (253, 4)
. (253, 9)
As (253, 10)
| (254, 2)
"when" (254, 4)
-> (254, 11)
Token (255, 4)
. (255, 9)
When (255, 10)
| (256, 2)
"rec" (256, 4)
-> (256, 10)
Token (257, 4)
. (257, 9)
Rec (257, 10)
| (258, 2)
"private" (258, 4)
-> (258, 14)
Token (259, 4)
. (259, 9)
Private (259, 10)
| (260, 2)
"internal" (260, 4)
-> (260, 15)
Token (261, 4)
. (261, 9)
Internal (261, 10)
| (262, 2)
"public" (262, 4)
-> (262, 13)
Token (263, 4)
. (263, 9)
Public (263, 10)
| (264, 2)
"module" (264, 4)
-> (264, 13)
Token (265, 4)
. (265, 9)
Module (265, 10)
| (266, 2)
"namespace" (266, 4)
-> (266, 16)
Token (267, 4)
. (267, 9)
Namespace (267, 10)
| (268, 2)
"open" (268, 4)
-> (268, 11)
Token (269, 4)
. (269, 9)
Open (269, 10)
| (270, 2)
"type" (270, 4)
-> (270, 11)
Token (271, 4)
. (271, 9)
Type (271, 10)
| (272, 2)
"of" (272, 4)
-> (272, 9)
Token (273, 4)
. (273, 9)
Of (273, 10)
| (274, 2)
"fun" (274, 4)
-> (274, 10)
Token (275, 4)
. (275, 9)
Fun (275, 10)
| (276, 2)
"in" (276, 4)
-> (276, 9)
Token (277, 4)
. (277, 9)
In (277, 10)
| (278, 2)
s (278, 4)
-> (278, 6)
Token (279, 4)
. (279, 9)
Ident (279, 10)
s (279, 16)
let (281, 0)
tokenFromOp (281, 4)
( (281, 16)
text (281, 17)
: (281, 21)
string (281, 23)
) (281, 29)
l (281, 31)
r (281, 33)
: (281, 34)
Token (281, 36)
= (281, 42)
match (282, 2)
text (282, 8)
|> (282, 13)
strSlice (282, 16)
l (282, 25)
r (282, 27)
with (282, 29)
| (283, 2)
"&" (283, 4)
-> (283, 8)
Token (284, 4)
. (284, 9)
Amp (284, 10)
| (285, 2)
"&&" (285, 4)
-> (285, 9)
Token (286, 4)
. (286, 9)
AmpAmp (286, 10)
| (287, 2)
"->" (287, 4)
-> (287, 9)
Token (288, 4)
. (288, 9)
Arrow (288, 10)
| (289, 2)
":" (289, 4)
-> (289, 8)
Token (290, 4)
. (290, 9)
Colon (290, 10)
| (291, 2)
"::" (291, 4)
-> (291, 9)
Token (292, 4)
. (292, 9)
ColonColon (292, 10)
| (293, 2)
"." (293, 4)
-> (293, 8)
Token (294, 4)
. (294, 9)
Dot (294, 10)
| (295, 2)
".." (295, 4)
-> (295, 9)
Token (296, 4)
. (296, 9)
DotDot (296, 10)
| (297, 2)
"=" (297, 4)
-> (297, 8)
Token (298, 4)
. (298, 9)
Eq (298, 10)
| (299, 2)
">" (299, 4)
-> (299, 8)
Token (300, 4)
. (300, 9)
Gt (300, 10)
| (301, 2)
">=" (301, 4)
-> (301, 9)
Token (302, 4)
. (302, 9)
GtEq (302, 10)
| (303, 2)
"<" (303, 4)
-> (303, 8)
Token (304, 4)
. (304, 9)
Lt (304, 10)
| (305, 2)
"<=" (305, 4)
-> (305, 9)
Token (306, 4)
. (306, 9)
LtEq (306, 10)
| (307, 2)
"<>" (307, 4)
-> (307, 9)
Token (308, 4)
. (308, 9)
LtGt (308, 10)
| (309, 2)
"-" (309, 4)
-> (309, 8)
Token (310, 4)
. (310, 9)
Minus (310, 10)
| (311, 2)
"%" (311, 4)
-> (311, 8)
Token (312, 4)
. (312, 9)
Percent (312, 10)
| (313, 2)
"|" (313, 4)
-> (313, 8)
Token (314, 4)
. (314, 9)
Pipe (314, 10)
| (315, 2)
"|>" (315, 4)
-> (315, 9)
Token (316, 4)
. (316, 9)
PipeGt (316, 10)
| (317, 2)
"||" (317, 4)
-> (317, 9)
Token (318, 4)
. (318, 9)
PipePipe (318, 10)
| (319, 2)
"+" (319, 4)
-> (319, 8)
Token (320, 4)
. (320, 9)
Plus (320, 10)
| (321, 2)
";" (321, 4)
-> (321, 8)
Token (322, 4)
. (322, 9)
Semi (322, 10)
| (323, 2)
"*" (323, 4)
-> (323, 8)
Token (324, 4)
. (324, 9)
Star (324, 10)
| (325, 2)
"/" (325, 4)
-> (325, 8)
Token (326, 4)
. (326, 9)
Slash (326, 10)
| (327, 2)
_ (327, 4)
-> (327, 6)
Token (328, 4)
. (328, 9)
Error (328, 10)
let (330, 0)
tokenFromPun (330, 4)
( (330, 17)
text (330, 18)
: (330, 22)
string (330, 24)
) (330, 30)
( (330, 32)
l (330, 33)
: (330, 34)
int (330, 36)
) (330, 39)
r (330, 41)
= (330, 43)
assert (331, 2)
( (331, 9)
r (331, 10)
- (331, 12)
l (331, 14)
= (331, 16)
1 (331, 18)
) (331, 19)
match (332, 2)
text (332, 8)
. (332, 12)
[ (332, 13)
l (332, 14)
] (332, 15)
with (332, 17)
| (333, 2)
',' (333, 4)
-> (333, 8)
Token (334, 4)
. (334, 9)
Comma (334, 10)
| (335, 2)
'(' (335, 4)
-> (335, 8)
Token (336, 4)
. (336, 9)
ParenL (336, 10)
| (337, 2)
')' (337, 4)
-> (337, 8)
Token (338, 4)
. (338, 9)
ParenR (338, 10)
| (339, 2)
'[' (339, 4)
-> (339, 8)
Token (340, 4)
. (340, 9)
BracketL (340, 10)
| (341, 2)
']' (341, 4)
-> (341, 8)
Token (342, 4)
. (342, 9)
BracketR (342, 10)
| (343, 2)
_ (343, 4)
-> (343, 6)
failwith (344, 4)
"NEVER! charIsPun is broken" (344, 13)
let (346, 0)
tokenFromIntLit (346, 4)
( (346, 20)
text (346, 21)
: (346, 25)
string (346, 27)
) (346, 33)
l (346, 35)
r (346, 37)
: (346, 38)
Token (346, 40)
= (346, 46)
let (347, 2)
value (347, 6)
= (347, 12)
text (347, 14)
|> (347, 19)
strSlice (347, 22)
l (347, 31)
r (347, 33)
|> (347, 35)
int (347, 38)
Token (348, 2)
. (348, 7)
Int (348, 8)
value (348, 12)
let (350, 0)
tokenFromCharLit (350, 4)
( (350, 21)
text (350, 22)
: (350, 26)
string (350, 28)
) (350, 34)
l (350, 36)
r (350, 38)
: (350, 39)
Token (350, 41)
= (350, 47)
assert (351, 2)
( (351, 9)
l (351, 10)
+ (351, 12)
2 (351, 14)
<= (351, 16)
r (351, 19)
&& (351, 21)
text (351, 24)
. (351, 28)
[ (351, 29)
l (351, 30)
] (351, 31)
= (351, 33)
'\'' (351, 35)
&& (351, 40)
text (351, 43)
. (351, 47)
[ (351, 48)
r (351, 49)
- (351, 51)
1 (351, 53)
] (351, 54)
= (351, 56)
'\'' (351, 58)
) (351, 62)
let (354, 2)
i (354, 6)
= (354, 8)
l (354, 10)
+ (354, 12)
1 (354, 14)
let (355, 2)
value (355, 6)
= (355, 12)
match (356, 4)
text (356, 10)
. (356, 14)
[ (356, 15)
i (356, 16)
] (356, 17)
with (356, 19)
| (357, 4)
'\\' (357, 6)
-> (357, 11)
match (358, 6)
text (358, 12)
. (358, 16)
[ (358, 17)
i (358, 18)
+ (358, 20)
1 (358, 22)
] (358, 23)
with (358, 25)
| (359, 6)
'x' (359, 8)
-> (359, 12)
charNull (360, 8)
| (361, 6)
't' (361, 8)
-> (361, 12)
'\t' (362, 8)
| (363, 6)
'r' (363, 8)
-> (363, 12)
'\r' (364, 8)
| (365, 6)
'n' (365, 8)
-> (365, 12)
'\n' (366, 8)
| (367, 6)
c (367, 8)
-> (367, 10)
c (368, 8)
| (369, 4)
c (369, 6)
-> (369, 8)
c (370, 6)
Token (372, 2)
. (372, 7)
Char (372, 8)
value (372, 13)
let (374, 0)
tokenFromStrLit (374, 4)
( (374, 20)
text (374, 21)
: (374, 25)
string (374, 27)
) (374, 33)
l (374, 35)
r (374, 37)
: (374, 38)
Token (374, 40)
= (374, 46)
assert (375, 2)
( (375, 9)
l (375, 10)
+ (375, 12)
2 (375, 14)
<= (375, 16)
r (375, 19)
&& (375, 21)
text (375, 24)
. (375, 28)
[ (375, 29)
l (375, 30)
] (375, 31)
= (375, 33)
'\"' (375, 35)
&& (375, 39)
text (375, 42)
. (375, 46)
[ (375, 47)
r (375, 48)
- (375, 50)
1 (375, 52)
] (375, 53)
= (375, 55)
'\"' (375, 57)
) (375, 60)
let (379, 2)
rec (379, 6)
go (379, 10)
acc (379, 13)
i (379, 17)
= (379, 19)
let (381, 4)
rec (381, 8)
next (381, 12)
i (381, 17)
= (381, 19)
if (382, 6)
i (382, 9)
= (382, 11)
r (382, 13)
- (382, 15)
1 (382, 17)
|| (382, 19)
text (382, 22)
. (382, 26)
[ (382, 27)
i (382, 28)
] (382, 29)
= (382, 31)
'\\' (382, 33)
then (382, 38)
i (383, 8)
else (384, 6)
next (385, 8)
( (385, 13)
i (385, 14)
+ (385, 16)
1 (385, 18)
) (385, 19)
let (386, 4)
endIndex (386, 8)
= (386, 17)
next (386, 19)
i (386, 24)
let (387, 4)
acc (387, 8)
= (387, 12)
( (387, 14)
text (387, 15)
|> (387, 20)
strSlice (387, 23)
i (387, 32)
endIndex (387, 34)
) (387, 42)
:: (387, 44)
acc (387, 47)
let (388, 4)
i (388, 8)
= (388, 10)
endIndex (388, 12)
if (391, 4)
i (391, 7)
= (391, 9)
r (391, 11)
- (391, 13)
1 (391, 15)
then (391, 17)
acc (392, 6)
|> (392, 10)
listRev (392, 13)
|> (392, 21)
strConcat (392, 24)
else (393, 4)
assert (394, 6)
( (394, 13)
text (394, 14)
. (394, 18)
[ (394, 19)
i (394, 20)
] (394, 21)
= (394, 23)
'\\' (394, 25)
) (394, 29)
match (395, 6)
text (395, 12)
. (395, 16)
[ (395, 17)
i (395, 18)
+ (395, 20)
1 (395, 22)
] (395, 23)
with (395, 25)
| (396, 6)
'x' (396, 8)
-> (396, 12)
go (397, 8)
( (397, 11)
"\0" (397, 12)
:: (397, 19)
acc (397, 22)
) (397, 25)
( (397, 27)
i (397, 28)
+ (397, 30)
4 (397, 32)
) (397, 33)
| (398, 6)
't' (398, 8)
-> (398, 12)
go (399, 8)
( (399, 11)
"\t" (399, 12)
:: (399, 17)
acc (399, 20)
) (399, 23)
( (399, 25)
i (399, 26)
+ (399, 28)
2 (399, 30)
) (399, 31)
| (400, 6)
'r' (400, 8)
-> (400, 12)
go (401, 8)
( (401, 11)
"\r" (401, 12)
:: (401, 17)
acc (401, 20)
) (401, 23)
( (401, 25)
i (401, 26)
+ (401, 28)
2 (401, 30)
) (401, 31)
| (402, 6)
'n' (402, 8)
-> (402, 12)
go (403, 8)
( (403, 11)
"\n" (403, 12)
:: (403, 17)
acc (403, 20)
) (403, 23)
( (403, 25)
i (403, 26)
+ (403, 28)
2 (403, 30)
) (403, 31)
| (404, 6)
_ (404, 8)
-> (404, 10)
go (405, 8)
( (405, 11)
( (405, 12)
text (405, 13)
|> (405, 18)
strSlice (405, 21)
( (405, 30)
i (405, 31)
+ (405, 33)
1 (405, 35)
) (405, 36)
( (405, 38)
i (405, 39)
+ (405, 41)
2 (405, 43)
) (405, 44)
) (405, 45)
:: (405, 47)
acc (405, 50)
) (405, 53)
( (405, 55)
i (405, 56)
+ (405, 58)
2 (405, 60)
) (405, 61)
let (406, 2)
value (406, 6)
= (406, 12)
go (406, 14)
[ (406, 17)
] (406, 18)
( (406, 20)
l (406, 21)
+ (406, 23)
1 (406, 25)
) (406, 26)
Token (408, 2)
. (408, 7)
Str (408, 8)
value (408, 12)
let (410, 0)
tokenFromStrLitRaw (410, 4)
( (410, 23)
text (410, 24)
: (410, 28)
string (410, 30)
) (410, 36)
l (410, 38)
r (410, 40)
= (410, 42)
assert (411, 2)
( (411, 9)
l (411, 10)
+ (411, 12)
6 (411, 14)
<= (411, 16)
r (411, 19)
&& (411, 21)
text (411, 24)
|> (411, 29)
strIsFollowedByRawQuotes (411, 32)
l (411, 57)
&& (411, 59)
text (411, 62)
|> (411, 67)
strIsFollowedByRawQuotes (411, 70)
( (411, 95)
r (411, 96)
- (411, 98)
3 (411, 100)
) (411, 101)
) (411, 102)
Token (412, 2)
. (412, 7)
Str (412, 8)
( (412, 12)
text (412, 13)
|> (412, 18)
strSlice (412, 21)
( (412, 30)
l (412, 31)
+ (412, 33)
3 (412, 35)
) (412, 36)
( (412, 38)
r (412, 39)
- (412, 41)
3 (412, 43)
) (412, 44)
) (412, 45)
let (418, 0)
tokCtxToTextIndex (418, 4)
( (418, 22)
( (418, 23)
text (418, 24)
, (418, 28)
i (418, 30)
, (418, 31)
_ (418, 33)
, (418, 34)
_ (418, 36)
) (418, 37)
: (418, 38)
TokenizeCtx (418, 40)
) (418, 51)
= (418, 53)
text (419, 2)
, (419, 6)
i (419, 8)
let (423, 0)
tokCtxSkip (423, 4)
r (423, 15)
( (423, 17)
( (423, 18)
text (423, 19)
, (423, 23)
i (423, 25)
, (423, 26)
loc (423, 28)
, (423, 31)
acc (423, 33)
) (423, 36)
: (423, 37)
TokenizeCtx (423, 39)
) (423, 50)
: (423, 51)
TokenizeCtx (423, 53)
= (423, 65)
assert (424, 2)
( (424, 9)
0 (424, 10)
<= (424, 12)
i (424, 15)
&& (424, 17)
i (424, 20)
<= (424, 22)
r (424, 25)
&& (424, 27)
r (424, 30)
<= (424, 32)
text (424, 35)
. (424, 39)
Length (424, 40)
) (424, 46)
let (425, 2)
newLoc (425, 6)
= (425, 13)
loc (425, 15)
|> (425, 19)
locShift (425, 22)
text (425, 31)
i (425, 36)
r (425, 38)
text (426, 2)
, (426, 6)
r (426, 8)
, (426, 9)
newLoc (426, 11)
, (426, 17)
acc (426, 19)
let (430, 0)
tokCtxPush (430, 4)
kind (430, 15)
r (430, 20)
( (430, 22)
( (430, 23)
text (430, 24)
, (430, 28)
i (430, 30)
, (430, 31)
loc (430, 33)
, (430, 36)
acc (430, 38)
) (430, 41)
: (430, 42)
TokenizeCtx (430, 44)
) (430, 55)
: (430, 56)
TokenizeCtx (430, 58)
= (430, 70)
assert (431, 2)
( (431, 9)
0 (431, 10)
<= (431, 12)
i (431, 15)
&& (431, 17)
i (431, 20)
<= (431, 22)
r (431, 25)
&& (431, 27)
r (431, 30)
<= (431, 32)
text (431, 35)
. (431, 39)
Length (431, 40)
) (431, 46)
let (432, 2)
newAcc (432, 6)
= (432, 13)
( (432, 15)
kind (432, 16)
, (432, 20)
loc (432, 22)
) (432, 25)
:: (432, 27)
acc (432, 30)
let (433, 2)
newLoc (433, 6)
= (433, 13)
loc (433, 15)
|> (433, 19)
locShift (433, 22)
text (433, 31)
i (433, 36)
r (433, 38)
text (434, 2)
, (434, 6)
r (434, 8)
, (434, 9)
newLoc (434, 11)
, (434, 17)
newAcc (434, 19)
let (436, 0)
tokEof (436, 4)
( (436, 11)
( (436, 12)
text (436, 13)
, (436, 17)
i (436, 19)
, (436, 20)
_ (436, 22)
, (436, 23)
acc (436, 25)
) (436, 28)
: (436, 29)
TokenizeCtx (436, 31)
) (436, 42)
= (436, 44)
assert (437, 2)
( (437, 9)
lookEof (437, 10)
text (437, 18)
i (437, 23)
) (437, 24)
acc (438, 2)
|> (438, 6)
listRev (438, 9)
let (440, 0)
tokError (440, 4)
t (440, 13)
= (440, 15)
let (441, 2)
text (441, 6)
, (441, 10)
i (441, 12)
= (441, 14)
t (441, 16)
|> (441, 18)
tokCtxToTextIndex (441, 21)
let (442, 2)
r (442, 6)
= (442, 8)
scanError (442, 10)
text (442, 20)
i (442, 25)
t (443, 2)
|> (443, 4)
tokCtxSkip (443, 7)
r (443, 18)
let (445, 0)
tokComment (445, 4)
( (445, 15)
t (445, 16)
: (445, 17)
TokenizeCtx (445, 19)
) (445, 30)
= (445, 32)
let (446, 2)
text (446, 6)
, (446, 10)
i (446, 12)
= (446, 14)
t (446, 16)
|> (446, 18)
tokCtxToTextIndex (446, 21)
let (447, 2)
r (447, 6)
= (447, 8)
scanLine (447, 10)
text (447, 19)
i (447, 24)
t (448, 2)
|> (448, 4)
tokCtxSkip (448, 7)
r (448, 18)
let (450, 0)
tokSpace (450, 4)
( (450, 13)
t (450, 14)
: (450, 15)
TokenizeCtx (450, 17)
) (450, 28)
= (450, 30)
let (451, 2)
text (451, 6)
, (451, 10)
i (451, 12)
= (451, 14)
t (451, 16)
|> (451, 18)
tokCtxToTextIndex (451, 21)
let (452, 2)
r (452, 6)
= (452, 8)
scanSpace (452, 10)
text (452, 20)
i (452, 25)
t (453, 2)
|> (453, 4)
tokCtxSkip (453, 7)
r (453, 18)
let (455, 0)
tokPun (455, 4)
t (455, 11)
= (455, 13)
let (456, 2)
text (456, 6)
, (456, 10)
i (456, 12)
= (456, 14)
t (456, 16)
|> (456, 18)
tokCtxToTextIndex (456, 21)
let (457, 2)
r (457, 6)
= (457, 8)
scanPun (457, 10)
text (457, 18)
i (457, 23)
let (458, 2)
token (458, 6)
= (458, 12)
tokenFromPun (458, 14)
text (458, 27)
i (458, 32)
r (458, 34)
t (459, 2)
|> (459, 4)
tokCtxPush (459, 7)
token (459, 18)
r (459, 24)
let (461, 0)
tokOp (461, 4)
t (461, 10)
= (461, 12)
let (462, 2)
text (462, 6)
, (462, 10)
i (462, 12)
= (462, 14)
t (462, 16)
|> (462, 18)
tokCtxToTextIndex (462, 21)
let (463, 2)
r (463, 6)
= (463, 8)
scanOp (463, 10)
text (463, 17)
i (463, 22)
let (464, 2)
token (464, 6)
= (464, 12)
tokenFromOp (464, 14)
text (464, 26)
i (464, 31)
r (464, 33)
t (465, 2)
|> (465, 4)
tokCtxPush (465, 7)
token (465, 18)
r (465, 24)
let (467, 0)
tokIdent (467, 4)
t (467, 13)
= (467, 15)
let (468, 2)
text (468, 6)
, (468, 10)
i (468, 12)
= (468, 14)
t (468, 16)
|> (468, 18)
tokCtxToTextIndex (468, 21)
let (469, 2)
r (469, 6)
= (469, 8)
scanIdent (469, 10)
text (469, 20)
i (469, 25)
let (470, 2)
token (470, 6)
= (470, 12)
tokenFromIdent (470, 14)
text (470, 29)
i (470, 34)
r (470, 36)
t (471, 2)
|> (471, 4)
tokCtxPush (471, 7)
token (471, 18)
r (471, 24)
let (473, 0)
tokIntLit (473, 4)
t (473, 14)
= (473, 16)
let (474, 2)
text (474, 6)
, (474, 10)
i (474, 12)
= (474, 14)
t (474, 16)
|> (474, 18)
tokCtxToTextIndex (474, 21)
let (475, 2)
r (475, 6)
= (475, 8)
scanIntLit (475, 10)
text (475, 21)
i (475, 26)
let (476, 2)
token (476, 6)
= (476, 12)
tokenFromIntLit (476, 14)
text (476, 30)
i (476, 35)
r (476, 37)
t (477, 2)
|> (477, 4)
tokCtxPush (477, 7)
token (477, 18)
r (477, 24)
let (479, 0)
tokCharLit (479, 4)
t (479, 15)
= (479, 17)
let (480, 2)
text (480, 6)
, (480, 10)
i (480, 12)
= (480, 14)
t (480, 16)
|> (480, 18)
tokCtxToTextIndex (480, 21)
let (481, 2)
ok (481, 6)
, (481, 8)
r (481, 10)
= (481, 12)
scanCharLit (481, 14)
text (481, 26)
i (481, 31)
let (482, 2)
token (482, 6)
= (482, 12)
if (482, 14)
ok (482, 17)
then (482, 20)
tokenFromCharLit (482, 25)
text (482, 42)
i (482, 47)
r (482, 49)
else (482, 51)
Token (482, 56)
. (482, 61)
Error (482, 62)
t (483, 2)
|> (483, 4)
tokCtxPush (483, 7)
token (483, 18)
r (483, 24)
let (485, 0)
tokStrLit (485, 4)
t (485, 14)
= (485, 16)
let (486, 2)
text (486, 6)
, (486, 10)
i (486, 12)
= (486, 14)
t (486, 16)
|> (486, 18)
tokCtxToTextIndex (486, 21)
let (487, 2)
ok (487, 6)
, (487, 8)
r (487, 10)
= (487, 12)
scanStrLit (487, 14)
text (487, 25)
i (487, 30)
let (488, 2)
token (488, 6)
= (488, 12)
if (488, 14)
ok (488, 17)
then (488, 20)
tokenFromStrLit (488, 25)
text (488, 41)
i (488, 46)
r (488, 48)
else (488, 50)
Token (488, 55)
. (488, 60)
Error (488, 61)
t (489, 2)
|> (489, 4)
tokCtxPush (489, 7)
token (489, 18)
r (489, 24)
let (491, 0)
tokStrLitRaw (491, 4)
t (491, 17)
= (491, 19)
let (492, 2)
text (492, 6)
, (492, 10)
i (492, 12)
= (492, 14)
t (492, 16)
|> (492, 18)
tokCtxToTextIndex (492, 21)
let (493, 2)
ok (493, 6)
, (493, 8)
r (493, 10)
= (493, 12)
scanStrLitRaw (493, 14)
text (493, 28)
i (493, 33)
let (494, 2)
token (494, 6)
= (494, 12)
if (494, 14)
ok (494, 17)
then (494, 20)
tokenFromStrLitRaw (494, 25)
text (494, 44)
i (494, 49)
r (494, 51)
else (494, 53)
Token (494, 58)
. (494, 63)
Error (494, 64)
t (495, 2)
|> (495, 4)
tokCtxPush (495, 7)
token (495, 18)
r (495, 24)
let (497, 0)
tokenize (497, 4)
( (497, 13)
text (497, 14)
: (497, 18)
string (497, 20)
) (497, 26)
: (497, 27)
( (497, 29)
Token (497, 30)
* (497, 36)
Loc (497, 38)
) (497, 41)
list (497, 43)
= (497, 48)
let (498, 2)
rec (498, 6)
go (498, 10)
t (498, 13)
= (498, 15)
let (499, 4)
text (499, 8)
, (499, 12)
i (499, 14)
= (499, 16)
t (499, 18)
|> (499, 20)
tokCtxToTextIndex (499, 23)
if (501, 4)
lookEof (501, 7)
text (501, 15)
i (501, 20)
then (501, 22)
t (502, 6)
|> (502, 8)
tokEof (502, 11)
else (504, 4)
if (504, 9)
lookComment (504, 12)
text (504, 24)
i (504, 29)
then (504, 31)
t (505, 6)
|> (505, 8)
tokComment (505, 11)
|> (505, 22)
go (505, 25)
else (507, 4)
if (507, 9)
lookSpace (507, 12)
text (507, 22)
i (507, 27)
then (507, 29)
t (508, 6)
|> (508, 8)
tokSpace (508, 11)
|> (508, 20)
go (508, 23)
else (510, 4)
if (510, 9)
lookOp (510, 12)
text (510, 19)
i (510, 24)
then (510, 26)
t (511, 6)
|> (511, 8)
tokOp (511, 11)
|> (511, 17)
go (511, 20)
else (513, 4)
if (513, 9)
lookIntLit (513, 12)
text (513, 23)
i (513, 28)
then (513, 30)
t (514, 6)
|> (514, 8)
tokIntLit (514, 11)
|> (514, 21)
go (514, 24)
else (516, 4)
if (516, 9)
lookIdent (516, 12)
text (516, 22)
i (516, 27)
then (516, 29)
t (517, 6)
|> (517, 8)
tokIdent (517, 11)
|> (517, 20)
go (517, 23)
else (519, 4)
if (519, 9)
lookCharLit (519, 12)
text (519, 24)
i (519, 29)
then (519, 31)
t (520, 6)
|> (520, 8)
tokCharLit (520, 11)
|> (520, 22)
go (520, 25)
else (522, 4)
if (522, 9)
lookStrLitRaw (522, 12)
text (522, 26)
i (522, 31)
then (522, 33)
t (523, 6)
|> (523, 8)
tokStrLitRaw (523, 11)
|> (523, 24)
go (523, 27)
else (525, 4)
if (525, 9)
lookStrLit (525, 12)
text (525, 23)
i (525, 28)
then (525, 30)
t (526, 6)
|> (526, 8)
tokStrLit (526, 11)
|> (526, 21)
go (526, 24)
else (528, 4)
if (528, 9)
lookPun (528, 12)
text (528, 20)
i (528, 25)
then (528, 27)
t (529, 6)
|> (529, 8)
tokPun (529, 11)
|> (529, 18)
go (529, 21)
else (531, 4)
t (532, 6)
|> (532, 8)
tokError (532, 11)
|> (532, 20)
go (532, 23)
go (534, 2)
( (534, 5)
text (534, 6)
, (534, 10)
0 (534, 12)
, (534, 13)
( (534, 15)
0 (534, 16)
, (534, 17)
0 (534, 19)
) (534, 20)
, (534, 21)
[ (534, 23)
] (534, 24)
) (534, 25)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- synonym: TokenizeCtx
  tuple:
  - string
  - int
  - Loc
  - list:
    - tuple:
      - Token
      - Loc
- let:
  - fun:
    - locShift
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - anno:
      - r
      - int
    - anno:
      - tuple:
        - y
        - x
      - Loc
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - l
          - bin:
            - l
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - fun:
        - go
        - y
        - x
        - i
      - if:
        - bin:
          - i
          - r
        - tuple:
          - y
          - x
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - bin:
              - bin:
                - go
                - bin:
                  - y
                  - 1
              - 0
            - bin:
              - i
              - 1
          - bin:
            - bin:
              - bin:
                - go
                - y
              - bin:
                - x
                - 1
            - bin:
              - i
              - 1
      bin:
      - bin:
        - bin:
          - go
          - y
        - x
      - l
  let:
  - anno:
    - charNull
    - char
  - bin:
    - char
    - 0
  let:
  - anno:
    - fun:
      - charIsIdent
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - c
        - \'_\'
      - bin:
        - charIsDigit
        - c
    - bin:
      - charIsAlpha
      - c
  let:
  - anno:
    - fun:
      - charIsOp
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - bin:
              - bin:
                - bin:
                  - bin:
                    - bin:
                      - bin:
                        - bin:
                          - bin:
                            - bin:
                              - bin:
                                - c
                                - \'+\'
                              - bin:
                                - c
                                - \'-\'
                            - bin:
                              - c
                              - \'*\'
                          - bin:
                            - c
                            - \'/\'
                        - bin:
                          - c
                          - \'%\'
                      - bin:
                        - c
                        - \'=\'
                    - bin:
                      - c
                      - \'<\'
                  - bin:
                    - c
                    - \'>\'
                - bin:
                  - c
                  - \'^\'
              - bin:
                - c
                - \'&\'
            - bin:
              - c
              - \'|\'
          - bin:
            - c
            - \':\'
        - bin:
          - c
          - \'@\'
      - bin:
        - c
        - \';\'
    - bin:
      - c
      - \'.\'
  let:
  - anno:
    - fun:
      - charIsPun
      - anno:
        - c
        - char
    - bool
  - bin:
    - bin:
      - bin:
        - bin:
          - bin:
            - c
            - \',\'
          - bin:
            - c
            - \'(\'
        - bin:
          - c
          - \')\'
      - bin:
        - c
        - \'[\'
    - bin:
      - c
      - \']\'
  let:
  - anno:
    - fun:
      - strIsFollowedBy
      - anno:
        - i
        - int
      - anno:
        - prefix
        - string
      - anno:
        - s
        - string
    - bool
  - let:
    - fun:
      - go
      - pi
      - si
    - bin:
      - bin:
        - pi
        - .Length: prefix
      - bin:
        - bin:
          - bin:
            - si
            - .Length: s
          - bin:
            - index: prefix
            - index: s
        - bin:
          - bin:
            - go
            - bin:
              - pi
              - 1
          - bin:
            - si
            - 1
    bin:
    - bin:
      - bin:
        - i
        - .Length: prefix
      - .Length: s
    - bin:
      - bin:
        - go
        - 0
      - i
  let:
  - anno:
    - fun:
      - strIsFollowedByRawQuotes
      - anno:
        - i
        - int
      - anno:
        - s
        - string
    - bool
  - bin:
    - bin:
      - bin:
        - strIsFollowedBy
        - i
      - \"\\\"\\\"\\\"\"
    - s
  let:
  - fun:
    - scanError
    - anno:
      - _
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - 1
  let:
  - fun:
    - lookEof
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - i
    - .Length: text
  let:
  - fun:
    - lookSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsSpace
  let:
  - fun:
    - scanSpace
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookSpace
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsSpace
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookComment
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"//\"
    - bin:
      - text
      - bin:
        - bin:
          - strIsFollowedBy
          - i
        - \"[<\"
  let:
  - fun:
    - scanLine
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookComment
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - i
          - .Length: text
        - i
        - if:
          - bin:
            - index: text
            - \'\\n\'
          - bin:
            - i
            - 1
          - bin:
            - go
            - bin:
              - i
              - 1
      bin:
      - go
      - i
  let:
  - fun:
    - lookPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsPun
  let:
  - fun:
    - scanPun
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookPun
          - text
        - i
    - bin:
      - i
      - 1
  let:
  - fun:
    - lookOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsOp
  let:
  - fun:
    - scanOp
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookOp
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsOp
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - bin:
      - index: text
      - charIsIdent
    - bin:
      - bin:
        - index: text
        - charIsDigit
      - not
  let:
  - fun:
    - scanIdent
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIdent
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsIdent
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - charIsDigit
  let:
  - fun:
    - scanIntLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookIntLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - i
            - .Length: text
          - bin:
            - index: text
            - charIsDigit
        - bin:
          - go
          - bin:
            - i
            - 1
        - i
      bin:
      - go
      - i
  let:
  - fun:
    - lookCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\'\'
  let:
  - fun:
    - scanCharLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookCharLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\'\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - index: text
    - \'\\\"\'
  let:
  - fun:
    - scanStrLit
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLit
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - index: text
            - \'\\\\\'
        - bin:
          - go
          - bin:
            - i
            - 2
        - if:
          - bin:
            - bin:
              - i
              - .Length: text
            - bin:
              - index: text
              - \'\\\"\'
          - tuple:
            - true
            - bin:
              - i
              - 1
          - if:
            - bin:
              - bin:
                - i
                - .Length: text
              - bin:
                - index: text
                - \'\\n\'
            - bin:
              - go
              - bin:
                - i
                - 1
            - semi:
              - bin:
                - assert
                - bin:
                  - bin:
                    - i
                    - .Length: text
                  - bin:
                    - index: text
                    - \'\\n\'
              - tuple:
                - false
                - i
      bin:
      - go
      - bin:
        - i
        - 1
  let:
  - fun:
    - lookStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - bin:
    - text
    - bin:
      - strIsFollowedByRawQuotes
      - i
  let:
  - fun:
    - scanStrLitRaw
    - anno:
      - text
      - string
    - anno:
      - i
      - int
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookStrLitRaw
          - text
        - i
    - let:
      - fun:
        - go
        - i
      - if:
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - i
        - tuple:
          - true
          - bin:
            - i
            - 3
        - if:
          - bin:
            - bin:
              - i
              - 1
            - .Length: text
          - bin:
            - go
            - bin:
              - i
              - 1
          - semi:
            - bin:
              - assert
              - bin:
                - i
                - .Length: text
            - tuple:
              - false
              - i
      bin:
      - go
      - bin:
        - i
        - 3
  let:
  - anno:
    - fun:
      - tokenFromIdent
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"true\"
      - ERROR:
        - missing
        - (235:12)
      bin:
      - .Bool: Token
      - true
    - arm:
      - \"false\"
      - ERROR:
        - missing
        - (237:13)
      bin:
      - .Bool: Token
      - false
    - arm:
      - \"do\"
      - ERROR:
        - missing
        - (239:10)
      .Do: Token
    - arm:
      - \"let\"
      - ERROR:
        - missing
        - (241:11)
      .Let: Token
    - arm:
      - \"if\"
      - ERROR:
        - missing
        - (243:10)
      .If: Token
    - arm:
      - \"then\"
      - ERROR:
        - missing
        - (245:12)
      .Then: Token
    - arm:
      - \"else\"
      - ERROR:
        - missing
        - (247:12)
      .Else: Token
    - arm:
      - \"match\"
      - ERROR:
        - missing
        - (249:13)
      .Match: Token
    - arm:
      - \"with\"
      - ERROR:
        - missing
        - (251:12)
      .With: Token
    - arm:
      - \"as\"
      - ERROR:
        - missing
        - (253:10)
      .As: Token
    - arm:
      - \"when\"
      - ERROR:
        - missing
        - (255:12)
      .When: Token
    - arm:
      - \"rec\"
      - ERROR:
        - missing
        - (257:11)
      .Rec: Token
    - arm:
      - \"private\"
      - ERROR:
        - missing
        - (259:15)
      .Private: Token
    - arm:
      - \"internal\"
      - ERROR:
        - missing
        - (261:16)
      .Internal: Token
    - arm:
      - \"public\"
      - ERROR:
        - missing
        - (263:14)
      .Public: Token
    - arm:
      - \"module\"
      - ERROR:
        - missing
        - (265:14)
      .Module: Token
    - arm:
      - \"namespace\"
      - ERROR:
        - missing
        - (267:17)
      .Namespace: Token
    - arm:
      - \"open\"
      - ERROR:
        - missing
        - (269:12)
      .Open: Token
    - arm:
      - \"type\"
      - ERROR:
        - missing
        - (271:12)
      .Type: Token
    - arm:
      - \"of\"
      - ERROR:
        - missing
        - (273:10)
      .Of: Token
    - arm:
      - \"fun\"
      - ERROR:
        - missing
        - (275:11)
      .Fun: Token
    - arm:
      - \"in\"
      - ERROR:
        - missing
        - (277:10)
      .In: Token
    - arm:
      - s
      - ERROR:
        - missing
        - (279:7)
      bin:
      - .Ident: Token
      - s
  let:
  - anno:
    - fun:
      - tokenFromOp
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - match:
    - bin:
      - text
      - bin:
        - bin:
          - strSlice
          - l
        - r
    - arm:
      - \"&\"
      - ERROR:
        - missing
        - (284:9)
      .Amp: Token
    - arm:
      - \"&&\"
      - ERROR:
        - missing
        - (286:10)
      .AmpAmp: Token
    - arm:
      - \"->\"
      - ERROR:
        - missing
        - (288:10)
      .Arrow: Token
    - arm:
      - \":\"
      - ERROR:
        - missing
        - (290:9)
      .Colon: Token
    - arm:
      - \"::\"
      - ERROR:
        - missing
        - (292:10)
      .ColonColon: Token
    - arm:
      - \".\"
      - ERROR:
        - missing
        - (294:9)
      .Dot: Token
    - arm:
      - \"..\"
      - ERROR:
        - missing
        - (296:10)
      .DotDot: Token
    - arm:
      - \"=\"
      - ERROR:
        - missing
        - (298:9)
      .Eq: Token
    - arm:
      - \">\"
      - ERROR:
        - missing
        - (300:9)
      .Gt: Token
    - arm:
      - \">=\"
      - ERROR:
        - missing
        - (302:10)
      .GtEq: Token
    - arm:
      - \"<\"
      - ERROR:
        - missing
        - (304:9)
      .Lt: Token
    - arm:
      - \"<=\"
      - ERROR:
        - missing
        - (306:10)
      .LtEq: Token
    - arm:
      - \"<>\"
      - ERROR:
        - missing
        - (308:10)
      .LtGt: Token
    - arm:
      - \"-\"
      - ERROR:
        - missing
        - (310:9)
      .Minus: Token
    - arm:
      - \"%\"
      - ERROR:
        - missing
        - (312:9)
      .Percent: Token
    - arm:
      - \"|\"
      - ERROR:
        - missing
        - (314:9)
      .Pipe: Token
    - arm:
      - \"|>\"
      - ERROR:
        - missing
        - (316:10)
      .PipeGt: Token
    - arm:
      - \"||\"
      - ERROR:
        - missing
        - (318:10)
      .PipePipe: Token
    - arm:
      - \"+\"
      - ERROR:
        - missing
        - (320:9)
      .Plus: Token
    - arm:
      - \";\"
      - ERROR:
        - missing
        - (322:9)
      .Semi: Token
    - arm:
      - \"*\"
      - ERROR:
        - missing
        - (324:9)
      .Star: Token
    - arm:
      - \"/\"
      - ERROR:
        - missing
        - (326:9)
      .Slash: Token
    - arm:
      - _
      - ERROR:
        - missing
        - (328:7)
      .Error: Token
  let:
  - fun:
    - tokenFromPun
    - anno:
      - text
      - string
    - anno:
      - l
      - int
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - r
          - l
        - 1
    - match:
      - index: text
      - arm:
        - \',\'
        - ERROR:
          - missing
          - (334:9)
        .Comma: Token
      - arm:
        - \'(\'
        - ERROR:
          - missing
          - (336:9)
        .ParenL: Token
      - arm:
        - \')\'
        - ERROR:
          - missing
          - (338:9)
        .ParenR: Token
      - arm:
        - \'[\'
        - ERROR:
          - missing
          - (340:9)
        .BracketL: Token
      - arm:
        - \']\'
        - ERROR:
          - missing
          - (342:9)
        .BracketR: Token
      - arm:
        - _
        - ERROR:
          - missing
          - (344:7)
        bin:
        - failwith
        - \"NEVER! charIsPun is broken\"
  let:
  - anno:
    - fun:
      - tokenFromIntLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - let:
    - value
    - bin:
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - l
          - r
      - int
    bin:
    - .Int: Token
    - value
  let:
  - anno:
    - fun:
      - tokenFromCharLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\'\'
        - bin:
          - index: text
          - \'\\\'\'
    - let:
      - i
      - bin:
        - l
        - 1
      let:
      - value
      - match:
        - index: text
        - arm:
          - \'\\\\\'
          - ERROR:
            - missing
            - (358:12)
          match:
          - index: text
          - arm:
            - \'x\'
            - ERROR:
              - missing
              - (360:13)
            charNull
          - arm:
            - \'t\'
            - ERROR:
              - missing
              - (362:13)
            \'\\t\'
          - arm:
            - \'r\'
            - ERROR:
              - missing
              - (364:13)
            \'\\r\'
          - arm:
            - \'n\'
            - ERROR:
              - missing
              - (366:13)
            \'\\n\'
          - arm:
            - c
            - ERROR:
              - missing
              - (368:11)
            c
        - arm:
          - c
          - ERROR:
            - missing
            - (370:9)
          c
      bin:
      - .Char: Token
      - value
  let:
  - anno:
    - fun:
      - tokenFromStrLit
      - anno:
        - text
        - string
      - l
      - r
    - Token
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 2
            - r
          - bin:
            - index: text
            - \'\\\"\'
        - bin:
          - index: text
          - \'\\\"\'
    - let:
      - fun:
        - go
        - acc
        - i
      - let:
        - fun:
          - next
          - i
        - if:
          - bin:
            - bin:
              - i
              - bin:
                - r
                - 1
            - bin:
              - index: text
              - \'\\\\\'
          - i
          - bin:
            - next
            - bin:
              - i
              - 1
        let:
        - endIndex
        - bin:
          - next
          - i
        let:
        - acc
        - bin:
          - bin:
            - text
            - bin:
              - bin:
                - strSlice
                - i
              - endIndex
          - acc
        let:
        - i
        - endIndex
        if:
        - bin:
          - i
          - bin:
            - r
            - 1
        - bin:
          - bin:
            - acc
            - listRev
          - strConcat
        - semi:
          - bin:
            - assert
            - bin:
              - index: text
              - \'\\\\\'
          - match:
            - index: text
            - arm:
              - \'x\'
              - ERROR:
                - missing
                - (397:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\0\"
                  - acc
              - bin:
                - i
                - 4
            - arm:
              - \'t\'
              - ERROR:
                - missing
                - (399:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\t\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'r\'
              - ERROR:
                - missing
                - (401:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\r\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - \'n\'
              - ERROR:
                - missing
                - (403:13)
              bin:
              - bin:
                - go
                - bin:
                  - \"\\n\"
                  - acc
              - bin:
                - i
                - 2
            - arm:
              - _
              - ERROR:
                - missing
                - (405:11)
              bin:
              - bin:
                - go
                - bin:
                  - bin:
                    - text
                    - bin:
                      - bin:
                        - strSlice
                        - bin:
                          - i
                          - 1
                      - bin:
                        - i
                        - 2
                  - acc
              - bin:
                - i
                - 2
      let:
      - value
      - bin:
        - bin:
          - go
          - list
        - bin:
          - l
          - 1
      bin:
      - .Str: Token
      - value
  let:
  - fun:
    - tokenFromStrLitRaw
    - anno:
      - text
      - string
    - l
    - r
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - bin:
              - l
              - 6
            - r
          - bin:
            - text
            - bin:
              - strIsFollowedByRawQuotes
              - l
        - bin:
          - text
          - bin:
            - strIsFollowedByRawQuotes
            - bin:
              - r
              - 3
    - bin:
      - .Str: Token
      - bin:
        - text
        - bin:
          - bin:
            - strSlice
            - bin:
              - l
              - 3
          - bin:
            - r
            - 3
  let:
  - fun:
    - tokCtxToTextIndex
    - anno:
      - tuple:
        - text
        - i
        - _
        - _
      - TokenizeCtx
  - tuple:
    - text
    - i
  let:
  - anno:
    - fun:
      - tokCtxSkip
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - acc
  let:
  - anno:
    - fun:
      - tokCtxPush
      - kind
      - r
      - anno:
        - tuple:
          - text
          - i
          - loc
          - acc
        - TokenizeCtx
    - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - bin:
            - 0
            - i
          - bin:
            - i
            - r
        - bin:
          - r
          - .Length: text
    - let:
      - newAcc
      - bin:
        - tuple:
          - kind
          - loc
        - acc
      let:
      - newLoc
      - bin:
        - loc
        - bin:
          - bin:
            - bin:
              - locShift
              - text
            - i
          - r
      tuple:
      - text
      - r
      - newLoc
      - newAcc
  let:
  - fun:
    - tokEof
    - anno:
      - tuple:
        - text
        - i
        - _
        - acc
      - TokenizeCtx
  - semi:
    - bin:
      - assert
      - bin:
        - bin:
          - lookEof
          - text
        - i
    - bin:
      - acc
      - listRev
  let:
  - fun:
    - tokError
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanError
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokComment
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanLine
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokSpace
    - anno:
      - t
      - TokenizeCtx
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanSpace
        - text
      - i
    bin:
    - t
    - bin:
      - tokCtxSkip
      - r
  let:
  - fun:
    - tokPun
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanPun
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromPun
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokOp
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanOp
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromOp
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIdent
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIdent
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIdent
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokIntLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - r
    - bin:
      - bin:
        - scanIntLit
        - text
      - i
    let:
    - token
    - bin:
      - bin:
        - bin:
          - tokenFromIntLit
          - text
        - i
      - r
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokCharLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanCharLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromCharLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLit
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLit
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLit
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - fun:
    - tokStrLitRaw
    - t
  - let:
    - tuple:
      - text
      - i
    - bin:
      - t
      - tokCtxToTextIndex
    let:
    - tuple:
      - ok
      - r
    - bin:
      - bin:
        - scanStrLitRaw
        - text
      - i
    let:
    - token
    - if:
      - ok
      - bin:
        - bin:
          - bin:
            - tokenFromStrLitRaw
            - text
          - i
        - r
      - .Error: Token
    bin:
    - t
    - bin:
      - bin:
        - tokCtxPush
        - token
      - r
  let:
  - anno:
    - fun:
      - tokenize
      - anno:
        - text
        - string
    - list:
      - tuple:
        - Token
        - Loc
  - let:
    - fun:
      - go
      - t
    - let:
      - tuple:
        - text
        - i
      - bin:
        - t
        - tokCtxToTextIndex
      if:
      - bin:
        - bin:
          - lookEof
          - text
        - i
      - bin:
        - t
        - tokEof
      - if:
        - bin:
          - bin:
            - lookComment
            - text
          - i
        - bin:
          - bin:
            - t
            - tokComment
          - go
        - if:
          - bin:
            - bin:
              - lookSpace
              - text
            - i
          - bin:
            - bin:
              - t
              - tokSpace
            - go
          - if:
            - bin:
              - bin:
                - lookOp
                - text
              - i
            - bin:
              - bin:
                - t
                - tokOp
              - go
            - if:
              - bin:
                - bin:
                  - lookIntLit
                  - text
                - i
              - bin:
                - bin:
                  - t
                  - tokIntLit
                - go
              - if:
                - bin:
                  - bin:
                    - lookIdent
                    - text
                  - i
                - bin:
                  - bin:
                    - t
                    - tokIdent
                  - go
                - if:
                  - bin:
                    - bin:
                      - lookCharLit
                      - text
                    - i
                  - bin:
                    - bin:
                      - t
                      - tokCharLit
                    - go
                  - if:
                    - bin:
                      - bin:
                        - lookStrLitRaw
                        - text
                      - i
                    - bin:
                      - bin:
                        - t
                        - tokStrLitRaw
                      - go
                    - if:
                      - bin:
                        - bin:
                          - lookStrLit
                          - text
                        - i
                      - bin:
                        - bin:
                          - t
                          - tokStrLit
                        - go
                      - if:
                        - bin:
                          - bin:
                            - lookPun
                            - text
                          - i
                        - bin:
                          - bin:
                            - t
                            - tokPun
                          - go
                        - bin:
                          - bin:
                            - t
                            - tokError
                          - go
    bin:
    - go
    - tuple:
      - text
      - 0
      - tuple:
        - 0
        - 0
      - list
  tuple
FILE MiloneLang/Parsing.fs
module (76, 0)
rec (76, 7)
MiloneLang (76, 11)
. (76, 21)
Parsing (76, 22)
open (78, 0)
MiloneLang (78, 5)
. (78, 15)
Types (78, 16)
open (79, 0)
MiloneLang (79, 5)
. (79, 15)
Helpers (79, 16)
let (85, 0)
leadsExpr (85, 4)
tokens (85, 14)
= (85, 21)
match (86, 2)
tokens (86, 8)
with (86, 15)
| (87, 2)
( (87, 4)
token (87, 5)
, (87, 10)
_ (87, 12)
) (87, 13)
:: (87, 15)
_ (87, 18)
-> (87, 20)
tokenIsExprFirst (88, 4)
token (88, 21)
| (90, 2)
_ (90, 4)
-> (90, 6)
false (91, 4)
let (93, 0)
leadsArg (93, 4)
tokens (93, 13)
= (93, 20)
match (94, 2)
tokens (94, 8)
with (94, 15)
| (95, 2)
( (95, 4)
token (95, 5)
, (95, 10)
_ (95, 12)
) (95, 13)
:: (95, 15)
_ (95, 18)
-> (95, 20)
tokenIsArgFirst (96, 4)
token (96, 20)
| (98, 2)
_ (98, 4)
-> (98, 6)
false (99, 4)
let (101, 0)
leadsPat (101, 4)
tokens (101, 13)
= (101, 20)
match (102, 2)
tokens (102, 8)
with (102, 15)
| (103, 2)
( (103, 4)
token (103, 5)
, (103, 10)
_ (103, 12)
) (103, 13)
:: (103, 15)
_ (103, 18)
-> (103, 20)
tokenIsPatFirst (104, 4)
token (104, 20)
| (106, 2)
_ (106, 4)
-> (106, 6)
false (107, 4)
let (110, 0)
private (110, 4)
nextLoc (110, 12)
tokens (110, 20)
: (110, 26)
Loc (110, 28)
= (110, 32)
match (111, 2)
tokens (111, 8)
with (111, 15)
| (112, 2)
[ (112, 4)
] (112, 5)
-> (112, 7)
( (113, 4)
- (113, 5)
1 (113, 6)
, (113, 7)
0 (113, 9)
) (113, 10)
| (115, 2)
( (115, 4)
_ (115, 5)
, (115, 6)
loc (115, 8)
) (115, 11)
:: (115, 13)
_ (115, 16)
-> (115, 18)
loc (116, 4)
let (119, 0)
private (119, 4)
nextInside (119, 12)
baseLoc (119, 23)
tokens (119, 31)
: (119, 37)
bool (119, 39)
= (119, 44)
match (120, 2)
tokens (120, 8)
with (120, 15)
| (121, 2)
[ (121, 4)
] (121, 5)
-> (121, 7)
false (122, 4)
| (125, 2)
( (125, 4)
_ (125, 5)
, (125, 6)
loc (125, 8)
) (125, 11)
:: (125, 13)
_ (125, 16)
when (126, 4)
locInside (126, 9)
baseLoc (126, 19)
loc (126, 27)
-> (126, 31)
true (127, 4)
| (129, 2)
_ (129, 4)
-> (129, 6)
false (130, 4)
let (136, 0)
parseErrorCore (136, 4)
msg (136, 19)
loc (136, 23)
tokens (136, 27)
errors (136, 34)
= (136, 41)
let (137, 2)
near (137, 6)
= (137, 11)
tokens (137, 13)
|> (137, 20)
listMap (137, 23)
fst (137, 31)
|> (137, 35)
listTruncate (137, 38)
6 (137, 51)
let (138, 2)
msg (138, 6)
= (138, 10)
sprintf (138, 12)
"Parse error %s near %A" (138, 20)
msg (138, 45)
near (138, 49)
( (139, 2)
msg (139, 3)
, (139, 6)
loc (139, 8)
) (139, 11)
:: (139, 13)
errors (139, 16)
let (141, 0)
parseTyError (141, 4)
msg (141, 17)
( (141, 21)
tokens (141, 22)
, (141, 28)
errors (141, 30)
) (141, 36)
= (141, 38)
let (142, 2)
loc (142, 6)
= (142, 10)
nextLoc (142, 12)
tokens (142, 20)
let (143, 2)
errors (143, 6)
= (143, 13)
parseErrorCore (143, 15)
msg (143, 30)
loc (143, 34)
tokens (143, 38)
errors (143, 45)
ATy (144, 2)
. (144, 5)
Missing (144, 6)
loc (144, 14)
, (144, 17)
tokens (144, 19)
, (144, 25)
errors (144, 27)
let (146, 0)
parsePatError (146, 4)
msg (146, 18)
( (146, 22)
tokens (146, 23)
, (146, 29)
errors (146, 31)
) (146, 37)
= (146, 39)
let (147, 2)
loc (147, 6)
= (147, 10)
nextLoc (147, 12)
tokens (147, 20)
let (148, 2)
errors (148, 6)
= (148, 13)
parseErrorCore (148, 15)
msg (148, 30)
loc (148, 34)
tokens (148, 38)
errors (148, 45)
APat (149, 2)
. (149, 6)
Missing (149, 7)
loc (149, 15)
, (149, 18)
tokens (149, 20)
, (149, 26)
errors (149, 28)
let (151, 0)
parseExprError (151, 4)
msg (151, 19)
( (151, 23)
tokens (151, 24)
, (151, 30)
errors (151, 32)
) (151, 38)
= (151, 40)
let (152, 2)
loc (152, 6)
= (152, 10)
nextLoc (152, 12)
tokens (152, 20)
let (153, 2)
errors (153, 6)
= (153, 13)
parseErrorCore (153, 15)
msg (153, 30)
loc (153, 34)
tokens (153, 38)
errors (153, 45)
AExpr (154, 2)
. (154, 7)
Missing (154, 8)
loc (154, 16)
, (154, 19)
tokens (154, 21)
, (154, 27)
errors (154, 29)
let (156, 0)
parseNewError (156, 4)
msg (156, 18)
( (156, 22)
tokens (156, 23)
, (156, 29)
errors (156, 31)
) (156, 37)
= (156, 39)
let (157, 2)
loc (157, 6)
= (157, 10)
nextLoc (157, 12)
tokens (157, 20)
parseErrorCore (158, 2)
msg (158, 17)
loc (158, 21)
tokens (158, 25)
errors (158, 32)
let (164, 0)
parseTyAtom (164, 4)
baseLoc (164, 16)
( (164, 24)
tokens (164, 25)
, (164, 31)
errors (164, 33)
) (164, 39)
= (164, 41)
match (165, 2)
tokens (165, 8)
with (165, 15)
| (166, 2)
_ (166, 4)
when (166, 6)
nextInside (166, 11)
baseLoc (166, 22)
tokens (166, 30)
|> (166, 37)
not (166, 40)
-> (166, 44)
parseTyError (167, 4)
"Expected a type atom" (167, 17)
( (167, 40)
tokens (167, 41)
, (167, 47)
errors (167, 49)
) (167, 55)
| (169, 2)
( (169, 4)
Token (169, 5)
. (169, 10)
Ident (169, 11)
ident (169, 17)
, (169, 22)
loc (169, 24)
) (169, 27)
:: (169, 29)
tokens (169, 32)
-> (169, 39)
ATy (170, 4)
. (170, 7)
Ident (170, 8)
( (170, 14)
ident (170, 15)
, (170, 20)
loc (170, 22)
) (170, 25)
, (170, 26)
tokens (170, 28)
, (170, 34)
errors (170, 36)
| (172, 2)
( (172, 4)
Token (172, 5)
. (172, 10)
ParenL (172, 11)
, (172, 17)
_ (172, 19)
) (172, 20)
:: (172, 22)
tokens (172, 25)
-> (172, 32)
let (173, 4)
ty (173, 8)
, (173, 10)
tokens (173, 12)
, (173, 18)
errors (173, 20)
= (173, 27)
parseTy (173, 29)
baseLoc (173, 37)
( (173, 45)
tokens (173, 46)
, (173, 52)
errors (173, 54)
) (173, 60)
match (175, 4)
tokens (175, 10)
with (175, 17)
| (176, 4)
( (176, 6)
Token (176, 7)
. (176, 12)
ParenR (176, 13)
, (176, 19)
_ (176, 21)
) (176, 22)
:: (176, 24)
tokens (176, 27)
-> (176, 34)
ty (177, 6)
, (177, 8)
tokens (177, 10)
, (177, 16)
errors (177, 18)
| (179, 4)
_ (179, 6)
-> (179, 8)
let (180, 6)
errors (180, 10)
= (180, 17)
parseNewError (180, 19)
"Expected \')\'" (180, 33)
( (180, 48)
tokens (180, 49)
, (180, 55)
errors (180, 57)
) (180, 63)
ty (181, 6)
, (181, 8)
tokens (181, 10)
, (181, 16)
errors (181, 18)
| (183, 2)
_ (183, 4)
-> (183, 6)
parseTyError (184, 4)
"Expected a type atom" (184, 17)
( (184, 40)
tokens (184, 41)
, (184, 47)
errors (184, 49)
) (184, 55)
let (187, 0)
parseTySuffix (187, 4)
baseLoc (187, 18)
( (187, 26)
tokens (187, 27)
, (187, 33)
errors (187, 35)
) (187, 41)
= (187, 43)
let (188, 2)
rec (188, 6)
go (188, 10)
( (188, 13)
ty (188, 14)
, (188, 16)
tokens (188, 18)
, (188, 24)
errors (188, 26)
) (188, 32)
= (188, 34)
let (189, 4)
inside (189, 8)
= (189, 15)
nextInside (189, 17)
baseLoc (189, 28)
tokens (189, 36)
match (190, 4)
tokens (190, 10)
with (190, 17)
| (191, 4)
( (191, 6)
Token (191, 7)
. (191, 12)
Ident (191, 13)
ident (191, 19)
, (191, 24)
loc (191, 26)
) (191, 29)
:: (191, 31)
tokens (191, 34)
when (191, 41)
inside (191, 46)
-> (191, 53)
go (192, 6)
( (192, 9)
ATy (192, 10)
. (192, 13)
Suffix (192, 14)
( (192, 21)
ty (192, 22)
, (192, 24)
ident (192, 26)
, (192, 31)
loc (192, 33)
) (192, 36)
, (192, 37)
tokens (192, 39)
, (192, 45)
errors (192, 47)
) (192, 53)
| (194, 4)
_ (194, 6)
-> (194, 8)
ty (195, 6)
, (195, 8)
tokens (195, 10)
, (195, 16)
errors (195, 18)
parseTyAtom (197, 2)
baseLoc (197, 14)
( (197, 22)
tokens (197, 23)
, (197, 29)
errors (197, 31)
) (197, 37)
|> (197, 39)
go (197, 42)
let (201, 0)
parseTyPrefix (201, 4)
baseLoc (201, 18)
( (201, 26)
tokens (201, 27)
, (201, 33)
errors (201, 35)
) (201, 41)
= (201, 43)
match (202, 2)
tokens (202, 8)
with (202, 15)
| (203, 2)
( (203, 4)
Token (203, 5)
. (203, 10)
Ident (203, 11)
_ (203, 17)
, (203, 18)
_ (203, 20)
) (203, 21)
:: (203, 23)
( (203, 26)
Token (203, 27)
. (203, 32)
Colon (203, 33)
, (203, 38)
_ (203, 40)
) (203, 41)
:: (203, 43)
tokens (203, 46)
-> (203, 53)
parseTySuffix (204, 4)
baseLoc (204, 18)
( (204, 26)
tokens (204, 27)
, (204, 33)
errors (204, 35)
) (204, 41)
| (206, 2)
_ (206, 4)
-> (206, 6)
parseTySuffix (207, 4)
baseLoc (207, 18)
( (207, 26)
tokens (207, 27)
, (207, 33)
errors (207, 35)
) (207, 41)
let (210, 0)
parseTyTuple (210, 4)
baseLoc (210, 17)
( (210, 25)
tokens (210, 26)
, (210, 32)
errors (210, 34)
) (210, 40)
= (210, 42)
let (211, 2)
rec (211, 6)
go (211, 10)
acc (211, 13)
( (211, 17)
tokens (211, 18)
, (211, 24)
errors (211, 26)
) (211, 32)
= (211, 34)
match (212, 4)
tokens (212, 10)
with (212, 17)
| (213, 4)
( (213, 6)
Token (213, 7)
. (213, 12)
Star (213, 13)
, (213, 17)
_ (213, 19)
) (213, 20)
:: (213, 22)
tokens (213, 25)
-> (213, 32)
let (214, 6)
itemTy (214, 10)
, (214, 16)
tokens (214, 18)
, (214, 24)
errors (214, 26)
= (214, 33)
parseTyPrefix (214, 35)
baseLoc (214, 49)
( (214, 57)
tokens (214, 58)
, (214, 64)
errors (214, 66)
) (214, 72)
go (215, 6)
( (215, 9)
itemTy (215, 10)
:: (215, 17)
acc (215, 20)
) (215, 23)
( (215, 25)
tokens (215, 26)
, (215, 32)
errors (215, 34)
) (215, 40)
| (217, 4)
_ (217, 6)
-> (217, 8)
listRev (218, 6)
acc (218, 14)
, (218, 17)
tokens (218, 19)
, (218, 25)
errors (218, 27)
let (220, 2)
itemTy (220, 6)
, (220, 12)
tokens (220, 14)
, (220, 20)
errors (220, 22)
= (220, 29)
parseTyPrefix (220, 31)
baseLoc (220, 45)
( (220, 53)
tokens (220, 54)
, (220, 60)
errors (220, 62)
) (220, 68)
match (222, 2)
tokens (222, 8)
with (222, 15)
| (223, 2)
( (223, 4)
Token (223, 5)
. (223, 10)
Star (223, 11)
, (223, 15)
opLoc (223, 17)
) (223, 22)
:: (223, 24)
_ (223, 27)
-> (223, 29)
let (224, 4)
itemTys (224, 8)
, (224, 15)
tokens (224, 17)
, (224, 23)
errors (224, 25)
= (224, 32)
go (224, 34)
[ (224, 37)
] (224, 38)
( (224, 40)
tokens (224, 41)
, (224, 47)
errors (224, 49)
) (224, 55)
ATy (225, 4)
. (225, 7)
Tuple (225, 8)
( (225, 14)
itemTy (225, 15)
:: (225, 22)
itemTys (225, 25)
, (225, 32)
opLoc (225, 34)
) (225, 39)
, (225, 40)
tokens (225, 42)
, (225, 48)
errors (225, 50)
| (227, 2)
_ (227, 4)
-> (227, 6)
itemTy (228, 4)
, (228, 10)
tokens (228, 12)
, (228, 18)
errors (228, 20)
let (232, 0)
parseTyFun (232, 4)
baseLoc (232, 15)
( (232, 23)
tokens (232, 24)
, (232, 30)
errors (232, 32)
) (232, 38)
= (232, 40)
let (233, 2)
sTy (233, 6)
, (233, 9)
tokens (233, 11)
, (233, 17)
errors (233, 19)
= (233, 26)
parseTyTuple (233, 28)
baseLoc (233, 41)
( (233, 49)
tokens (233, 50)
, (233, 56)
errors (233, 58)
) (233, 64)
match (235, 2)
tokens (235, 8)
with (235, 15)
| (236, 2)
( (236, 4)
Token (236, 5)
. (236, 10)
Arrow (236, 11)
, (236, 16)
opLoc (236, 18)
) (236, 23)
:: (236, 25)
tokens (236, 28)
-> (236, 35)
let (237, 4)
tTy (237, 8)
, (237, 11)
tokens (237, 13)
, (237, 19)
errors (237, 21)
= (237, 28)
parseTyFun (237, 30)
baseLoc (237, 41)
( (237, 49)
tokens (237, 50)
, (237, 56)
errors (237, 58)
) (237, 64)
ATy (238, 4)
. (238, 7)
Fun (238, 8)
( (238, 12)
sTy (238, 13)
, (238, 16)
tTy (238, 18)
, (238, 21)
opLoc (238, 23)
) (238, 28)
, (238, 29)
tokens (238, 31)
, (238, 37)
errors (238, 39)
| (240, 2)
_ (240, 4)
-> (240, 6)
sTy (241, 4)
, (241, 7)
tokens (241, 9)
, (241, 15)
errors (241, 17)
let (243, 0)
parseTy (243, 4)
baseLoc (243, 12)
( (243, 20)
tokens (243, 21)
, (243, 27)
errors (243, 29)
) (243, 35)
= (243, 37)
parseTyFun (244, 2)
baseLoc (244, 13)
( (244, 21)
tokens (244, 22)
, (244, 28)
errors (244, 30)
) (244, 36)
let (247, 0)
parseTyDeclUnion (247, 4)
baseLoc (247, 21)
( (247, 29)
tokens (247, 30)
, (247, 36)
errors (247, 38)
) (247, 44)
= (247, 46)
let (248, 2)
rec (248, 6)
go (248, 10)
acc (248, 13)
( (248, 17)
tokens (248, 18)
, (248, 24)
errors (248, 26)
) (248, 32)
= (248, 34)
match (249, 4)
tokens (249, 10)
with (249, 17)
| (250, 4)
( (250, 6)
Token (250, 7)
. (250, 12)
Pipe (250, 13)
, (250, 17)
_ (250, 19)
) (250, 20)
:: (251, 6)
( (251, 9)
Token (251, 10)
. (251, 15)
Ident (251, 16)
variantIdent (251, 22)
, (251, 34)
loc (251, 36)
) (251, 39)
:: (252, 6)
( (252, 9)
Token (252, 10)
. (252, 15)
Of (252, 16)
, (252, 18)
_ (252, 20)
) (252, 21)
:: (252, 23)
tokens (252, 26)
-> (252, 33)
let (253, 6)
payloadTy (253, 10)
, (253, 19)
tokens (253, 21)
, (253, 27)
errors (253, 29)
= (253, 36)
parseTy (253, 38)
baseLoc (253, 46)
( (253, 54)
tokens (253, 55)
, (253, 61)
errors (253, 63)
) (253, 69)
go (254, 6)
( (254, 9)
AVariant (254, 10)
( (254, 19)
variantIdent (254, 20)
, (254, 32)
Some (254, 34)
payloadTy (254, 39)
, (254, 48)
loc (254, 50)
) (254, 53)
:: (254, 55)
acc (254, 58)
) (254, 61)
( (254, 63)
tokens (254, 64)
, (254, 70)
errors (254, 72)
) (254, 78)
| (256, 4)
( (256, 6)
Token (256, 7)
. (256, 12)
Pipe (256, 13)
, (256, 17)
_ (256, 19)
) (256, 20)
:: (257, 6)
( (257, 9)
Token (257, 10)
. (257, 15)
Ident (257, 16)
variantIdent (257, 22)
, (257, 34)
loc (257, 36)
) (257, 39)
:: (257, 41)
tokens (257, 44)
-> (257, 51)
go (258, 6)
( (258, 9)
AVariant (258, 10)
( (258, 19)
variantIdent (258, 20)
, (258, 32)
None (258, 34)
, (258, 38)
loc (258, 40)
) (258, 43)
:: (258, 45)
acc (258, 48)
) (258, 51)
( (258, 53)
tokens (258, 54)
, (258, 60)
errors (258, 62)
) (258, 68)
| (260, 4)
_ (260, 6)
-> (260, 8)
listRev (261, 6)
acc (261, 14)
, (261, 17)
tokens (261, 19)
, (261, 25)
errors (261, 27)
let (263, 2)
variants (263, 6)
, (263, 14)
tokens (263, 16)
, (263, 22)
errors (263, 24)
= (263, 31)
go (263, 33)
[ (263, 36)
] (263, 37)
( (263, 39)
tokens (263, 40)
, (263, 46)
errors (263, 48)
) (263, 54)
ATyDecl (264, 2)
. (264, 9)
Union (264, 10)
variants (264, 16)
, (264, 24)
tokens (264, 26)
, (264, 32)
errors (264, 34)
let (268, 0)
parseTyDeclBody (268, 4)
baseLoc (268, 20)
( (268, 28)
tokens (268, 29)
, (268, 35)
errors (268, 37)
) (268, 43)
= (268, 45)
match (269, 2)
tokens (269, 8)
with (269, 15)
| (270, 2)
( (270, 4)
Token (270, 5)
. (270, 10)
Pipe (270, 11)
, (270, 15)
_ (270, 17)
) (270, 18)
:: (270, 20)
_ (270, 23)
-> (270, 25)
parseTyDeclUnion (271, 4)
baseLoc (271, 21)
( (271, 29)
tokens (271, 30)
, (271, 36)
errors (271, 38)
) (271, 44)
| (273, 2)
( (273, 4)
Token (273, 5)
. (273, 10)
Ident (273, 11)
_ (273, 17)
, (273, 18)
_ (273, 20)
) (273, 21)
:: (273, 23)
( (273, 26)
Token (273, 27)
. (273, 32)
Of (273, 33)
, (273, 35)
_ (273, 37)
) (273, 38)
:: (273, 40)
_ (273, 43)
-> (273, 45)
parseTyDeclUnion (274, 4)
baseLoc (274, 21)
( (274, 29)
tokens (274, 30)
, (274, 36)
errors (274, 38)
) (274, 44)
| (276, 2)
_ (276, 4)
-> (276, 6)
let (277, 4)
ty (277, 8)
, (277, 10)
tokens (277, 12)
, (277, 18)
errors (277, 20)
= (277, 27)
parseTy (277, 29)
baseLoc (277, 37)
( (277, 45)
tokens (277, 46)
, (277, 52)
errors (277, 54)
) (277, 60)
ATyDecl (278, 4)
. (278, 11)
Synonym (278, 12)
ty (278, 20)
, (278, 22)
tokens (278, 24)
, (278, 30)
errors (278, 32)
let (285, 0)
parsePatParenBody (285, 4)
baseLoc (285, 22)
( (285, 30)
tokens (285, 31)
, (285, 37)
errors (285, 39)
) (285, 45)
= (285, 47)
let (286, 2)
pat (286, 6)
, (286, 9)
tokens (286, 11)
, (286, 17)
errors (286, 19)
= (286, 26)
parsePat (286, 28)
baseLoc (286, 37)
( (286, 45)
tokens (286, 46)
, (286, 52)
errors (286, 54)
) (286, 60)
match (288, 2)
tokens (288, 8)
with (288, 15)
| (289, 2)
( (289, 4)
Token (289, 5)
. (289, 10)
ParenR (289, 11)
, (289, 17)
_ (289, 19)
) (289, 20)
:: (289, 22)
tokens (289, 25)
-> (289, 32)
pat (290, 4)
, (290, 7)
tokens (290, 9)
, (290, 15)
errors (290, 17)
| (292, 2)
tokens (292, 4)
-> (292, 11)
let (293, 4)
errors (293, 8)
= (293, 15)
parseNewError (293, 17)
"Expected \')\'" (293, 31)
( (293, 46)
tokens (293, 47)
, (293, 53)
errors (293, 55)
) (293, 61)
pat (294, 4)
, (294, 7)
tokens (294, 9)
, (294, 15)
errors (294, 17)
let (297, 0)
parsePatListBody (297, 4)
baseLoc (297, 21)
bracketLoc (297, 29)
( (297, 40)
tokens (297, 41)
, (297, 47)
errors (297, 49)
) (297, 55)
= (297, 57)
let (298, 2)
rec (298, 6)
go (298, 10)
patAcc (298, 13)
( (298, 20)
tokens (298, 21)
, (298, 27)
errors (298, 29)
) (298, 35)
= (298, 37)
match (299, 4)
tokens (299, 10)
with (299, 17)
| (300, 4)
( (300, 6)
Token (300, 7)
. (300, 12)
BracketR (300, 13)
, (300, 21)
_ (300, 23)
) (300, 24)
:: (300, 26)
tokens (300, 29)
-> (300, 36)
listRev (301, 6)
patAcc (301, 14)
, (301, 20)
tokens (301, 22)
, (301, 28)
errors (301, 30)
| (304, 4)
( (304, 6)
Token (304, 7)
. (304, 12)
Semi (304, 13)
, (304, 17)
_ (304, 19)
) (304, 20)
:: (304, 22)
tokens (304, 25)
-> (304, 32)
let (305, 6)
pat (305, 10)
, (305, 13)
tokens (305, 15)
, (305, 21)
errors (305, 23)
= (305, 30)
parsePat (305, 32)
baseLoc (305, 41)
( (305, 49)
tokens (305, 50)
, (305, 56)
errors (305, 58)
) (305, 64)
go (306, 6)
( (306, 9)
pat (306, 10)
:: (306, 14)
patAcc (306, 17)
) (306, 23)
( (306, 25)
tokens (306, 26)
, (306, 32)
errors (306, 34)
) (306, 40)
| (308, 4)
_ (308, 6)
-> (308, 8)
let (309, 6)
errors (309, 10)
= (309, 17)
parseNewError (309, 19)
"Expected \';\' or \']\'" (309, 33)
( (309, 55)
tokens (309, 56)
, (309, 62)
errors (309, 64)
) (309, 70)
listRev (310, 6)
patAcc (310, 14)
, (310, 20)
tokens (310, 22)
, (310, 28)
errors (310, 30)
let (312, 2)
itemPat (312, 6)
, (312, 13)
tokens (312, 15)
, (312, 21)
errors (312, 23)
= (312, 30)
parsePat (312, 32)
baseLoc (312, 41)
( (312, 49)
tokens (312, 50)
, (312, 56)
errors (312, 58)
) (312, 64)
let (313, 2)
itemPats (313, 6)
, (313, 14)
tokens (313, 16)
, (313, 22)
errors (313, 24)
= (313, 31)
go (313, 33)
[ (313, 36)
itemPat (313, 37)
] (313, 44)
( (313, 46)
tokens (313, 47)
, (313, 53)
errors (313, 55)
) (313, 61)
APat (314, 2)
. (314, 6)
ListLit (314, 7)
( (314, 15)
itemPats (314, 16)
, (314, 24)
bracketLoc (314, 26)
) (314, 36)
, (314, 37)
tokens (314, 39)
, (314, 45)
errors (314, 47)
let (316, 0)
parsePatAtom (316, 4)
baseLoc (316, 17)
( (316, 25)
tokens (316, 26)
, (316, 32)
errors (316, 34)
) (316, 40)
= (316, 42)
match (317, 2)
tokens (317, 8)
with (317, 15)
| (318, 2)
_ (318, 4)
when (318, 6)
not (318, 11)
( (318, 15)
nextInside (318, 16)
baseLoc (318, 27)
tokens (318, 35)
&& (318, 42)
leadsPat (318, 45)
tokens (318, 54)
) (318, 60)
-> (318, 62)
parsePatError (319, 4)
"Expected a pattern atom" (319, 18)
( (319, 44)
tokens (319, 45)
, (319, 51)
errors (319, 53)
) (319, 59)
| (321, 2)
( (321, 4)
Token (321, 5)
. (321, 10)
Bool (321, 11)
value (321, 16)
, (321, 21)
loc (321, 23)
) (321, 26)
:: (321, 28)
tokens (321, 31)
-> (321, 38)
APat (322, 4)
. (322, 8)
Lit (322, 9)
( (322, 13)
Lit (322, 14)
. (322, 17)
Bool (322, 18)
value (322, 23)
, (322, 28)
loc (322, 30)
) (322, 33)
, (322, 34)
tokens (322, 36)
, (322, 42)
errors (322, 44)
| (324, 2)
( (324, 4)
Token (324, 5)
. (324, 10)
Int (324, 11)
value (324, 15)
, (324, 20)
loc (324, 22)
) (324, 25)
:: (324, 27)
tokens (324, 30)
-> (324, 37)
APat (325, 4)
. (325, 8)
Lit (325, 9)
( (325, 13)
Lit (325, 14)
. (325, 17)
Int (325, 18)
value (325, 22)
, (325, 27)
loc (325, 29)
) (325, 32)
, (325, 33)
tokens (325, 35)
, (325, 41)
errors (325, 43)
| (327, 2)
( (327, 4)
Token (327, 5)
. (327, 10)
Char (327, 11)
value (327, 16)
, (327, 21)
loc (327, 23)
) (327, 26)
:: (327, 28)
tokens (327, 31)
-> (327, 38)
APat (328, 4)
. (328, 8)
Lit (328, 9)
( (328, 13)
Lit (328, 14)
. (328, 17)
Char (328, 18)
value (328, 23)
, (328, 28)
loc (328, 30)
) (328, 33)
, (328, 34)
tokens (328, 36)
, (328, 42)
errors (328, 44)
| (330, 2)
( (330, 4)
Token (330, 5)
. (330, 10)
Str (330, 11)
value (330, 15)
, (330, 20)
loc (330, 22)
) (330, 25)
:: (330, 27)
tokens (330, 30)
-> (330, 37)
APat (331, 4)
. (331, 8)
Lit (331, 9)
( (331, 13)
Lit (331, 14)
. (331, 17)
Str (331, 18)
value (331, 22)
, (331, 27)
loc (331, 29)
) (331, 32)
, (331, 33)
tokens (331, 35)
, (331, 41)
errors (331, 43)
| (333, 2)
( (333, 4)
Token (333, 5)
. (333, 10)
Ident (333, 11)
ident (333, 17)
, (333, 22)
loc (333, 24)
) (333, 27)
:: (333, 29)
tokens (333, 32)
-> (333, 39)
APat (334, 4)
. (334, 8)
Ident (334, 9)
( (334, 15)
ident (334, 16)
, (334, 21)
loc (334, 23)
) (334, 26)
, (334, 27)
tokens (334, 29)
, (334, 35)
errors (334, 37)
| (336, 2)
( (336, 4)
Token (336, 5)
. (336, 10)
ParenL (336, 11)
, (336, 17)
loc (336, 19)
) (336, 22)
:: (336, 24)
( (336, 27)
Token (336, 28)
. (336, 33)
ParenR (336, 34)
, (336, 40)
_ (336, 42)
) (336, 43)
:: (336, 45)
tokens (336, 48)
-> (336, 55)
APat (337, 4)
. (337, 8)
TupleLit (337, 9)
( (337, 18)
[ (337, 19)
] (337, 20)
, (337, 21)
loc (337, 23)
) (337, 26)
, (337, 27)
tokens (337, 29)
, (337, 35)
errors (337, 37)
| (339, 2)
( (339, 4)
Token (339, 5)
. (339, 10)
ParenL (339, 11)
, (339, 17)
_ (339, 19)
) (339, 20)
:: (339, 22)
tokens (339, 25)
-> (339, 32)
parsePatParenBody (340, 4)
baseLoc (340, 22)
( (340, 30)
tokens (340, 31)
, (340, 37)
errors (340, 39)
) (340, 45)
| (342, 2)
( (342, 4)
Token (342, 5)
. (342, 10)
BracketL (342, 11)
, (342, 19)
loc (342, 21)
) (342, 24)
:: (342, 26)
( (342, 29)
Token (342, 30)
. (342, 35)
BracketR (342, 36)
, (342, 44)
_ (342, 46)
) (342, 47)
:: (342, 49)
tokens (342, 52)
-> (342, 59)
APat (343, 4)
. (343, 8)
ListLit (343, 9)
( (343, 17)
[ (343, 18)
] (343, 19)
, (343, 20)
loc (343, 22)
) (343, 25)
, (343, 26)
tokens (343, 28)
, (343, 34)
errors (343, 36)
| (345, 2)
( (345, 4)
Token (345, 5)
. (345, 10)
BracketL (345, 11)
, (345, 19)
loc (345, 21)
) (345, 24)
:: (345, 26)
tokens (345, 29)
-> (345, 36)
parsePatListBody (346, 4)
baseLoc (346, 21)
loc (346, 29)
( (346, 33)
tokens (346, 34)
, (346, 40)
errors (346, 42)
) (346, 48)
| (348, 2)
_ (348, 4)
-> (348, 6)
parsePatError (349, 4)
"NEVER: The token must be a pat" (349, 18)
( (349, 51)
tokens (349, 52)
, (349, 58)
errors (349, 60)
) (349, 66)
let (352, 0)
parsePatNav (352, 4)
baseLoc (352, 16)
( (352, 24)
tokens (352, 25)
, (352, 31)
errors (352, 33)
) (352, 39)
= (352, 41)
let (353, 2)
pat (353, 6)
, (353, 9)
tokens (353, 11)
, (353, 17)
errors (353, 19)
= (353, 26)
parsePatAtom (353, 28)
baseLoc (353, 41)
( (353, 49)
tokens (353, 50)
, (353, 56)
errors (353, 58)
) (353, 64)
match (355, 2)
tokens (355, 8)
with (355, 15)
| (356, 2)
( (356, 4)
Token (356, 5)
. (356, 10)
Dot (356, 11)
, (356, 14)
loc (356, 16)
) (356, 19)
:: (356, 21)
( (356, 24)
Token (356, 25)
. (356, 30)
Ident (356, 31)
ident (356, 37)
, (356, 42)
_ (356, 44)
) (356, 45)
:: (356, 47)
tokens (356, 50)
-> (356, 57)
APat (357, 4)
. (357, 8)
Nav (357, 9)
( (357, 13)
pat (357, 14)
, (357, 17)
ident (357, 19)
, (357, 24)
loc (357, 26)
) (357, 29)
, (357, 30)
tokens (357, 32)
, (357, 38)
errors (357, 40)
| (359, 2)
( (359, 4)
Token (359, 5)
. (359, 10)
Dot (359, 11)
, (359, 14)
_ (359, 16)
) (359, 17)
:: (359, 19)
tokens (359, 22)
-> (359, 29)
parsePatError (360, 4)
"Expected identifier" (360, 18)
( (360, 40)
tokens (360, 41)
, (360, 47)
errors (360, 49)
) (360, 55)
| (362, 2)
_ (362, 4)
-> (362, 6)
pat (363, 4)
, (363, 7)
tokens (363, 9)
, (363, 15)
errors (363, 17)
let (365, 0)
parsePatCallArgs (365, 4)
baseLoc (365, 21)
calleeLoc (365, 29)
( (365, 39)
tokens (365, 40)
, (365, 46)
errors (365, 48)
) (365, 54)
= (365, 56)
let (367, 2)
argBaseLoc (367, 6)
= (367, 17)
locMax (367, 19)
baseLoc (367, 26)
calleeLoc (367, 34)
|> (367, 44)
locAddX (367, 47)
1 (367, 55)
let (369, 2)
rec (369, 6)
go (369, 10)
acc (369, 13)
( (369, 17)
tokens (369, 18)
, (369, 24)
errors (369, 26)
) (369, 32)
= (369, 34)
if (370, 4)
nextInside (370, 7)
argBaseLoc (370, 18)
tokens (370, 29)
&& (370, 36)
leadsPat (370, 39)
tokens (370, 48)
then (370, 55)
let (371, 6)
expr (371, 10)
, (371, 14)
tokens (371, 16)
, (371, 22)
errors (371, 24)
= (371, 31)
parsePatNav (371, 33)
baseLoc (371, 45)
( (371, 53)
tokens (371, 54)
, (371, 60)
errors (371, 62)
) (371, 68)
go (372, 6)
( (372, 9)
expr (372, 10)
:: (372, 15)
acc (372, 18)
) (372, 21)
( (372, 23)
tokens (372, 24)
, (372, 30)
errors (372, 32)
) (372, 38)
else (373, 4)
listRev (374, 6)
acc (374, 14)
, (374, 17)
tokens (374, 19)
, (374, 25)
errors (374, 27)
go (376, 2)
[ (376, 5)
] (376, 6)
( (376, 8)
tokens (376, 9)
, (376, 15)
errors (376, 17)
) (376, 23)
let (379, 0)
parsePatCall (379, 4)
baseLoc (379, 17)
( (379, 25)
tokens (379, 26)
, (379, 32)
errors (379, 34)
) (379, 40)
= (379, 42)
let (380, 2)
calleeLoc (380, 6)
= (380, 16)
nextLoc (380, 18)
tokens (380, 26)
let (381, 2)
callee (381, 6)
, (381, 12)
tokens (381, 14)
, (381, 20)
errors (381, 22)
= (381, 29)
parsePatNav (381, 31)
baseLoc (381, 43)
( (381, 51)
tokens (381, 52)
, (381, 58)
errors (381, 60)
) (381, 66)
let (382, 2)
args (382, 6)
, (382, 10)
tokens (382, 12)
, (382, 18)
errors (382, 20)
= (382, 27)
parsePatCallArgs (382, 29)
baseLoc (382, 46)
calleeLoc (382, 54)
( (382, 64)
tokens (382, 65)
, (382, 71)
errors (382, 73)
) (382, 79)
match (384, 2)
args (384, 8)
with (384, 13)
| (385, 2)
[ (385, 4)
] (385, 5)
-> (385, 7)
callee (386, 4)
, (386, 10)
tokens (386, 12)
, (386, 18)
errors (386, 20)
| (388, 2)
_ (388, 4)
-> (388, 6)
APat (389, 4)
. (389, 8)
Call (389, 9)
( (389, 14)
callee (389, 15)
, (389, 21)
args (389, 23)
, (389, 27)
calleeLoc (389, 29)
) (389, 38)
, (389, 39)
tokens (389, 41)
, (389, 47)
errors (389, 49)
let (392, 0)
parsePatCons (392, 4)
baseLoc (392, 17)
( (392, 25)
tokens (392, 26)
, (392, 32)
errors (392, 34)
) (392, 40)
= (392, 42)
let (393, 2)
head (393, 6)
, (393, 10)
tokens (393, 12)
, (393, 18)
errors (393, 20)
= (393, 27)
parsePatCall (393, 29)
baseLoc (393, 42)
( (393, 50)
tokens (393, 51)
, (393, 57)
errors (393, 59)
) (393, 65)
match (395, 2)
tokens (395, 8)
with (395, 15)
| (396, 2)
( (396, 4)
Token (396, 5)
. (396, 10)
ColonColon (396, 11)
, (396, 21)
loc (396, 23)
) (396, 26)
:: (396, 28)
tokens (396, 31)
-> (396, 38)
let (397, 4)
tail (397, 8)
, (397, 12)
tokens (397, 14)
, (397, 20)
errors (397, 22)
= (397, 29)
parsePatCons (397, 31)
baseLoc (397, 44)
( (397, 52)
tokens (397, 53)
, (397, 59)
errors (397, 61)
) (397, 67)
APat (398, 4)
. (398, 8)
Cons (398, 9)
( (398, 14)
head (398, 15)
, (398, 19)
tail (398, 21)
, (398, 25)
loc (398, 27)
) (398, 30)
, (398, 31)
tokens (398, 33)
, (398, 39)
errors (398, 41)
| (400, 2)
_ (400, 4)
-> (400, 6)
head (401, 4)
, (401, 8)
tokens (401, 10)
, (401, 16)
errors (401, 18)
let (404, 0)
parsePatAnno (404, 4)
baseLoc (404, 17)
( (404, 25)
tokens (404, 26)
, (404, 32)
errors (404, 34)
) (404, 40)
= (404, 42)
let (405, 2)
pat (405, 6)
, (405, 9)
tokens (405, 11)
, (405, 17)
errors (405, 19)
= (405, 26)
parsePatCons (405, 28)
baseLoc (405, 41)
( (405, 49)
tokens (405, 50)
, (405, 56)
errors (405, 58)
) (405, 64)
match (407, 2)
tokens (407, 8)
with (407, 15)
| (408, 2)
( (408, 4)
Token (408, 5)
. (408, 10)
Colon (408, 11)
, (408, 16)
loc (408, 18)
) (408, 21)
:: (408, 23)
tokens (408, 26)
-> (408, 33)
let (409, 4)
ty (409, 8)
, (409, 10)
tokens (409, 12)
, (409, 18)
errors (409, 20)
= (409, 27)
parseTy (409, 29)
( (409, 37)
nextLoc (409, 38)
tokens (409, 46)
) (409, 52)
( (409, 54)
tokens (409, 55)
, (409, 61)
errors (409, 63)
) (409, 69)
APat (410, 4)
. (410, 8)
Anno (410, 9)
( (410, 14)
pat (410, 15)
, (410, 18)
ty (410, 20)
, (410, 22)
loc (410, 24)
) (410, 27)
, (410, 28)
tokens (410, 30)
, (410, 36)
errors (410, 38)
| (412, 2)
_ (412, 4)
-> (412, 6)
pat (413, 4)
, (413, 7)
tokens (413, 9)
, (413, 15)
errors (413, 17)
let (416, 0)
parsePatTuple (416, 4)
baseLoc (416, 18)
( (416, 26)
tokens (416, 27)
, (416, 33)
errors (416, 35)
) (416, 41)
= (416, 43)
let (417, 2)
rec (417, 6)
go (417, 10)
acc (417, 13)
( (417, 17)
tokens (417, 18)
, (417, 24)
errors (417, 26)
) (417, 32)
= (417, 34)
match (418, 4)
tokens (418, 10)
with (418, 17)
| (419, 4)
( (419, 6)
Token (419, 7)
. (419, 12)
Comma (419, 13)
, (419, 18)
_ (419, 20)
) (419, 21)
:: (419, 23)
tokens (419, 26)
-> (419, 33)
let (420, 6)
second (420, 10)
, (420, 16)
tokens (420, 18)
, (420, 24)
errors (420, 26)
= (420, 33)
parsePatAnno (420, 35)
baseLoc (420, 48)
( (420, 56)
tokens (420, 57)
, (420, 63)
errors (420, 65)
) (420, 71)
go (421, 6)
( (421, 9)
second (421, 10)
:: (421, 17)
acc (421, 20)
) (421, 23)
( (421, 25)
tokens (421, 26)
, (421, 32)
errors (421, 34)
) (421, 40)
| (423, 4)
_ (423, 6)
-> (423, 8)
listRev (424, 6)
acc (424, 14)
, (424, 17)
tokens (424, 19)
, (424, 25)
errors (424, 27)
let (426, 2)
itemPat (426, 6)
, (426, 13)
tokens (426, 15)
, (426, 21)
errors (426, 23)
= (426, 30)
parsePatAnno (426, 32)
baseLoc (426, 45)
( (426, 53)
tokens (426, 54)
, (426, 60)
errors (426, 62)
) (426, 68)
match (428, 2)
tokens (428, 8)
with (428, 15)
| (429, 2)
( (429, 4)
Token (429, 5)
. (429, 10)
Comma (429, 11)
, (429, 16)
loc (429, 18)
) (429, 21)
:: (429, 23)
_ (429, 26)
-> (429, 28)
let (430, 4)
itemPats (430, 8)
, (430, 16)
tokens (430, 18)
, (430, 24)
errors (430, 26)
= (430, 33)
go (430, 35)
[ (430, 38)
] (430, 39)
( (430, 41)
tokens (430, 42)
, (430, 48)
errors (430, 50)
) (430, 56)
APat (431, 4)
. (431, 8)
TupleLit (431, 9)
( (431, 18)
itemPat (431, 19)
:: (431, 27)
itemPats (431, 30)
, (431, 38)
loc (431, 40)
) (431, 43)
, (431, 44)
tokens (431, 46)
, (431, 52)
errors (431, 54)
| (433, 2)
_ (433, 4)
-> (433, 6)
itemPat (434, 4)
, (434, 11)
tokens (434, 13)
, (434, 19)
errors (434, 21)
let (438, 0)
parsePatAs (438, 4)
baseLoc (438, 15)
( (438, 23)
tokens (438, 24)
, (438, 30)
errors (438, 32)
) (438, 38)
= (438, 40)
let (439, 2)
pat (439, 6)
, (439, 9)
tokens (439, 11)
, (439, 17)
errors (439, 19)
= (439, 26)
parsePatTuple (439, 28)
baseLoc (439, 42)
( (439, 50)
tokens (439, 51)
, (439, 57)
errors (439, 59)
) (439, 65)
match (441, 2)
tokens (441, 8)
with (441, 15)
| (442, 2)
( (442, 4)
Token (442, 5)
. (442, 10)
As (442, 11)
, (442, 13)
loc (442, 15)
) (442, 18)
:: (442, 20)
( (442, 23)
Token (442, 24)
. (442, 29)
Ident (442, 30)
ident (442, 36)
, (442, 41)
_ (442, 43)
) (442, 44)
:: (442, 46)
tokens (442, 49)
-> (442, 56)
APat (443, 4)
. (443, 8)
As (443, 9)
( (443, 12)
pat (443, 13)
, (443, 16)
ident (443, 18)
, (443, 23)
loc (443, 25)
) (443, 28)
, (443, 29)
tokens (443, 31)
, (443, 37)
errors (443, 39)
| (445, 2)
( (445, 4)
Token (445, 5)
. (445, 10)
As (445, 11)
, (445, 13)
_ (445, 15)
) (445, 16)
:: (445, 18)
tokens (445, 21)
-> (445, 28)
let (446, 4)
errors (446, 8)
= (446, 15)
parseNewError (446, 18)
"Expected an identifier" (446, 32)
( (446, 57)
tokens (446, 58)
, (446, 64)
errors (446, 66)
) (446, 72)
pat (447, 4)
, (447, 7)
tokens (447, 9)
, (447, 15)
errors (447, 17)
| (449, 2)
_ (449, 4)
-> (449, 6)
pat (450, 4)
, (450, 7)
tokens (450, 9)
, (450, 15)
errors (450, 17)
let (453, 0)
parsePatOr (453, 4)
baseLoc (453, 15)
( (453, 23)
tokens (453, 24)
, (453, 30)
errors (453, 32)
) (453, 38)
= (453, 40)
let (454, 2)
lPat (454, 6)
, (454, 10)
tokens (454, 12)
, (454, 18)
errors (454, 20)
= (454, 27)
parsePatAs (454, 29)
baseLoc (454, 40)
( (454, 48)
tokens (454, 49)
, (454, 55)
errors (454, 57)
) (454, 63)
match (456, 2)
tokens (456, 8)
with (456, 15)
| (457, 2)
( (457, 4)
Token (457, 5)
. (457, 10)
Pipe (457, 11)
, (457, 15)
loc (457, 17)
) (457, 20)
:: (457, 22)
tokens (457, 25)
-> (457, 32)
let (458, 4)
rPat (458, 8)
, (458, 12)
tokens (458, 14)
, (458, 20)
errors (458, 22)
= (458, 29)
parsePatOr (458, 31)
baseLoc (458, 42)
( (458, 50)
tokens (458, 51)
, (458, 57)
errors (458, 59)
) (458, 65)
APat (459, 4)
. (459, 8)
Or (459, 9)
( (459, 12)
lPat (459, 13)
, (459, 17)
rPat (459, 19)
, (459, 23)
loc (459, 25)
) (459, 28)
, (459, 29)
tokens (459, 31)
, (459, 37)
errors (459, 39)
| (461, 2)
_ (461, 4)
-> (461, 6)
lPat (462, 4)
, (462, 8)
tokens (462, 10)
, (462, 16)
errors (462, 18)
let (467, 0)
parsePatLet (467, 4)
baseLoc (467, 16)
( (467, 24)
tokens (467, 25)
, (467, 31)
errors (467, 33)
) (467, 39)
= (467, 41)
match (468, 2)
tokens (468, 8)
with (468, 15)
| (469, 2)
( (469, 4)
Token (469, 5)
. (469, 10)
Ident (469, 11)
callee (469, 17)
, (469, 23)
calleeLoc (469, 25)
) (469, 34)
:: (469, 36)
tokens (469, 39)
when (470, 4)
locInside (470, 9)
baseLoc (470, 19)
calleeLoc (470, 27)
&& (470, 37)
leadsPat (470, 40)
tokens (470, 49)
-> (470, 56)
let (471, 4)
args (471, 8)
, (471, 12)
tokens (471, 14)
, (471, 20)
errors (471, 22)
= (471, 29)
parsePatCallArgs (471, 31)
baseLoc (471, 48)
calleeLoc (471, 56)
( (471, 66)
tokens (471, 67)
, (471, 73)
errors (471, 75)
) (471, 81)
let (472, 4)
pat (472, 8)
= (472, 12)
APat (472, 14)
. (472, 18)
Fun (472, 19)
( (472, 23)
callee (472, 24)
, (472, 30)
args (472, 32)
, (472, 36)
calleeLoc (472, 38)
) (472, 47)
match (474, 4)
tokens (474, 10)
with (474, 17)
| (475, 4)
( (475, 6)
Token (475, 7)
. (475, 12)
Colon (475, 13)
, (475, 18)
loc (475, 20)
) (475, 23)
:: (475, 25)
tokens (475, 28)
-> (475, 35)
let (476, 6)
ty (476, 10)
, (476, 12)
tokens (476, 14)
, (476, 20)
errors (476, 22)
= (476, 29)
parseTy (476, 31)
baseLoc (476, 39)
( (476, 47)
tokens (476, 48)
, (476, 54)
errors (476, 56)
) (476, 62)
APat (477, 6)
. (477, 10)
Anno (477, 11)
( (477, 16)
pat (477, 17)
, (477, 20)
ty (477, 22)
, (477, 24)
loc (477, 26)
) (477, 29)
, (477, 30)
tokens (477, 32)
, (477, 38)
errors (477, 40)
| (479, 4)
_ (479, 6)
-> (479, 8)
pat (480, 6)
, (480, 9)
tokens (480, 11)
, (480, 17)
errors (480, 19)
| (482, 2)
_ (482, 4)
-> (482, 6)
parsePat (483, 4)
baseLoc (483, 13)
( (483, 21)
tokens (483, 22)
, (483, 28)
errors (483, 30)
) (483, 36)
let (486, 0)
parsePat (486, 4)
baseLoc (486, 13)
( (486, 21)
tokens (486, 22)
, (486, 28)
errors (486, 30)
) (486, 36)
= (486, 38)
if (487, 2)
not (487, 5)
( (487, 9)
nextInside (487, 10)
baseLoc (487, 21)
tokens (487, 29)
&& (487, 36)
leadsPat (487, 39)
tokens (487, 48)
) (487, 54)
then (487, 56)
parsePatError (488, 4)
"Expected a pattern" (488, 18)
( (488, 39)
tokens (488, 40)
, (488, 46)
errors (488, 48)
) (488, 54)
else (489, 2)
parsePatOr (490, 4)
baseLoc (490, 15)
( (490, 23)
tokens (490, 24)
, (490, 30)
errors (490, 32)
) (490, 38)
let (497, 0)
parseRange (497, 4)
baseLoc (497, 15)
( (497, 23)
tokens (497, 24)
, (497, 30)
errors (497, 32)
) (497, 38)
= (497, 40)
let (498, 2)
l (498, 6)
, (498, 7)
tokens (498, 9)
, (498, 15)
errors (498, 17)
= (498, 24)
parseExpr (498, 26)
baseLoc (498, 36)
( (498, 44)
tokens (498, 45)
, (498, 51)
errors (498, 53)
) (498, 59)
match (500, 2)
tokens (500, 8)
with (500, 15)
| (501, 2)
( (501, 4)
Token (501, 5)
. (501, 10)
DotDot (501, 11)
, (501, 17)
loc (501, 19)
) (501, 22)
:: (501, 24)
tokens (501, 27)
-> (501, 34)
let (502, 4)
r (502, 8)
, (502, 9)
tokens (502, 11)
, (502, 17)
errors (502, 19)
= (502, 26)
parseExpr (502, 28)
baseLoc (502, 38)
( (502, 46)
tokens (502, 47)
, (502, 53)
errors (502, 55)
) (502, 61)
AExpr (503, 4)
. (503, 9)
Range (503, 10)
( (503, 16)
[ (503, 17)
l (503, 18)
; (503, 19)
r (503, 21)
] (503, 22)
, (503, 23)
loc (503, 25)
) (503, 28)
, (503, 29)
tokens (503, 31)
, (503, 37)
errors (503, 39)
| (505, 2)
_ (505, 4)
-> (505, 6)
l (506, 4)
, (506, 5)
tokens (506, 7)
, (506, 13)
errors (506, 15)
let (508, 0)
parseList (508, 4)
baseLoc (508, 14)
bracketLoc (508, 22)
( (508, 33)
tokens (508, 34)
, (508, 40)
errors (508, 42)
) (508, 48)
= (508, 50)
let (509, 2)
items (509, 6)
, (509, 11)
tokens (509, 13)
, (509, 19)
errors (509, 21)
= (509, 28)
parseStmts (509, 30)
baseLoc (509, 41)
( (509, 49)
tokens (509, 50)
, (509, 56)
errors (509, 58)
) (509, 64)
let (511, 2)
tokens (511, 6)
, (511, 12)
errors (511, 14)
= (511, 21)
match (512, 4)
tokens (512, 10)
with (512, 17)
| (513, 4)
( (513, 6)
Token (513, 7)
. (513, 12)
BracketR (513, 13)
, (513, 21)
_ (513, 23)
) (513, 24)
:: (513, 26)
tokens (513, 29)
-> (513, 36)
tokens (514, 6)
, (514, 12)
errors (514, 14)
| (516, 4)
_ (516, 6)
-> (516, 8)
let (517, 6)
errors (517, 10)
= (517, 17)
parseNewError (517, 19)
"Expected \']\'" (517, 33)
( (517, 48)
tokens (517, 49)
, (517, 55)
errors (517, 57)
) (517, 63)
tokens (518, 6)
, (518, 12)
errors (518, 14)
AExpr (520, 2)
. (520, 7)
ListLit (520, 8)
( (520, 16)
items (520, 17)
, (520, 22)
bracketLoc (520, 24)
) (520, 34)
, (520, 35)
tokens (520, 37)
, (520, 43)
errors (520, 45)
let (522, 0)
parseThenClause (522, 4)
baseLoc (522, 20)
( (522, 28)
tokens (522, 29)
, (522, 35)
errors (522, 37)
) (522, 43)
= (522, 45)
let (523, 2)
innerBaseLoc (523, 6)
= (523, 19)
baseLoc (523, 21)
|> (523, 29)
locAddX (523, 32)
1 (523, 40)
match (525, 2)
tokens (525, 8)
with (525, 15)
| (526, 2)
( (526, 4)
Token (526, 5)
. (526, 10)
Then (526, 11)
, (526, 15)
thenLoc (526, 17)
) (526, 24)
:: (526, 26)
tokens (526, 29)
when (526, 36)
locInside (526, 41)
baseLoc (526, 51)
thenLoc (526, 59)
-> (526, 67)
parseSemi (527, 4)
innerBaseLoc (527, 14)
thenLoc (527, 27)
( (527, 35)
tokens (527, 36)
, (527, 42)
errors (527, 44)
) (527, 50)
| (529, 2)
_ (529, 4)
-> (529, 6)
parseExprError (530, 4)
"Expected \'then\'" (530, 19)
( (530, 37)
tokens (530, 38)
, (530, 44)
errors (530, 46)
) (530, 52)
let (532, 0)
parseElseClause (532, 4)
baseLoc (532, 20)
( (532, 28)
tokens (532, 29)
, (532, 35)
errors (532, 37)
) (532, 43)
= (532, 45)
match (533, 2)
tokens (533, 8)
with (533, 15)
| (534, 2)
( (534, 4)
Token (534, 5)
. (534, 10)
Else (534, 11)
, (534, 15)
elseLoc (534, 17)
) (534, 24)
:: (534, 26)
( (534, 29)
Token (534, 30)
. (534, 35)
If (534, 36)
, (534, 38)
nextIfLoc (534, 40)
) (534, 49)
:: (534, 51)
tokens (534, 54)
when (535, 4)
locInside (535, 9)
baseLoc (535, 19)
elseLoc (535, 27)
&& (535, 35)
locIsSameRow (535, 38)
elseLoc (535, 51)
nextIfLoc (535, 59)
-> (535, 69)
parseExpr (537, 4)
baseLoc (537, 14)
( (537, 22)
( (537, 23)
Token (537, 24)
. (537, 29)
If (537, 30)
, (537, 32)
elseLoc (537, 34)
) (537, 41)
:: (537, 43)
tokens (537, 46)
, (537, 52)
errors (537, 54)
) (537, 60)
| (539, 2)
( (539, 4)
Token (539, 5)
. (539, 10)
Else (539, 11)
, (539, 15)
elseLoc (539, 17)
) (539, 24)
:: (539, 26)
tokens (539, 29)
when (540, 4)
locInside (540, 9)
baseLoc (540, 19)
elseLoc (540, 27)
-> (540, 35)
parseSemi (541, 4)
baseLoc (541, 14)
elseLoc (541, 22)
( (541, 30)
tokens (541, 31)
, (541, 37)
errors (541, 39)
) (541, 45)
| (543, 2)
_ (543, 4)
-> (543, 6)
AExpr (544, 4)
. (544, 9)
Missing (544, 10)
baseLoc (544, 18)
, (544, 25)
tokens (544, 27)
, (544, 33)
errors (544, 35)
let (546, 0)
parseIf (546, 4)
ifLoc (546, 12)
( (546, 18)
tokens (546, 19)
, (546, 25)
errors (546, 27)
) (546, 33)
= (546, 35)
let (547, 2)
innerBaseLoc (547, 6)
= (547, 19)
ifLoc (547, 21)
|> (547, 27)
locAddX (547, 30)
1 (547, 38)
let (549, 2)
cond (549, 6)
, (549, 10)
tokens (549, 12)
, (549, 18)
errors (549, 20)
= (549, 27)
parseExpr (549, 29)
innerBaseLoc (549, 39)
( (549, 52)
tokens (549, 53)
, (549, 59)
errors (549, 61)
) (549, 67)
let (550, 2)
body (550, 6)
, (550, 10)
tokens (550, 12)
, (550, 18)
errors (550, 20)
= (550, 27)
parseThenClause (550, 29)
ifLoc (550, 45)
( (550, 51)
tokens (550, 52)
, (550, 58)
errors (550, 60)
) (550, 66)
let (551, 2)
alt (551, 6)
, (551, 9)
tokens (551, 11)
, (551, 17)
errors (551, 19)
= (551, 26)
parseElseClause (551, 28)
ifLoc (551, 44)
( (551, 50)
tokens (551, 51)
, (551, 57)
errors (551, 59)
) (551, 65)
AExpr (552, 2)
. (552, 7)
If (552, 8)
( (552, 11)
cond (552, 12)
, (552, 16)
body (552, 18)
, (552, 22)
alt (552, 24)
, (552, 27)
ifLoc (552, 29)
) (552, 34)
, (552, 35)
tokens (552, 37)
, (552, 43)
errors (552, 45)
let (555, 0)
parseMatchArm (555, 4)
matchLoc (555, 18)
armLoc (555, 27)
( (555, 34)
tokens (555, 35)
, (555, 41)
errors (555, 43)
) (555, 49)
= (555, 51)
let (556, 2)
innerBaseLoc (556, 6)
= (556, 19)
matchLoc (556, 21)
|> (556, 30)
locAddX (556, 33)
1 (556, 41)
let (558, 2)
pat (558, 6)
, (558, 9)
tokens (558, 11)
, (558, 17)
errors (558, 19)
= (558, 26)
parsePat (558, 28)
innerBaseLoc (558, 37)
( (558, 50)
tokens (558, 51)
, (558, 57)
errors (558, 59)
) (558, 65)
let (560, 2)
guard (560, 6)
, (560, 11)
tokens (560, 13)
, (560, 19)
errors (560, 21)
= (560, 28)
match (561, 4)
tokens (561, 10)
with (561, 17)
| (562, 4)
( (562, 6)
Token (562, 7)
. (562, 12)
When (562, 13)
, (562, 17)
_ (562, 19)
) (562, 20)
:: (562, 22)
tokens (562, 25)
-> (562, 32)
parseExpr (563, 6)
innerBaseLoc (563, 16)
( (563, 29)
tokens (563, 30)
, (563, 36)
errors (563, 38)
) (563, 44)
| (565, 4)
_ (565, 6)
-> (565, 8)
let (566, 6)
guard (566, 10)
= (566, 16)
AExpr (566, 18)
. (566, 23)
Missing (566, 24)
( (566, 32)
nextLoc (566, 33)
tokens (566, 41)
) (566, 47)
guard (567, 6)
, (567, 11)
tokens (567, 13)
, (567, 19)
errors (567, 21)
let (569, 2)
body (569, 6)
, (569, 10)
tokens (569, 12)
, (569, 18)
errors (569, 20)
= (569, 27)
match (570, 4)
tokens (570, 10)
with (570, 17)
| (571, 4)
( (571, 6)
Token (571, 7)
. (571, 12)
Arrow (571, 13)
, (571, 18)
arrowLoc (571, 20)
) (571, 28)
:: (571, 30)
tokens (571, 33)
-> (571, 40)
parseSemi (572, 6)
matchLoc (572, 16)
arrowLoc (572, 25)
( (572, 34)
tokens (572, 35)
, (572, 41)
errors (572, 43)
) (572, 49)
| (574, 4)
_ (574, 6)
-> (574, 8)
parseExprError (575, 6)
"Expected \'->\'" (575, 21)
( (575, 37)
tokens (575, 38)
, (575, 44)
errors (575, 46)
) (575, 52)
AArm (577, 2)
( (577, 7)
pat (577, 8)
, (577, 11)
guard (577, 13)
, (577, 18)
body (577, 20)
, (577, 24)
armLoc (577, 26)
) (577, 32)
, (577, 33)
tokens (577, 35)
, (577, 41)
errors (577, 43)
let (579, 0)
parseMatch (579, 4)
matchLoc (579, 15)
( (579, 24)
tokens (579, 25)
, (579, 31)
errors (579, 33)
) (579, 39)
= (579, 41)
let (580, 2)
target (580, 6)
, (580, 12)
tokens (580, 14)
, (580, 20)
errors (580, 22)
= (580, 29)
parseExpr (580, 31)
matchLoc (580, 41)
( (580, 50)
tokens (580, 51)
, (580, 57)
errors (580, 59)
) (580, 65)
let (582, 2)
armLoc (582, 6)
, (582, 12)
tokens (582, 14)
, (582, 20)
errors (582, 22)
= (582, 29)
match (583, 4)
tokens (583, 10)
with (583, 17)
| (584, 4)
( (584, 6)
Token (584, 7)
. (584, 12)
With (584, 13)
, (584, 17)
_ (584, 19)
) (584, 20)
:: (584, 22)
( (584, 25)
Token (584, 26)
. (584, 31)
Pipe (584, 32)
, (584, 36)
pipeLoc (584, 38)
) (584, 45)
:: (584, 47)
tokens (584, 50)
-> (584, 57)
pipeLoc (585, 6)
, (585, 13)
tokens (585, 15)
, (585, 21)
errors (585, 23)
| (587, 4)
( (587, 6)
Token (587, 7)
. (587, 12)
With (587, 13)
, (587, 17)
withLoc (587, 19)
) (587, 26)
:: (587, 28)
tokens (587, 31)
-> (587, 38)
withLoc (588, 6)
, (588, 13)
tokens (588, 15)
, (588, 21)
errors (588, 23)
| (590, 4)
_ (590, 6)
-> (590, 8)
let (591, 6)
errors (591, 10)
= (591, 17)
parseNewError (591, 19)
"Expected \'with\'" (591, 33)
( (591, 51)
tokens (591, 52)
, (591, 58)
errors (591, 60)
) (591, 66)
matchLoc (592, 6)
, (592, 14)
tokens (592, 16)
, (592, 22)
errors (592, 24)
let (594, 2)
rec (594, 6)
go (594, 10)
acc (594, 13)
armLoc (594, 17)
( (594, 24)
tokens (594, 25)
, (594, 31)
errors (594, 33)
) (594, 39)
= (594, 41)
let (595, 4)
arm (595, 8)
, (595, 11)
tokens (595, 13)
, (595, 19)
errors (595, 21)
= (595, 28)
parseMatchArm (595, 30)
matchLoc (595, 44)
armLoc (595, 53)
( (595, 60)
tokens (595, 61)
, (595, 67)
errors (595, 69)
) (595, 75)
match (597, 4)
tokens (597, 10)
with (597, 17)
| (598, 4)
( (598, 6)
Token (598, 7)
. (598, 12)
Pipe (598, 13)
, (598, 17)
pipeLoc (598, 19)
) (598, 26)
:: (598, 28)
tokens (598, 31)
when (598, 38)
locInside (598, 43)
matchLoc (598, 53)
pipeLoc (598, 62)
-> (598, 70)
go (599, 6)
( (599, 9)
arm (599, 10)
:: (599, 14)
acc (599, 17)
) (599, 20)
pipeLoc (599, 22)
( (599, 30)
tokens (599, 31)
, (599, 37)
errors (599, 39)
) (599, 45)
| (601, 4)
_ (601, 6)
-> (601, 8)
listRev (602, 6)
( (602, 14)
arm (602, 15)
:: (602, 19)
acc (602, 22)
) (602, 25)
, (602, 26)
tokens (602, 28)
, (602, 34)
errors (602, 36)
let (604, 2)
arms (604, 6)
, (604, 10)
tokens (604, 12)
, (604, 18)
errors (604, 20)
= (604, 27)
go (604, 29)
[ (604, 32)
] (604, 33)
armLoc (604, 35)
( (604, 42)
tokens (604, 43)
, (604, 49)
errors (604, 51)
) (604, 57)
AExpr (605, 2)
. (605, 7)
Match (605, 8)
( (605, 14)
target (605, 15)
, (605, 21)
arms (605, 23)
, (605, 27)
matchLoc (605, 29)
) (605, 37)
, (605, 38)
tokens (605, 40)
, (605, 46)
errors (605, 48)
let (608, 0)
parseFun (608, 4)
baseLoc (608, 13)
funLoc (608, 21)
( (608, 28)
tokens (608, 29)
, (608, 35)
errors (608, 37)
) (608, 43)
= (608, 45)
let (609, 2)
pats (609, 6)
, (609, 10)
tokens (609, 12)
, (609, 18)
errors (609, 20)
= (609, 27)
parsePatCallArgs (609, 29)
baseLoc (609, 46)
funLoc (609, 54)
( (609, 61)
tokens (609, 62)
, (609, 68)
errors (609, 70)
) (609, 76)
let (611, 2)
body (611, 6)
, (611, 10)
tokens (611, 12)
, (611, 18)
errors (611, 20)
= (611, 27)
match (612, 4)
tokens (612, 10)
with (612, 17)
| (613, 4)
( (613, 6)
Token (613, 7)
. (613, 12)
Arrow (613, 13)
, (613, 18)
arrowLoc (613, 20)
) (613, 28)
:: (613, 30)
tokens (613, 33)
-> (613, 40)
parseSemi (614, 6)
baseLoc (614, 16)
arrowLoc (614, 24)
( (614, 33)
tokens (614, 34)
, (614, 40)
errors (614, 42)
) (614, 48)
| (616, 4)
_ (616, 6)
-> (616, 8)
parseExprError (617, 6)
"Missing \'->\'" (617, 21)
( (617, 36)
tokens (617, 37)
, (617, 43)
errors (617, 45)
) (617, 51)
AExpr (619, 2)
. (619, 7)
Fun (619, 8)
( (619, 12)
pats (619, 13)
, (619, 17)
body (619, 19)
, (619, 23)
funLoc (619, 25)
) (619, 31)
, (619, 32)
tokens (619, 34)
, (619, 40)
errors (619, 42)
let (621, 0)
parseParenBody (621, 4)
baseLoc (621, 19)
parenLoc (621, 27)
( (621, 36)
tokens (621, 37)
, (621, 43)
errors (621, 45)
) (621, 51)
= (621, 53)
let (622, 2)
body (622, 6)
, (622, 10)
tokens (622, 12)
, (622, 18)
errors (622, 20)
= (622, 27)
parseSemi (622, 29)
baseLoc (622, 39)
parenLoc (622, 47)
( (622, 56)
tokens (622, 57)
, (622, 63)
errors (622, 65)
) (622, 71)
match (624, 2)
tokens (624, 8)
with (624, 15)
| (625, 2)
( (625, 4)
Token (625, 5)
. (625, 10)
ParenR (625, 11)
, (625, 17)
_ (625, 19)
) (625, 20)
:: (625, 22)
tokens (625, 25)
-> (625, 32)
body (626, 4)
, (626, 8)
tokens (626, 10)
, (626, 16)
errors (626, 18)
| (628, 2)
_ (628, 4)
-> (628, 6)
let (629, 4)
errors (629, 8)
= (629, 15)
parseNewError (629, 17)
"Expected \')\'" (629, 31)
( (629, 46)
tokens (629, 47)
, (629, 53)
errors (629, 55)
) (629, 61)
body (630, 4)
, (630, 8)
tokens (630, 10)
, (630, 16)
errors (630, 18)
let (632, 0)
parseAccessModifier (632, 4)
tokens (632, 24)
= (632, 31)
match (633, 2)
tokens (633, 8)
with (633, 15)
| (634, 2)
( (634, 4)
t (634, 5)
, (634, 6)
_ (634, 8)
) (634, 9)
:: (634, 11)
tokens (634, 14)
when (634, 21)
t (634, 26)
|> (634, 28)
tokenIsAccessModifier (634, 31)
-> (634, 53)
tokens (636, 4)
| (638, 2)
_ (638, 4)
-> (638, 6)
tokens (639, 4)
let (641, 0)
parseLet (641, 4)
letLoc (641, 13)
( (641, 20)
tokens (641, 21)
, (641, 27)
errors (641, 29)
) (641, 35)
= (641, 37)
let (642, 2)
innerBaseLoc (642, 6)
= (642, 19)
letLoc (642, 21)
|> (642, 28)
locAddX (642, 31)
1 (642, 39)
let (644, 2)
tokens (644, 6)
= (644, 13)
parseAccessModifier (644, 15)
tokens (644, 35)
let (646, 2)
pat (646, 6)
, (646, 9)
tokens (646, 11)
, (646, 17)
errors (646, 19)
= (646, 26)
parsePatLet (646, 28)
innerBaseLoc (646, 40)
( (646, 53)
tokens (646, 54)
, (646, 60)
errors (646, 62)
) (646, 68)
let (648, 2)
body (648, 6)
, (648, 10)
tokens (648, 12)
, (648, 18)
errors (648, 20)
= (648, 27)
match (649, 4)
tokens (649, 10)
with (649, 17)
| (650, 4)
( (650, 6)
Token (650, 7)
. (650, 12)
Eq (650, 13)
, (650, 15)
eqLoc (650, 17)
) (650, 22)
:: (650, 24)
tokens (650, 27)
-> (650, 34)
parseSemi (651, 6)
innerBaseLoc (651, 16)
eqLoc (651, 29)
( (651, 35)
tokens (651, 36)
, (651, 42)
errors (651, 44)
) (651, 50)
| (653, 4)
_ (653, 6)
-> (653, 8)
parseExprError (654, 6)
"Missing \'=\'" (654, 21)
( (654, 35)
tokens (654, 36)
, (654, 42)
errors (654, 44)
) (654, 50)
let (656, 2)
next (656, 6)
, (656, 10)
tokens (656, 12)
, (656, 18)
errors (656, 20)
= (656, 27)
match (657, 4)
tokens (657, 10)
with (657, 17)
| (658, 4)
( (658, 6)
Token (658, 7)
. (658, 12)
In (658, 13)
, (658, 15)
inLoc (658, 17)
) (658, 22)
:: (658, 24)
tokens (658, 27)
when (658, 34)
locInside (658, 39)
letLoc (658, 49)
inLoc (658, 56)
-> (658, 62)
parseSemi (659, 6)
letLoc (659, 16)
inLoc (659, 23)
( (659, 29)
tokens (659, 30)
, (659, 36)
errors (659, 38)
) (659, 44)
| (661, 4)
_ (661, 6)
:: (661, 8)
_ (661, 11)
when (661, 13)
locIsSameColumn (661, 18)
( (661, 34)
nextLoc (661, 35)
tokens (661, 43)
) (661, 49)
letLoc (661, 51)
-> (661, 58)
parseSemi (663, 6)
letLoc (663, 16)
( (663, 23)
nextLoc (663, 24)
tokens (663, 32)
) (663, 38)
( (663, 40)
tokens (663, 41)
, (663, 47)
errors (663, 49)
) (663, 55)
| (665, 4)
tokens (665, 6)
-> (665, 13)
AExpr (666, 6)
. (666, 11)
TupleLit (666, 12)
( (666, 21)
[ (666, 22)
] (666, 23)
, (666, 24)
letLoc (666, 26)
) (666, 32)
, (666, 33)
tokens (666, 35)
, (666, 41)
errors (666, 43)
AExpr (668, 2)
. (668, 7)
Let (668, 8)
( (668, 12)
pat (668, 13)
, (668, 16)
body (668, 18)
, (668, 22)
next (668, 24)
, (668, 28)
letLoc (668, 30)
) (668, 36)
, (668, 37)
tokens (668, 39)
, (668, 45)
errors (668, 47)
let (670, 0)
parseTyDecl (670, 4)
typeLoc (670, 16)
( (670, 24)
tokens (670, 25)
, (670, 31)
errors (670, 33)
) (670, 39)
= (670, 41)
let (671, 2)
baseLoc (671, 6)
= (671, 14)
typeLoc (671, 16)
|> (671, 24)
locAddX (671, 27)
1 (671, 35)
let (673, 2)
tokens (673, 6)
= (673, 13)
parseAccessModifier (673, 15)
tokens (673, 35)
match (675, 2)
tokens (675, 8)
with (675, 15)
| (676, 2)
( (676, 4)
Token (676, 5)
. (676, 10)
Ident (676, 11)
tyIdent (676, 17)
, (676, 24)
_ (676, 26)
) (676, 27)
:: (676, 29)
tokens (676, 32)
-> (676, 39)
match (677, 4)
tokens (677, 10)
with (677, 17)
| (678, 4)
( (678, 6)
Token (678, 7)
. (678, 12)
Eq (678, 13)
, (678, 15)
_ (678, 17)
) (678, 18)
:: (678, 20)
tokens (678, 23)
-> (678, 30)
let (679, 6)
tyDecl (679, 10)
, (679, 16)
tokens (679, 18)
, (679, 24)
errors (679, 26)
= (679, 33)
parseTyDeclBody (679, 35)
baseLoc (679, 51)
( (679, 59)
tokens (679, 60)
, (679, 66)
errors (679, 68)
) (679, 74)
let (681, 6)
expr (681, 10)
= (681, 15)
match (682, 8)
tyDecl (682, 14)
with (682, 21)
| (683, 8)
ATyDecl (683, 10)
. (683, 17)
Synonym (683, 18)
ty (683, 26)
-> (683, 29)
AExpr (684, 10)
. (684, 15)
TySynonym (684, 16)
( (684, 26)
tyIdent (684, 27)
, (684, 34)
ty (684, 36)
, (684, 38)
typeLoc (684, 40)
) (684, 47)
| (686, 8)
ATyDecl (686, 10)
. (686, 17)
Union (686, 18)
variants (686, 24)
-> (686, 33)
AExpr (687, 10)
. (687, 15)
TyUnion (687, 16)
( (687, 24)
tyIdent (687, 25)
, (687, 32)
variants (687, 34)
, (687, 42)
typeLoc (687, 44)
) (687, 51)
expr (689, 6)
, (689, 10)
tokens (689, 12)
, (689, 18)
errors (689, 20)
| (691, 4)
_ (691, 6)
-> (691, 8)
let (692, 6)
ty (692, 10)
, (692, 12)
tokens (692, 14)
, (692, 20)
errors (692, 22)
= (692, 29)
parseTyError (692, 31)
"Expected \'=\'" (692, 44)
( (692, 59)
tokens (692, 60)
, (692, 66)
errors (692, 68)
) (692, 74)
AExpr (693, 6)
. (693, 11)
TySynonym (693, 12)
( (693, 22)
tyIdent (693, 23)
, (693, 30)
ty (693, 32)
, (693, 34)
typeLoc (693, 36)
) (693, 43)
, (693, 44)
tokens (693, 46)
, (693, 52)
errors (693, 54)
| (695, 2)
_ (695, 4)
-> (695, 6)
parseExprError (696, 4)
"Expected identifier" (696, 19)
( (696, 41)
tokens (696, 42)
, (696, 48)
errors (696, 50)
) (696, 56)
let (699, 0)
parseOpen (699, 4)
openLoc (699, 14)
( (699, 22)
tokens (699, 23)
, (699, 29)
errors (699, 31)
) (699, 37)
= (699, 39)
let (700, 2)
parsePath (700, 6)
( (700, 16)
tokens (700, 17)
, (700, 23)
errors (700, 25)
) (700, 31)
= (700, 33)
let (701, 4)
rec (701, 8)
go (701, 12)
acc (701, 15)
( (701, 19)
tokens (701, 20)
, (701, 26)
errors (701, 28)
) (701, 34)
= (701, 36)
match (702, 6)
tokens (702, 12)
with (702, 19)
| (703, 6)
( (703, 8)
Token (703, 9)
. (703, 14)
Dot (703, 15)
, (703, 18)
_ (703, 20)
) (703, 21)
:: (703, 23)
( (703, 26)
Token (703, 27)
. (703, 32)
Ident (703, 33)
ident (703, 39)
, (703, 44)
_ (703, 46)
) (703, 47)
:: (703, 49)
tokens (703, 52)
-> (703, 59)
go (704, 8)
( (704, 11)
ident (704, 12)
:: (704, 18)
acc (704, 21)
) (704, 24)
( (704, 26)
tokens (704, 27)
, (704, 33)
errors (704, 35)
) (704, 41)
| (706, 6)
( (706, 8)
Token (706, 9)
. (706, 14)
Dot (706, 15)
, (706, 18)
_ (706, 20)
) (706, 21)
:: (706, 23)
tokens (706, 26)
-> (706, 33)
let (707, 8)
errors (707, 12)
= (707, 19)
parseNewError (707, 21)
"Expected identifier" (707, 35)
( (707, 57)
tokens (707, 58)
, (707, 64)
errors (707, 66)
) (707, 72)
listRev (708, 8)
acc (708, 16)
, (708, 19)
tokens (708, 21)
, (708, 27)
errors (708, 29)
| (710, 6)
_ (710, 8)
-> (710, 10)
listRev (711, 8)
acc (711, 16)
, (711, 19)
tokens (711, 21)
, (711, 27)
errors (711, 29)
match (713, 4)
tokens (713, 10)
with (713, 17)
| (714, 4)
( (714, 6)
Token (714, 7)
. (714, 12)
Ident (714, 13)
ident (714, 19)
, (714, 24)
_ (714, 26)
) (714, 27)
:: (714, 29)
tokens (714, 32)
-> (714, 39)
go (715, 6)
[ (715, 9)
ident (715, 10)
] (715, 15)
( (715, 17)
tokens (715, 18)
, (715, 24)
errors (715, 26)
) (715, 32)
| (717, 4)
_ (717, 6)
-> (717, 8)
let (718, 6)
errors (718, 10)
= (718, 17)
parseNewError (718, 19)
"Expected identifier" (718, 33)
( (718, 55)
tokens (718, 56)
, (718, 62)
errors (718, 64)
) (718, 70)
[ (719, 6)
] (719, 7)
, (719, 8)
tokens (719, 10)
, (719, 16)
errors (719, 18)
let (721, 2)
path (721, 6)
, (721, 10)
tokens (721, 12)
, (721, 18)
errors (721, 20)
= (721, 27)
parsePath (721, 29)
( (721, 39)
tokens (721, 40)
, (721, 46)
errors (721, 48)
) (721, 54)
AExpr (722, 2)
. (722, 7)
Open (722, 8)
( (722, 13)
path (722, 14)
, (722, 18)
openLoc (722, 20)
) (722, 27)
, (722, 28)
tokens (722, 30)
, (722, 36)
errors (722, 38)
let (724, 0)
parseAtom (724, 4)
baseLoc (724, 14)
( (724, 22)
tokens (724, 23)
, (724, 29)
errors (724, 31)
) (724, 37)
= (724, 39)
match (725, 2)
tokens (725, 8)
with (725, 15)
| (726, 2)
_ (726, 4)
when (726, 6)
not (726, 11)
( (726, 15)
nextInside (726, 16)
baseLoc (726, 27)
tokens (726, 35)
) (726, 41)
-> (726, 43)
parseExprError (727, 4)
"Expected an expression" (727, 19)
( (727, 44)
tokens (727, 45)
, (727, 51)
errors (727, 53)
) (727, 59)
| (729, 2)
( (729, 4)
Token (729, 5)
. (729, 10)
ParenL (729, 11)
, (729, 17)
loc (729, 19)
) (729, 22)
:: (729, 24)
( (729, 27)
Token (729, 28)
. (729, 33)
ParenR (729, 34)
, (729, 40)
_ (729, 42)
) (729, 43)
:: (729, 45)
tokens (729, 48)
-> (729, 55)
AExpr (730, 4)
. (730, 9)
TupleLit (730, 10)
( (730, 19)
[ (730, 20)
] (730, 21)
, (730, 22)
loc (730, 24)
) (730, 27)
, (730, 28)
tokens (730, 30)
, (730, 36)
errors (730, 38)
| (732, 2)
( (732, 4)
Token (732, 5)
. (732, 10)
Bool (732, 11)
value (732, 16)
, (732, 21)
loc (732, 23)
) (732, 26)
:: (732, 28)
tokens (732, 31)
-> (732, 38)
AExpr (733, 4)
. (733, 9)
Lit (733, 10)
( (733, 14)
Lit (733, 15)
. (733, 18)
Bool (733, 19)
value (733, 24)
, (733, 29)
loc (733, 31)
) (733, 34)
, (733, 35)
tokens (733, 37)
, (733, 43)
errors (733, 45)
| (735, 2)
( (735, 4)
Token (735, 5)
. (735, 10)
Int (735, 11)
value (735, 15)
, (735, 20)
loc (735, 22)
) (735, 25)
:: (735, 27)
tokens (735, 30)
-> (735, 37)
AExpr (736, 4)
. (736, 9)
Lit (736, 10)
( (736, 14)
Lit (736, 15)
. (736, 18)
Int (736, 19)
value (736, 23)
, (736, 28)
loc (736, 30)
) (736, 33)
, (736, 34)
tokens (736, 36)
, (736, 42)
errors (736, 44)
| (738, 2)
( (738, 4)
Token (738, 5)
. (738, 10)
Char (738, 11)
value (738, 16)
, (738, 21)
loc (738, 23)
) (738, 26)
:: (738, 28)
tokens (738, 31)
-> (738, 38)
AExpr (739, 4)
. (739, 9)
Lit (739, 10)
( (739, 14)
Lit (739, 15)
. (739, 18)
Char (739, 19)
value (739, 24)
, (739, 29)
loc (739, 31)
) (739, 34)
, (739, 35)
tokens (739, 37)
, (739, 43)
errors (739, 45)
| (741, 2)
( (741, 4)
Token (741, 5)
. (741, 10)
Str (741, 11)
value (741, 15)
, (741, 20)
loc (741, 22)
) (741, 25)
:: (741, 27)
tokens (741, 30)
-> (741, 37)
AExpr (742, 4)
. (742, 9)
Lit (742, 10)
( (742, 14)
Lit (742, 15)
. (742, 18)
Str (742, 19)
value (742, 23)
, (742, 28)
loc (742, 30)
) (742, 33)
, (742, 34)
tokens (742, 36)
, (742, 42)
errors (742, 44)
| (744, 2)
( (744, 4)
Token (744, 5)
. (744, 10)
Ident (744, 11)
ident (744, 17)
, (744, 22)
loc (744, 24)
) (744, 27)
:: (744, 29)
tokens (744, 32)
-> (744, 39)
AExpr (745, 4)
. (745, 9)
Ident (745, 10)
( (745, 16)
ident (745, 17)
, (745, 22)
loc (745, 24)
) (745, 27)
, (745, 28)
tokens (745, 30)
, (745, 36)
errors (745, 38)
| (747, 2)
( (747, 4)
Token (747, 5)
. (747, 10)
ParenL (747, 11)
, (747, 17)
parenLoc (747, 19)
) (747, 27)
:: (747, 29)
tokens (747, 32)
-> (747, 39)
parseParenBody (748, 4)
baseLoc (748, 19)
parenLoc (748, 27)
( (748, 36)
tokens (748, 37)
, (748, 43)
errors (748, 45)
) (748, 51)
| (750, 2)
( (750, 4)
Token (750, 5)
. (750, 10)
BracketL (750, 11)
, (750, 19)
bracketLoc (750, 21)
) (750, 31)
:: (750, 33)
tokens (750, 36)
-> (750, 43)
parseList (751, 4)
baseLoc (751, 14)
bracketLoc (751, 22)
( (751, 33)
tokens (751, 34)
, (751, 40)
errors (751, 42)
) (751, 48)
| (753, 2)
( (753, 4)
Token (753, 5)
. (753, 10)
If (753, 11)
, (753, 13)
loc (753, 15)
) (753, 18)
:: (753, 20)
tokens (753, 23)
-> (753, 30)
parseIf (754, 4)
loc (754, 12)
( (754, 16)
tokens (754, 17)
, (754, 23)
errors (754, 25)
) (754, 31)
| (756, 2)
( (756, 4)
Token (756, 5)
. (756, 10)
Match (756, 11)
, (756, 16)
loc (756, 18)
) (756, 21)
:: (756, 23)
tokens (756, 26)
-> (756, 33)
parseMatch (757, 4)
loc (757, 15)
( (757, 19)
tokens (757, 20)
, (757, 26)
errors (757, 28)
) (757, 34)
| (759, 2)
( (759, 4)
Token (759, 5)
. (759, 10)
Fun (759, 11)
, (759, 14)
loc (759, 16)
) (759, 19)
:: (759, 21)
tokens (759, 24)
-> (759, 31)
parseFun (760, 4)
baseLoc (760, 13)
loc (760, 21)
( (760, 25)
tokens (760, 26)
, (760, 32)
errors (760, 34)
) (760, 40)
| (762, 2)
( (762, 4)
Token (762, 5)
. (762, 10)
Let (762, 11)
, (762, 14)
letLoc (762, 16)
) (762, 22)
:: (762, 24)
tokens (762, 27)
-> (762, 34)
parseLet (763, 4)
letLoc (763, 13)
( (763, 20)
tokens (763, 21)
, (763, 27)
errors (763, 29)
) (763, 35)
| (765, 2)
_ (765, 4)
-> (765, 6)
parseExprError (766, 4)
"Expected an expression" (766, 19)
( (766, 44)
tokens (766, 45)
, (766, 51)
errors (766, 53)
) (766, 59)
let (769, 0)
parseSuffix (769, 4)
baseLoc (769, 16)
( (769, 24)
tokens (769, 25)
, (769, 31)
errors (769, 33)
) (769, 39)
= (769, 41)
let (770, 2)
l (770, 6)
, (770, 7)
tokens (770, 9)
, (770, 15)
errors (770, 17)
= (770, 24)
parseAtom (770, 26)
baseLoc (770, 36)
( (770, 44)
tokens (770, 45)
, (770, 51)
errors (770, 53)
) (770, 59)
let (772, 2)
rec (772, 6)
go (772, 10)
acc (772, 13)
( (772, 17)
tokens (772, 18)
, (772, 24)
errors (772, 26)
) (772, 32)
= (772, 34)
match (773, 4)
tokens (773, 10)
with (773, 17)
| (774, 4)
( (774, 6)
Token (774, 7)
. (774, 12)
Dot (774, 13)
, (774, 16)
loc (774, 18)
) (774, 21)
:: (774, 23)
( (774, 26)
Token (774, 27)
. (774, 32)
BracketL (774, 33)
, (774, 41)
_ (774, 43)
) (774, 44)
:: (774, 46)
tokens (774, 49)
-> (774, 56)
let (775, 6)
r (775, 10)
, (775, 11)
tokens (775, 13)
, (775, 19)
errors (775, 21)
= (775, 28)
parseRange (775, 30)
baseLoc (775, 41)
( (775, 49)
tokens (775, 50)
, (775, 56)
errors (775, 58)
) (775, 64)
let (777, 6)
tokens (777, 10)
, (777, 16)
errors (777, 18)
= (777, 25)
match (778, 8)
tokens (778, 14)
with (778, 21)
| (779, 8)
( (779, 10)
Token (779, 11)
. (779, 16)
BracketR (779, 17)
, (779, 25)
_ (779, 27)
) (779, 28)
:: (779, 30)
tokens (779, 33)
-> (779, 40)
tokens (780, 10)
, (780, 16)
errors (780, 18)
| (782, 8)
_ (782, 10)
-> (782, 12)
let (783, 10)
errors (783, 14)
= (783, 21)
parseNewError (783, 23)
"Expected closing \']\'" (783, 37)
( (783, 60)
tokens (783, 61)
, (783, 67)
errors (783, 69)
) (783, 75)
tokens (784, 10)
, (784, 16)
errors (784, 18)
go (786, 6)
( (786, 9)
AExpr (786, 10)
. (786, 15)
Index (786, 16)
( (786, 22)
acc (786, 23)
, (786, 26)
r (786, 28)
, (786, 29)
loc (786, 31)
) (786, 34)
) (786, 35)
( (786, 37)
tokens (786, 38)
, (786, 44)
errors (786, 46)
) (786, 52)
| (788, 4)
( (788, 6)
Token (788, 7)
. (788, 12)
Dot (788, 13)
, (788, 16)
loc (788, 18)
) (788, 21)
:: (788, 23)
( (788, 26)
Token (788, 27)
. (788, 32)
Ident (788, 33)
r (788, 39)
, (788, 40)
_ (788, 42)
) (788, 43)
:: (788, 45)
tokens (788, 48)
-> (788, 55)
go (789, 6)
( (789, 9)
AExpr (789, 10)
. (789, 15)
Nav (789, 16)
( (789, 20)
acc (789, 21)
, (789, 24)
r (789, 26)
, (789, 27)
loc (789, 29)
) (789, 32)
) (789, 33)
( (789, 35)
tokens (789, 36)
, (789, 42)
errors (789, 44)
) (789, 50)
| (791, 4)
( (791, 6)
Token (791, 7)
. (791, 12)
Dot (791, 13)
, (791, 16)
_ (791, 18)
) (791, 19)
:: (791, 21)
tokens (791, 24)
-> (791, 31)
let (792, 6)
errors (792, 10)
= (792, 17)
parseNewError (792, 19)
"Expected .[] or .field" (792, 33)
( (792, 58)
tokens (792, 59)
, (792, 65)
errors (792, 67)
) (792, 73)
acc (793, 6)
, (793, 9)
tokens (793, 11)
, (793, 17)
errors (793, 19)
| (795, 4)
_ (795, 6)
-> (795, 8)
acc (796, 6)
, (796, 9)
tokens (796, 11)
, (796, 17)
errors (796, 19)
go (798, 2)
l (798, 5)
( (798, 7)
tokens (798, 8)
, (798, 14)
errors (798, 16)
) (798, 22)
let (801, 0)
parseApp (801, 4)
baseLoc (801, 13)
( (801, 21)
tokens (801, 22)
, (801, 28)
errors (801, 30)
) (801, 36)
= (801, 38)
let (802, 2)
calleeLoc (802, 6)
= (802, 16)
nextLoc (802, 18)
tokens (802, 26)
let (803, 2)
argBaseLoc (803, 6)
= (803, 17)
calleeLoc (803, 19)
|> (803, 29)
locAddX (803, 32)
1 (803, 40)
let (805, 2)
callee (805, 6)
, (805, 12)
tokens (805, 14)
, (805, 20)
errors (805, 22)
= (805, 29)
parseSuffix (805, 31)
baseLoc (805, 43)
( (805, 51)
tokens (805, 52)
, (805, 58)
errors (805, 60)
) (805, 66)
let (807, 2)
rec (807, 6)
go (807, 10)
callee (807, 13)
( (807, 20)
tokens (807, 21)
, (807, 27)
errors (807, 29)
) (807, 35)
= (807, 37)
if (808, 4)
nextInside (808, 7)
argBaseLoc (808, 18)
tokens (808, 29)
&& (808, 36)
leadsArg (808, 39)
tokens (808, 48)
then (808, 55)
let (809, 6)
arg (809, 10)
, (809, 13)
tokens (809, 15)
, (809, 21)
errors (809, 23)
= (809, 30)
parseSuffix (809, 32)
baseLoc (809, 44)
( (809, 52)
tokens (809, 53)
, (809, 59)
errors (809, 61)
) (809, 67)
go (810, 6)
( (810, 9)
AExpr (810, 10)
. (810, 15)
Bin (810, 16)
( (810, 20)
Op (810, 21)
. (810, 23)
App (810, 24)
, (810, 27)
callee (810, 29)
, (810, 35)
arg (810, 37)
, (810, 40)
calleeLoc (810, 42)
) (810, 51)
) (810, 52)
( (810, 54)
tokens (810, 55)
, (810, 61)
errors (810, 63)
) (810, 69)
else (811, 4)
callee (812, 6)
, (812, 12)
tokens (812, 14)
, (812, 20)
errors (812, 22)
go (814, 2)
callee (814, 5)
( (814, 12)
tokens (814, 13)
, (814, 19)
errors (814, 21)
) (814, 27)
let (817, 0)
parsePrefix (817, 4)
baseLoc (817, 16)
( (817, 24)
tokens (817, 25)
, (817, 31)
errors (817, 33)
) (817, 39)
= (817, 41)
match (818, 2)
tokens (818, 8)
with (818, 15)
| (819, 2)
( (819, 4)
Token (819, 5)
. (819, 10)
Minus (819, 11)
, (819, 16)
loc (819, 18)
) (819, 21)
:: (819, 23)
tokens (819, 26)
-> (819, 33)
let (820, 4)
arg (820, 8)
, (820, 11)
tokens (820, 13)
, (820, 19)
errors (820, 21)
= (820, 28)
parseApp (820, 30)
baseLoc (820, 39)
( (820, 47)
tokens (820, 48)
, (820, 54)
errors (820, 56)
) (820, 62)
AExpr (821, 4)
. (821, 9)
Uni (821, 10)
( (821, 14)
UniOp (821, 15)
. (821, 20)
Neg (821, 21)
, (821, 24)
arg (821, 26)
, (821, 29)
loc (821, 31)
) (821, 34)
, (821, 35)
tokens (821, 37)
, (821, 43)
errors (821, 45)
| (823, 2)
_ (823, 4)
-> (823, 6)
parseApp (824, 4)
baseLoc (824, 13)
( (824, 21)
tokens (824, 22)
, (824, 28)
errors (824, 30)
) (824, 36)
let (826, 0)
parseNextLevelOp (826, 4)
level (826, 21)
baseLoc (826, 27)
( (826, 35)
tokens (826, 36)
, (826, 42)
errors (826, 44)
) (826, 50)
= (826, 52)
match (827, 2)
opLevelToNext (827, 8)
level (827, 22)
with (827, 28)
| (828, 2)
OpLevel (828, 4)
. (828, 11)
Prefix (828, 12)
-> (828, 19)
parsePrefix (829, 4)
baseLoc (829, 16)
( (829, 24)
tokens (829, 25)
, (829, 31)
errors (829, 33)
) (829, 39)
| (831, 2)
nextLevel (831, 4)
-> (831, 14)
parseOp (832, 4)
nextLevel (832, 12)
baseLoc (832, 22)
( (832, 30)
tokens (832, 31)
, (832, 37)
errors (832, 39)
) (832, 45)
let (834, 0)
rec (834, 4)
parseOps (834, 8)
level (834, 17)
baseLoc (834, 23)
first (834, 31)
( (834, 37)
tokens (834, 38)
, (834, 44)
errors (834, 46)
) (834, 52)
= (834, 54)
let (835, 2)
nextL (835, 6)
expr (835, 12)
op (835, 17)
opLoc (835, 20)
( (835, 26)
tokens (835, 27)
, (835, 33)
errors (835, 35)
) (835, 41)
= (835, 43)
let (836, 4)
second (836, 8)
, (836, 14)
tokens (836, 16)
, (836, 22)
errors (836, 24)
= (836, 31)
parseNextLevelOp (836, 33)
level (836, 50)
baseLoc (836, 56)
( (836, 64)
tokens (836, 65)
, (836, 71)
errors (836, 73)
) (836, 79)
let (837, 4)
expr (837, 8)
= (837, 13)
AExpr (837, 15)
. (837, 20)
Bin (837, 21)
( (837, 25)
op (837, 26)
, (837, 28)
expr (837, 30)
, (837, 34)
second (837, 36)
, (837, 42)
opLoc (837, 44)
) (837, 49)
parseOps (838, 4)
level (838, 13)
baseLoc (838, 19)
expr (838, 27)
( (838, 32)
tokens (838, 33)
, (838, 39)
errors (838, 41)
) (838, 47)
let (840, 2)
nextR (840, 6)
expr (840, 12)
op (840, 17)
opLoc (840, 20)
( (840, 26)
tokens (840, 27)
, (840, 33)
errors (840, 35)
) (840, 41)
= (840, 43)
let (841, 4)
second (841, 8)
, (841, 14)
tokens (841, 16)
, (841, 22)
errors (841, 24)
= (841, 31)
parseOp (841, 33)
level (841, 41)
baseLoc (841, 47)
( (841, 55)
tokens (841, 56)
, (841, 62)
errors (841, 64)
) (841, 70)
let (842, 4)
expr (842, 8)
= (842, 13)
AExpr (842, 15)
. (842, 20)
Bin (842, 21)
( (842, 25)
op (842, 26)
, (842, 28)
expr (842, 30)
, (842, 34)
second (842, 36)
, (842, 42)
opLoc (842, 44)
) (842, 49)
parseOps (843, 4)
level (843, 13)
baseLoc (843, 19)
expr (843, 27)
( (843, 32)
tokens (843, 33)
, (843, 39)
errors (843, 41)
) (843, 47)
match (845, 2)
level (845, 8)
, (845, 13)
tokens (845, 15)
with (845, 22)
| (846, 2)
OpLevel (846, 4)
. (846, 11)
Or (846, 12)
, (846, 14)
( (846, 16)
Token (846, 17)
. (846, 22)
PipePipe (846, 23)
, (846, 31)
opLoc (846, 33)
) (846, 38)
:: (846, 40)
tokens (846, 43)
-> (846, 50)
nextL (847, 4)
first (847, 10)
Op (847, 16)
. (847, 18)
Or (847, 19)
opLoc (847, 22)
( (847, 28)
tokens (847, 29)
, (847, 35)
errors (847, 37)
) (847, 43)
| (849, 2)
OpLevel (849, 4)
. (849, 11)
And (849, 12)
, (849, 15)
( (849, 17)
Token (849, 18)
. (849, 23)
AmpAmp (849, 24)
, (849, 30)
opLoc (849, 32)
) (849, 37)
:: (849, 39)
tokens (849, 42)
-> (849, 49)
nextL (850, 4)
first (850, 10)
Op (850, 16)
. (850, 18)
And (850, 19)
opLoc (850, 23)
( (850, 29)
tokens (850, 30)
, (850, 36)
errors (850, 38)
) (850, 44)
| (852, 2)
OpLevel (852, 4)
. (852, 11)
Cmp (852, 12)
, (852, 15)
( (852, 17)
Token (852, 18)
. (852, 23)
Eq (852, 24)
, (852, 26)
opLoc (852, 28)
) (852, 33)
:: (852, 35)
tokens (852, 38)
-> (852, 45)
nextL (853, 4)
first (853, 10)
Op (853, 16)
. (853, 18)
Eq (853, 19)
opLoc (853, 22)
( (853, 28)
tokens (853, 29)
, (853, 35)
errors (853, 37)
) (853, 43)
| (855, 2)
OpLevel (855, 4)
. (855, 11)
Cmp (855, 12)
, (855, 15)
( (855, 17)
Token (855, 18)
. (855, 23)
LtGt (855, 24)
, (855, 28)
opLoc (855, 30)
) (855, 35)
:: (855, 37)
tokens (855, 40)
-> (855, 47)
nextL (856, 4)
first (856, 10)
Op (856, 16)
. (856, 18)
Ne (856, 19)
opLoc (856, 22)
( (856, 28)
tokens (856, 29)
, (856, 35)
errors (856, 37)
) (856, 43)
| (858, 2)
OpLevel (858, 4)
. (858, 11)
Cmp (858, 12)
, (858, 15)
( (858, 17)
Token (858, 18)
. (858, 23)
Lt (858, 24)
, (858, 26)
opLoc (858, 28)
) (858, 33)
:: (858, 35)
tokens (858, 38)
-> (858, 45)
nextL (859, 4)
first (859, 10)
Op (859, 16)
. (859, 18)
Lt (859, 19)
opLoc (859, 22)
( (859, 28)
tokens (859, 29)
, (859, 35)
errors (859, 37)
) (859, 43)
| (861, 2)
OpLevel (861, 4)
. (861, 11)
Cmp (861, 12)
, (861, 15)
( (861, 17)
Token (861, 18)
. (861, 23)
LtEq (861, 24)
, (861, 28)
opLoc (861, 30)
) (861, 35)
:: (861, 37)
tokens (861, 40)
-> (861, 47)
nextL (862, 4)
first (862, 10)
Op (862, 16)
. (862, 18)
Le (862, 19)
opLoc (862, 22)
( (862, 28)
tokens (862, 29)
, (862, 35)
errors (862, 37)
) (862, 43)
| (864, 2)
OpLevel (864, 4)
. (864, 11)
Cmp (864, 12)
, (864, 15)
( (864, 17)
Token (864, 18)
. (864, 23)
Gt (864, 24)
, (864, 26)
opLoc (864, 28)
) (864, 33)
:: (864, 35)
tokens (864, 38)
-> (864, 45)
nextL (865, 4)
first (865, 10)
Op (865, 16)
. (865, 18)
Gt (865, 19)
opLoc (865, 22)
( (865, 28)
tokens (865, 29)
, (865, 35)
errors (865, 37)
) (865, 43)
| (867, 2)
OpLevel (867, 4)
. (867, 11)
Cmp (867, 12)
, (867, 15)
( (867, 17)
Token (867, 18)
. (867, 23)
GtEq (867, 24)
, (867, 28)
opLoc (867, 30)
) (867, 35)
:: (867, 37)
tokens (867, 40)
-> (867, 47)
nextL (868, 4)
first (868, 10)
Op (868, 16)
. (868, 18)
Ge (868, 19)
opLoc (868, 22)
( (868, 28)
tokens (868, 29)
, (868, 35)
errors (868, 37)
) (868, 43)
| (870, 2)
OpLevel (870, 4)
. (870, 11)
Pipe (870, 12)
, (870, 16)
( (870, 18)
Token (870, 19)
. (870, 24)
PipeGt (870, 25)
, (870, 31)
opLoc (870, 33)
) (870, 38)
:: (870, 40)
tokens (870, 43)
-> (870, 50)
nextL (871, 4)
first (871, 10)
Op (871, 16)
. (871, 18)
Pipe (871, 19)
opLoc (871, 24)
( (871, 30)
tokens (871, 31)
, (871, 37)
errors (871, 39)
) (871, 45)
| (873, 2)
OpLevel (873, 4)
. (873, 11)
Cons (873, 12)
, (873, 16)
( (873, 18)
Token (873, 19)
. (873, 24)
ColonColon (873, 25)
, (873, 35)
opLoc (873, 37)
) (873, 42)
:: (873, 44)
tokens (873, 47)
-> (873, 54)
nextR (874, 4)
first (874, 10)
Op (874, 16)
. (874, 18)
Cons (874, 19)
opLoc (874, 24)
( (874, 30)
tokens (874, 31)
, (874, 37)
errors (874, 39)
) (874, 45)
| (876, 2)
OpLevel (876, 4)
. (876, 11)
Add (876, 12)
, (876, 15)
( (876, 17)
Token (876, 18)
. (876, 23)
Plus (876, 24)
, (876, 28)
opLoc (876, 30)
) (876, 35)
:: (876, 37)
tokens (876, 40)
-> (876, 47)
nextL (877, 4)
first (877, 10)
Op (877, 16)
. (877, 18)
Add (877, 19)
opLoc (877, 23)
( (877, 29)
tokens (877, 30)
, (877, 36)
errors (877, 38)
) (877, 44)
| (879, 2)
OpLevel (879, 4)
. (879, 11)
Add (879, 12)
, (879, 15)
( (879, 17)
Token (879, 18)
. (879, 23)
Minus (879, 24)
, (879, 29)
opLoc (879, 31)
) (879, 36)
:: (879, 38)
tokens (879, 41)
-> (879, 48)
nextL (880, 4)
first (880, 10)
Op (880, 16)
. (880, 18)
Sub (880, 19)
opLoc (880, 23)
( (880, 29)
tokens (880, 30)
, (880, 36)
errors (880, 38)
) (880, 44)
| (882, 2)
OpLevel (882, 4)
. (882, 11)
Mul (882, 12)
, (882, 15)
( (882, 17)
Token (882, 18)
. (882, 23)
Star (882, 24)
, (882, 28)
opLoc (882, 30)
) (882, 35)
:: (882, 37)
tokens (882, 40)
-> (882, 47)
nextL (883, 4)
first (883, 10)
Op (883, 16)
. (883, 18)
Mul (883, 19)
opLoc (883, 23)
( (883, 29)
tokens (883, 30)
, (883, 36)
errors (883, 38)
) (883, 44)
| (885, 2)
OpLevel (885, 4)
. (885, 11)
Mul (885, 12)
, (885, 15)
( (885, 17)
Token (885, 18)
. (885, 23)
Slash (885, 24)
, (885, 29)
opLoc (885, 31)
) (885, 36)
:: (885, 38)
tokens (885, 41)
-> (885, 48)
nextL (886, 4)
first (886, 10)
Op (886, 16)
. (886, 18)
Div (886, 19)
opLoc (886, 23)
( (886, 29)
tokens (886, 30)
, (886, 36)
errors (886, 38)
) (886, 44)
| (888, 2)
OpLevel (888, 4)
. (888, 11)
Mul (888, 12)
, (888, 15)
( (888, 17)
Token (888, 18)
. (888, 23)
Percent (888, 24)
, (888, 31)
opLoc (888, 33)
) (888, 38)
:: (888, 40)
tokens (888, 43)
-> (888, 50)
nextL (889, 4)
first (889, 10)
Op (889, 16)
. (889, 18)
Mod (889, 19)
opLoc (889, 23)
( (889, 29)
tokens (889, 30)
, (889, 36)
errors (889, 38)
) (889, 44)
| (891, 2)
_ (891, 4)
-> (891, 6)
first (892, 4)
, (892, 9)
tokens (892, 11)
, (892, 17)
errors (892, 19)
let (895, 0)
parseOp (895, 4)
level (895, 12)
baseLoc (895, 18)
( (895, 26)
tokens (895, 27)
, (895, 33)
errors (895, 35)
) (895, 41)
= (895, 43)
let (896, 2)
first (896, 6)
, (896, 11)
tokens (896, 13)
, (896, 19)
errors (896, 21)
= (896, 28)
parseNextLevelOp (896, 30)
level (896, 47)
baseLoc (896, 53)
( (896, 61)
tokens (896, 62)
, (896, 68)
errors (896, 70)
) (896, 76)
parseOps (897, 2)
level (897, 11)
baseLoc (897, 17)
first (897, 25)
( (897, 31)
tokens (897, 32)
, (897, 38)
errors (897, 40)
) (897, 46)
let (899, 0)
parseTupleItem (899, 4)
baseLoc (899, 19)
( (899, 27)
tokens (899, 28)
, (899, 34)
errors (899, 36)
) (899, 42)
= (899, 44)
parseOp (900, 2)
OpLevel (900, 10)
. (900, 17)
Or (900, 18)
baseLoc (900, 21)
( (900, 29)
tokens (900, 30)
, (900, 36)
errors (900, 38)
) (900, 44)
let (903, 0)
parseTuple (903, 4)
baseLoc (903, 15)
( (903, 23)
tokens (903, 24)
, (903, 30)
errors (903, 32)
) (903, 38)
= (903, 40)
let (904, 2)
rec (904, 6)
go (904, 10)
acc (904, 13)
( (904, 17)
tokens (904, 18)
, (904, 24)
errors (904, 26)
) (904, 32)
= (904, 34)
match (905, 4)
tokens (905, 10)
with (905, 17)
| (906, 4)
( (906, 6)
Token (906, 7)
. (906, 12)
Comma (906, 13)
, (906, 18)
_ (906, 20)
) (906, 21)
:: (906, 23)
tokens (906, 26)
-> (906, 33)
let (907, 6)
second (907, 10)
, (907, 16)
tokens (907, 18)
, (907, 24)
errors (907, 26)
= (907, 33)
parseTupleItem (907, 35)
baseLoc (907, 50)
( (907, 58)
tokens (907, 59)
, (907, 65)
errors (907, 67)
) (907, 73)
go (908, 6)
( (908, 9)
second (908, 10)
:: (908, 17)
acc (908, 20)
) (908, 23)
( (908, 25)
tokens (908, 26)
, (908, 32)
errors (908, 34)
) (908, 40)
| (910, 4)
tokens (910, 6)
-> (910, 13)
listRev (911, 6)
acc (911, 14)
, (911, 17)
tokens (911, 19)
, (911, 25)
errors (911, 27)
let (913, 2)
item (913, 6)
, (913, 10)
tokens (913, 12)
, (913, 18)
errors (913, 20)
= (913, 27)
parseTupleItem (913, 29)
baseLoc (913, 44)
( (913, 52)
tokens (913, 53)
, (913, 59)
errors (913, 61)
) (913, 67)
match (915, 2)
tokens (915, 8)
with (915, 15)
| (916, 2)
( (916, 4)
Token (916, 5)
. (916, 10)
Comma (916, 11)
, (916, 16)
loc (916, 18)
) (916, 21)
:: (916, 23)
_ (916, 26)
-> (916, 28)
let (917, 4)
items (917, 8)
, (917, 13)
tokens (917, 15)
, (917, 21)
errors (917, 23)
= (917, 30)
go (917, 32)
[ (917, 35)
] (917, 36)
( (917, 38)
tokens (917, 39)
, (917, 45)
errors (917, 47)
) (917, 53)
AExpr (918, 4)
. (918, 9)
TupleLit (918, 10)
( (918, 19)
item (918, 20)
:: (918, 25)
items (918, 28)
, (918, 33)
loc (918, 35)
) (918, 38)
, (918, 39)
tokens (918, 41)
, (918, 47)
errors (918, 49)
| (920, 2)
_ (920, 4)
-> (920, 6)
item (921, 4)
, (921, 8)
tokens (921, 10)
, (921, 16)
errors (921, 18)
let (924, 0)
parseAnno (924, 4)
baseLoc (924, 14)
( (924, 22)
tokens (924, 23)
, (924, 29)
errors (924, 31)
) (924, 37)
= (924, 39)
let (925, 2)
body (925, 6)
, (925, 10)
tokens (925, 12)
, (925, 18)
errors (925, 20)
= (925, 27)
parseTuple (925, 29)
baseLoc (925, 40)
( (925, 48)
tokens (925, 49)
, (925, 55)
errors (925, 57)
) (925, 63)
match (927, 2)
tokens (927, 8)
with (927, 15)
| (928, 2)
( (928, 4)
Token (928, 5)
. (928, 10)
Colon (928, 11)
, (928, 16)
loc (928, 18)
) (928, 21)
:: (928, 23)
tokens (928, 26)
-> (928, 33)
let (929, 4)
ty (929, 8)
, (929, 10)
tokens (929, 12)
, (929, 18)
errors (929, 20)
= (929, 27)
parseTy (929, 29)
baseLoc (929, 37)
( (929, 45)
tokens (929, 46)
, (929, 52)
errors (929, 54)
) (929, 60)
AExpr (930, 4)
. (930, 9)
Anno (930, 10)
( (930, 15)
body (930, 16)
, (930, 20)
ty (930, 22)
, (930, 24)
loc (930, 26)
) (930, 29)
, (930, 30)
tokens (930, 32)
, (930, 38)
errors (930, 40)
| (932, 2)
_ (932, 4)
-> (932, 6)
body (933, 4)
, (933, 8)
tokens (933, 10)
, (933, 16)
errors (933, 18)
let (935, 0)
parseExpr (935, 4)
baseLoc (935, 14)
( (935, 22)
tokens (935, 23)
, (935, 29)
errors (935, 31)
) (935, 37)
= (935, 39)
parseAnno (936, 2)
baseLoc (936, 12)
( (936, 20)
tokens (936, 21)
, (936, 27)
errors (936, 29)
) (936, 35)
let (938, 0)
parseStmt (938, 4)
baseLoc (938, 14)
( (938, 22)
tokens (938, 23)
, (938, 29)
errors (938, 31)
) (938, 37)
= (938, 39)
match (939, 2)
tokens (939, 8)
with (939, 15)
| (940, 2)
( (940, 4)
Token (940, 5)
. (940, 10)
Let (940, 11)
, (940, 14)
letLoc (940, 16)
) (940, 22)
:: (940, 24)
( (940, 27)
Token (940, 28)
. (940, 33)
Rec (940, 34)
, (940, 37)
_ (940, 39)
) (940, 40)
:: (940, 42)
tokens (940, 45)
-> (940, 52)
parseLet (942, 4)
letLoc (942, 13)
( (942, 20)
tokens (942, 21)
, (942, 27)
errors (942, 29)
) (942, 35)
| (944, 2)
( (944, 4)
Token (944, 5)
. (944, 10)
Let (944, 11)
, (944, 14)
letLoc (944, 16)
) (944, 22)
:: (944, 24)
tokens (944, 27)
-> (944, 34)
parseLet (945, 4)
letLoc (945, 13)
( (945, 20)
tokens (945, 21)
, (945, 27)
errors (945, 29)
) (945, 35)
| (947, 2)
( (947, 4)
Token (947, 5)
. (947, 10)
Type (947, 11)
, (947, 15)
typeLoc (947, 17)
) (947, 24)
:: (947, 26)
tokens (947, 29)
-> (947, 36)
parseTyDecl (948, 4)
typeLoc (948, 16)
( (948, 24)
tokens (948, 25)
, (948, 31)
errors (948, 33)
) (948, 39)
| (950, 2)
( (950, 4)
Token (950, 5)
. (950, 10)
Open (950, 11)
, (950, 15)
typeLoc (950, 17)
) (950, 24)
:: (950, 26)
tokens (950, 29)
-> (950, 36)
parseOpen (951, 4)
typeLoc (951, 14)
( (951, 22)
tokens (951, 23)
, (951, 29)
errors (951, 31)
) (951, 37)
| (953, 2)
_ (953, 4)
-> (953, 6)
parseExpr (954, 4)
baseLoc (954, 14)
( (954, 22)
tokens (954, 23)
, (954, 29)
errors (954, 31)
) (954, 37)
let (959, 0)
rec (959, 4)
parseStmts (959, 8)
baseLoc (959, 19)
( (959, 27)
tokens (959, 28)
, (959, 34)
errors (959, 36)
) (959, 42)
= (959, 44)
let (960, 2)
rec (960, 6)
go (960, 10)
acc (960, 13)
alignLoc (960, 17)
( (960, 26)
tokens (960, 27)
, (960, 33)
errors (960, 35)
) (960, 41)
= (960, 43)
match (961, 4)
tokens (961, 10)
with (961, 17)
| (962, 4)
( (962, 6)
Token (962, 7)
. (962, 12)
Semi (962, 13)
, (962, 17)
semiLoc (962, 19)
) (962, 26)
:: (962, 28)
tokens (962, 31)
when (963, 6)
locInside (963, 11)
alignLoc (963, 21)
semiLoc (963, 30)
-> (963, 38)
let (964, 6)
expr (964, 10)
, (964, 14)
tokens (964, 16)
, (964, 22)
errors (964, 24)
= (964, 31)
parseStmt (964, 33)
baseLoc (964, 43)
( (964, 51)
tokens (964, 52)
, (964, 58)
errors (964, 60)
) (964, 66)
go (965, 6)
( (965, 9)
expr (965, 10)
:: (965, 15)
acc (965, 18)
) (965, 21)
alignLoc (965, 23)
( (965, 32)
tokens (965, 33)
, (965, 39)
errors (965, 41)
) (965, 47)
| (967, 4)
_ (967, 6)
when (967, 8)
locIsSameColumn (967, 13)
alignLoc (967, 29)
( (967, 38)
nextLoc (967, 39)
tokens (967, 47)
) (967, 53)
&& (967, 55)
leadsExpr (967, 58)
tokens (967, 68)
-> (967, 75)
let (968, 6)
expr (968, 10)
, (968, 14)
tokens (968, 16)
, (968, 22)
errors (968, 24)
= (968, 31)
parseStmt (968, 33)
baseLoc (968, 43)
( (968, 51)
tokens (968, 52)
, (968, 58)
errors (968, 60)
) (968, 66)
go (969, 6)
( (969, 9)
expr (969, 10)
:: (969, 15)
acc (969, 18)
) (969, 21)
alignLoc (969, 23)
( (969, 32)
tokens (969, 33)
, (969, 39)
errors (969, 41)
) (969, 47)
| (971, 4)
_ (971, 6)
-> (971, 8)
listRev (972, 6)
acc (972, 14)
, (972, 17)
tokens (972, 19)
, (972, 25)
errors (972, 27)
let (974, 2)
alignLoc (974, 6)
= (974, 15)
nextLoc (974, 17)
tokens (974, 25)
if (975, 2)
locInside (975, 5)
baseLoc (975, 15)
alignLoc (975, 23)
then (975, 32)
go (976, 4)
[ (976, 7)
] (976, 8)
alignLoc (976, 10)
( (976, 19)
tokens (976, 20)
, (976, 26)
errors (976, 28)
) (976, 34)
else (977, 2)
[ (978, 4)
] (978, 5)
, (978, 6)
tokens (978, 8)
, (978, 14)
errors (978, 16)
let (986, 0)
parseSemi (986, 4)
baseLoc (986, 14)
mainLoc (986, 22)
( (986, 30)
tokens (986, 31)
, (986, 37)
errors (986, 39)
) (986, 45)
= (986, 47)
let (987, 2)
items (987, 6)
, (987, 11)
tokens (987, 13)
, (987, 19)
errors (987, 21)
= (987, 28)
parseStmts (987, 30)
baseLoc (987, 41)
( (987, 49)
tokens (987, 50)
, (987, 56)
errors (987, 58)
) (987, 64)
match (989, 2)
items (989, 8)
with (989, 14)
| (990, 2)
[ (990, 4)
] (990, 5)
-> (990, 7)
parseExprError (991, 4)
"Expected statements" (991, 19)
( (991, 41)
tokens (991, 42)
, (991, 48)
errors (991, 50)
) (991, 56)
| (993, 2)
[ (993, 4)
item (993, 5)
] (993, 9)
-> (993, 11)
item (994, 4)
, (994, 8)
tokens (994, 10)
, (994, 16)
errors (994, 18)
| (996, 2)
_ (996, 4)
-> (996, 6)
AExpr (997, 4)
. (997, 9)
Semi (997, 10)
( (997, 15)
items (997, 16)
, (997, 21)
mainLoc (997, 23)
) (997, 30)
, (997, 31)
tokens (997, 33)
, (997, 39)
errors (997, 41)
let (1000, 0)
parseTopLevel (1000, 4)
( (1000, 18)
tokens (1000, 19)
, (1000, 25)
errors (1000, 27)
) (1000, 33)
= (1000, 35)
let (1001, 2)
topLoc (1001, 6)
= (1001, 13)
0 (1001, 15)
, (1001, 16)
0 (1001, 18)
match (1003, 2)
tokens (1003, 8)
with (1003, 15)
| (1004, 2)
[ (1004, 4)
] (1004, 5)
-> (1004, 7)
AExpr (1005, 4)
. (1005, 9)
TupleLit (1005, 10)
( (1005, 19)
[ (1005, 20)
] (1005, 21)
, (1005, 22)
topLoc (1005, 24)
) (1005, 30)
, (1005, 31)
tokens (1005, 33)
, (1005, 39)
errors (1005, 41)
| (1007, 2)
( (1007, 4)
Token (1007, 5)
. (1007, 10)
Module (1007, 11)
, (1007, 17)
moduleLoc (1007, 19)
) (1007, 28)
:: (1008, 4)
( (1008, 7)
Token (1008, 8)
. (1008, 13)
Rec (1008, 14)
, (1008, 17)
_ (1008, 19)
) (1008, 20)
:: (1009, 4)
( (1009, 7)
Token (1009, 8)
. (1009, 13)
Ident (1009, 14)
_ (1009, 20)
, (1009, 21)
_ (1009, 23)
) (1009, 24)
:: (1010, 4)
( (1010, 7)
Token (1010, 8)
. (1010, 13)
Dot (1010, 14)
, (1010, 17)
_ (1010, 19)
) (1010, 20)
:: (1011, 4)
( (1011, 7)
Token (1011, 8)
. (1011, 13)
Ident (1011, 14)
_ (1011, 20)
, (1011, 21)
_ (1011, 23)
) (1011, 24)
:: (1011, 26)
tokens (1011, 29)
-> (1011, 36)
parseSemi (1012, 4)
moduleLoc (1012, 14)
moduleLoc (1012, 24)
( (1012, 34)
tokens (1012, 35)
, (1012, 41)
errors (1012, 43)
) (1012, 49)
| (1014, 2)
( (1014, 4)
Token (1014, 5)
. (1014, 10)
Module (1014, 11)
, (1014, 17)
moduleLoc (1014, 19)
) (1014, 28)
:: (1015, 4)
( (1015, 7)
Token (1015, 8)
. (1015, 13)
Rec (1015, 14)
, (1015, 17)
_ (1015, 19)
) (1015, 20)
:: (1016, 4)
( (1016, 7)
Token (1016, 8)
. (1016, 13)
Ident (1016, 14)
_ (1016, 20)
, (1016, 21)
_ (1016, 23)
) (1016, 24)
:: (1016, 26)
tokens (1016, 29)
-> (1016, 36)
parseSemi (1017, 4)
moduleLoc (1017, 14)
moduleLoc (1017, 24)
( (1017, 34)
tokens (1017, 35)
, (1017, 41)
errors (1017, 43)
) (1017, 49)
| (1019, 2)
( (1019, 4)
Token (1019, 5)
. (1019, 10)
Module (1019, 11)
, (1019, 17)
moduleLoc (1019, 19)
) (1019, 28)
:: (1020, 4)
( (1020, 7)
Token (1020, 8)
. (1020, 13)
Ident (1020, 14)
_ (1020, 20)
, (1020, 21)
_ (1020, 23)
) (1020, 24)
:: (1020, 26)
tokens (1020, 29)
-> (1020, 36)
parseSemi (1021, 4)
moduleLoc (1021, 14)
moduleLoc (1021, 24)
( (1021, 34)
tokens (1021, 35)
, (1021, 41)
errors (1021, 43)
) (1021, 49)
| (1023, 2)
_ (1023, 4)
-> (1023, 6)
parseSemi (1024, 4)
topLoc (1024, 14)
topLoc (1024, 21)
( (1024, 28)
tokens (1024, 29)
, (1024, 35)
errors (1024, 37)
) (1024, 43)
let (1026, 0)
parse (1026, 4)
( (1026, 10)
tokens (1026, 11)
: (1026, 17)
( (1026, 19)
Token (1026, 20)
* (1026, 26)
Loc (1026, 28)
) (1026, 31)
list (1026, 33)
) (1026, 37)
: (1026, 38)
AExpr (1026, 40)
* (1026, 46)
( (1026, 48)
string (1026, 49)
* (1026, 56)
Loc (1026, 58)
) (1026, 61)
list (1026, 63)
= (1026, 68)
let (1027, 2)
expr (1027, 6)
, (1027, 10)
tokens (1027, 12)
, (1027, 18)
errors (1027, 20)
= (1027, 27)
parseTopLevel (1027, 29)
( (1027, 43)
tokens (1027, 44)
, (1027, 50)
[ (1027, 52)
] (1027, 53)
) (1027, 54)
let (1029, 2)
errors (1029, 6)
= (1029, 13)
match (1030, 4)
tokens (1030, 10)
with (1030, 17)
| (1031, 4)
[ (1031, 6)
] (1031, 7)
-> (1031, 9)
errors (1032, 6)
| (1034, 4)
_ (1034, 6)
-> (1034, 8)
parseNewError (1035, 6)
"Expected eof" (1035, 20)
( (1035, 35)
tokens (1035, 36)
, (1035, 42)
errors (1035, 44)
) (1035, 50)
expr (1037, 2)
, (1037, 6)
errors (1037, 8)
AST:
semi:
- open:
  - MiloneLang
  - Types
- open:
  - MiloneLang
  - Helpers
- let:
  - fun:
    - leadsExpr
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (88:21)
      bin:
      - tokenIsExprFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (91:7)
      false
  let:
  - fun:
    - leadsArg
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (96:21)
      bin:
      - tokenIsArgFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (99:7)
      false
  let:
  - fun:
    - leadsPat
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - token
          - _
        _
      - ERROR:
        - missing
        - (104:21)
      bin:
      - tokenIsPatFirst
      - token
    - arm:
      - _
      - ERROR:
        - missing
        - (107:7)
      false
  let:
  - anno:
    - fun:
      - nextLoc
      - tokens
    - Loc
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (113:8)
      tuple:
      - -: 1
      - 0
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - ERROR:
        - missing
        - (116:19)
      loc
  let:
  - anno:
    - fun:
      - nextInside
      - baseLoc
      - tokens
    - bool
  - match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (122:8)
      false
    - arm:
      - cons:
        - tuple:
          - _
          - loc
        _
      - bin:
        - bin:
          - locInside
          - baseLoc
        - loc
      true
    - arm:
      - _
      - ERROR:
        - missing
        - (130:7)
      false
  let:
  - fun:
    - parseErrorCore
    - msg
    - loc
    - tokens
    - errors
  - let:
    - near
    - bin:
      - bin:
        - tokens
        - bin:
          - listMap
          - fst
      - bin:
        - listTruncate
        - 6
    let:
    - msg
    - bin:
      - bin:
        - bin:
          - sprintf
          - \"Parse error %s near %A\"
        - msg
      - near
    bin:
    - tuple:
      - msg
      - loc
    - errors
  let:
  - fun:
    - parseTyError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: ATy
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parsePatError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: APat
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseExprError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    let:
    - errors
    - bin:
      - bin:
        - bin:
          - bin:
            - parseErrorCore
            - msg
          - loc
        - tokens
      - errors
    tuple:
    - bin:
      - .Missing: AExpr
      - loc
    - tokens
    - errors
  let:
  - fun:
    - parseNewError
    - msg
    - tuple:
      - tokens
      - errors
  - let:
    - loc
    - bin:
      - nextLoc
      - tokens
    bin:
    - bin:
      - bin:
        - bin:
          - parseErrorCore
          - msg
        - loc
      - tokens
    - errors
  let:
  - fun:
    - parseTyAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - not
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (170:40)
      tuple:
      - bin:
        - .Ident: ATy
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (173:33)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .ParenR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (177:35)
        tuple:
        - ty
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (180:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\')\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - ty
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (184:7)
      bin:
      - bin:
        - parseTyError
        - \"Expected a type atom\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTySuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - tuple:
        - ty
        - tokens
        - errors
    - let:
      - inside
      - bin:
        - bin:
          - nextInside
          - baseLoc
        - tokens
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - loc
          tokens
        - inside
        bin:
        - go
        - tuple:
          - bin:
            - .Suffix: ATy
            - tuple:
              - ty
              - ident
              - loc
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (195:9)
        tuple:
        - ty
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - parseTyAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    - go
  let:
  - fun:
    - parseTyPrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Colon: Token
          - _
        tokens
      - ERROR:
        - missing
        - (204:54)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (207:7)
      bin:
      - bin:
        - parseTySuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseTyTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Star: Token
            - _
          tokens
        - ERROR:
          - missing
          - (214:33)
        let:
        - tuple:
          - itemTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyPrefix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - itemTy
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (218:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyPrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Star: Token
          - opLoc
        _
      - ERROR:
        - missing
        - (224:30)
      let:
      - tuple:
        - itemTys
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Tuple: ATy
        - tuple:
          - bin:
            - itemTy
            - itemTys
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (228:7)
      tuple:
      - itemTy
      - tokens
      - errors
  let:
  - fun:
    - parseTyFun
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - sTy
      - tokens
      - errors
    - bin:
      - bin:
        - parseTyTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Arrow: Token
          - opLoc
        tokens
      - ERROR:
        - missing
        - (237:36)
      let:
      - tuple:
        - tTy
        - tokens
        - errors
      - bin:
        - bin:
          - parseTyFun
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Fun: ATy
        - tuple:
          - sTy
          - tTy
          - opLoc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (241:7)
      tuple:
      - sTy
      - tokens
      - errors
  let:
  - fun:
    - parseTy
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseTyFun
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTyDeclUnion
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          cons:
          - tuple:
            - .Of: Token
            - _
          tokens
        - ERROR:
          - missing
          - (253:34)
        let:
        - tuple:
          - payloadTy
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - bin:
                  - Some
                  - payloadTy
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - _
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - variantIdent
            - loc
          tokens
        - ERROR:
          - missing
          - (258:52)
        bin:
        - bin:
          - go
          - bin:
            - bin:
              - AVariant
              - tuple:
                - variantIdent
                - None
                - loc
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (261:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - variants
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Union: ATyDecl
      - variants
    - tokens
    - errors
  let:
  - fun:
    - parseTyDeclBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - _
        _
      - ERROR:
        - missing
        - (271:26)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Of: Token
          - _
        _
      - ERROR:
        - missing
        - (274:46)
      bin:
      - bin:
        - parseTyDeclUnion
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (277:7)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Synonym: ATyDecl
        - ty
      - tokens
      - errors
  let:
  - fun:
    - parsePatParenBody
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (290:33)
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - tokens
      - ERROR:
        - missing
        - (293:12)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatListBody
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - patAcc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (301:37)
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - _
          tokens
        - ERROR:
          - missing
          - (305:33)
        let:
        - tuple:
          - pat
          - tokens
          - errors
        - bin:
          - bin:
            - parsePat
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - pat
            - patAcc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (309:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\';\\\' or \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - listRev
          - patAcc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - itemPats
      - tokens
      - errors
    - bin:
      - bin:
        - go
        - list: itemPat
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: APat
      - tuple:
        - itemPats
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parsePatAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - bin:
              - nextInside
              - baseLoc
            - tokens
          - bin:
            - leadsPat
            - tokens
      bin:
      - bin:
        - parsePatError
        - \"Expected a pattern atom\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (322:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (325:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (328:39)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (331:38)
      tuple:
      - bin:
        - .Lit: APat
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (334:40)
      tuple:
      - bin:
        - .Ident: APat
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (337:56)
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - _
        tokens
      - ERROR:
        - missing
        - (340:33)
      bin:
      - bin:
        - parsePatParenBody
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        cons:
        - tuple:
          - .BracketR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (343:60)
      tuple:
      - bin:
        - .ListLit: APat
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (346:37)
      bin:
      - bin:
        - bin:
          - parsePatListBody
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (349:7)
      bin:
      - bin:
        - parsePatError
        - \"NEVER: The token must be a pat\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePatNav
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (357:58)
      tuple:
      - bin:
        - .Nav: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Dot: Token
          - _
        tokens
      - ERROR:
        - missing
        - (360:30)
      bin:
      - bin:
        - parsePatError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (363:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatCallArgs
    - baseLoc
    - calleeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - argBaseLoc
    - bin:
      - bin:
        - bin:
          - locMax
          - baseLoc
        - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
      - let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatNav
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - expr
            - acc
        - tuple:
          - tokens
          - errors
      - tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - list
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePatCall
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatNav
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - args
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - calleeLoc
      - tuple:
        - tokens
        - errors
    match:
    - args
    - arm:
      - list
      - ERROR:
        - missing
        - (386:8)
      tuple:
      - callee
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (389:7)
      tuple:
      - bin:
        - .Call: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      - tokens
      - errors
  let:
  - fun:
    - parsePatCons
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - head
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCall
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ColonColon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (397:39)
      let:
      - tuple:
        - tail
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatCons
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Cons: APat
        - tuple:
          - head
          - tail
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (401:7)
      tuple:
      - head
      - tokens
      - errors
  let:
  - fun:
    - parsePatAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatCons
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (409:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: APat
        - tuple:
          - pat
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (413:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (420:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parsePatAnno
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (424:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - itemPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAnno
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (430:29)
      let:
      - tuple:
        - itemPats
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: APat
        - tuple:
          - bin:
            - itemPat
            - itemPats
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (434:7)
      tuple:
      - itemPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatAs
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - loc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - _
        tokens
      - ERROR:
        - missing
        - (443:57)
      tuple:
      - bin:
        - .As: APat
        - tuple:
          - pat
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .As: Token
          - _
        tokens
      - ERROR:
        - missing
        - (446:29)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected an identifier\"
        - tuple:
          - tokens
          - errors
      tuple:
      - pat
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (450:7)
      tuple:
      - pat
      - tokens
      - errors
  let:
  - fun:
    - parsePatOr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - lPat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatAs
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Pipe: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (458:33)
      let:
      - tuple:
        - rPat
        - tokens
        - errors
      - bin:
        - bin:
          - parsePatOr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Or: APat
        - tuple:
          - lPat
          - rPat
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (462:7)
      tuple:
      - lPat
      - tokens
      - errors
  let:
  - fun:
    - parsePatLet
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - callee
          - calleeLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - calleeLoc
        - bin:
          - leadsPat
          - tokens
      let:
      - tuple:
        - args
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parsePatCallArgs
            - baseLoc
          - calleeLoc
        - tuple:
          - tokens
          - errors
      let:
      - pat
      - bin:
        - .Fun: APat
        - tuple:
          - callee
          - args
          - calleeLoc
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Colon: Token
            - loc
          tokens
        - ERROR:
          - missing
          - (476:36)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTy
            - baseLoc
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .Anno: APat
          - tuple:
            - pat
            - ty
            - loc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (480:9)
        tuple:
        - pat
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (483:7)
      bin:
      - bin:
        - parsePat
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parsePat
    - baseLoc
    - tuple:
      - tokens
      - errors
  - if:
    - bin:
      - not
      - bin:
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
        - bin:
          - leadsPat
          - tokens
    - bin:
      - bin:
        - parsePatError
        - \"Expected a pattern\"
      - tuple:
        - tokens
        - errors
    - bin:
      - bin:
        - parsePatOr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseRange
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .DotDot: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (502:35)
      let:
      - tuple:
        - r
        - tokens
        - errors
      - bin:
        - bin:
          - parseExpr
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Range: AExpr
        - tuple:
          - list:
            - l
            - r
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (506:7)
      tuple:
      - l
      - tokens
      - errors
  let:
  - fun:
    - parseList
    - baseLoc
    - bracketLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .BracketR: Token
            - _
          tokens
        - ERROR:
          - missing
          - (514:37)
        tuple:
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (517:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\']\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .ListLit: AExpr
      - tuple:
        - items
        - bracketLoc
    - tokens
    - errors
  let:
  - fun:
    - parseThenClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - baseLoc
      - bin:
        - locAddX
        - 1
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Then: Token
          - thenLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - thenLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - innerBaseLoc
        - thenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (530:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected \\\'then\\\'\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseElseClause
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        cons:
        - tuple:
          - .If: Token
          - nextIfLoc
        tokens
      - bin:
        - bin:
          - bin:
            - locInside
            - baseLoc
          - elseLoc
        - bin:
          - bin:
            - locIsSameRow
            - elseLoc
          - nextIfLoc
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - bin:
          - tuple:
            - .If: Token
            - elseLoc
          - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Else: Token
          - elseLoc
        tokens
      - bin:
        - bin:
          - locInside
          - baseLoc
        - elseLoc
      bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - elseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (544:7)
      tuple:
      - bin:
        - .Missing: AExpr
        - baseLoc
      - tokens
      - errors
  let:
  - fun:
    - parseIf
    - ifLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - ifLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - cond
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseThenClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - alt
      - tokens
      - errors
    - bin:
      - bin:
        - parseElseClause
        - ifLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .If: AExpr
      - tuple:
        - cond
        - body
        - alt
        - ifLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatchArm
    - matchLoc
    - armLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - matchLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePat
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - guard
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .When: Token
            - _
          tokens
        - ERROR:
          - missing
          - (563:33)
        bin:
        - bin:
          - parseExpr
          - innerBaseLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (566:9)
        let:
        - guard
        - bin:
          - .Missing: AExpr
          - bin:
            - nextLoc
            - tokens
        tuple:
        - guard
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (572:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - matchLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (575:9)
        bin:
        - bin:
          - parseExprError
          - \"Expected \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - AArm
      - tuple:
        - pat
        - guard
        - body
        - armLoc
    - tokens
    - errors
  let:
  - fun:
    - parseMatch
    - matchLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - target
      - tokens
      - errors
    - bin:
      - bin:
        - parseExpr
        - matchLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - armLoc
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - _
          cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - ERROR:
          - missing
          - (585:58)
        tuple:
        - pipeLoc
        - tokens
        - errors
      - arm:
        - cons:
          - tuple:
            - .With: Token
            - withLoc
          tokens
        - ERROR:
          - missing
          - (588:39)
        tuple:
        - withLoc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (591:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected \\\'with\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - matchLoc
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - armLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - arm
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseMatchArm
            - matchLoc
          - armLoc
        - tuple:
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Pipe: Token
            - pipeLoc
          tokens
        - bin:
          - bin:
            - locInside
            - matchLoc
          - pipeLoc
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - arm
              - acc
          - pipeLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (602:9)
        tuple:
        - bin:
          - listRev
          - bin:
            - arm
            - acc
        - tokens
        - errors
    let:
    - tuple:
      - arms
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - go
          - list
        - armLoc
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Match: AExpr
      - tuple:
        - target
        - arms
        - matchLoc
    - tokens
    - errors
  let:
  - fun:
    - parseFun
    - baseLoc
    - funLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - pats
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parsePatCallArgs
          - baseLoc
        - funLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Arrow: Token
            - arrowLoc
          tokens
        - ERROR:
          - missing
          - (614:41)
        bin:
        - bin:
          - bin:
            - parseSemi
            - baseLoc
          - arrowLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (617:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'->\\\'\"
        - tuple:
          - tokens
          - errors
    tuple:
    - bin:
      - .Fun: AExpr
      - tuple:
        - pats
        - body
        - funLoc
    - tokens
    - errors
  let:
  - fun:
    - parseParenBody
    - baseLoc
    - parenLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseSemi
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (626:33)
      tuple:
      - body
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (629:7)
      let:
      - errors
      - bin:
        - bin:
          - parseNewError
          - \"Expected \\\')\\\'\"
        - tuple:
          - tokens
          - errors
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseAccessModifier
    - tokens
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - t
          - _
        tokens
      - bin:
        - t
        - tokenIsAccessModifier
      tokens
    - arm:
      - _
      - ERROR:
        - missing
        - (639:7)
      tokens
  let:
  - fun:
    - parseLet
    - letLoc
    - tuple:
      - tokens
      - errors
  - let:
    - innerBaseLoc
    - bin:
      - letLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    let:
    - tuple:
      - pat
      - tokens
      - errors
    - bin:
      - bin:
        - parsePatLet
        - innerBaseLoc
      - tuple:
        - tokens
        - errors
    let:
    - tuple:
      - body
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - eqLoc
          tokens
        - ERROR:
          - missing
          - (651:35)
        bin:
        - bin:
          - bin:
            - parseSemi
            - innerBaseLoc
          - eqLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (654:9)
        bin:
        - bin:
          - parseExprError
          - \"Missing \\\'=\\\'\"
        - tuple:
          - tokens
          - errors
    let:
    - tuple:
      - next
      - tokens
      - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .In: Token
            - inLoc
          tokens
        - bin:
          - bin:
            - locInside
            - letLoc
          - inLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - inLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons: _
          _
        - bin:
          - bin:
            - locIsSameColumn
            - bin:
              - nextLoc
              - tokens
          - letLoc
        bin:
        - bin:
          - bin:
            - parseSemi
            - letLoc
          - bin:
            - nextLoc
            - tokens
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (666:14)
        tuple:
        - bin:
          - .TupleLit: AExpr
          - tuple:
            - list
            - letLoc
        - tokens
        - errors
    tuple:
    - bin:
      - .Let: AExpr
      - tuple:
        - pat
        - body
        - next
        - letLoc
    - tokens
    - errors
  let:
  - fun:
    - parseTyDecl
    - typeLoc
    - tuple:
      - tokens
      - errors
  - let:
    - baseLoc
    - bin:
      - typeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tokens
    - bin:
      - parseAccessModifier
      - tokens
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - tyIdent
          - _
        tokens
      - ERROR:
        - missing
        - (677:40)
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Eq: Token
            - _
          tokens
        - ERROR:
          - missing
          - (679:31)
        let:
        - tuple:
          - tyDecl
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyDeclBody
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - expr
        - match:
          - tyDecl
          - arm:
            - call:
              - .Synonym: ATyDecl
              - ty
            - ERROR:
              - missing
              - (684:30)
            bin:
            - .TySynonym: AExpr
            - tuple:
              - tyIdent
              - ty
              - typeLoc
          - arm:
            - call:
              - .Union: ATyDecl
              - variants
            - ERROR:
              - missing
              - (687:34)
            bin:
            - .TyUnion: AExpr
            - tuple:
              - tyIdent
              - variants
              - typeLoc
        tuple:
        - expr
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (692:9)
        let:
        - tuple:
          - ty
          - tokens
          - errors
        - bin:
          - bin:
            - parseTyError
            - \"Expected \\\'=\\\'\"
          - tuple:
            - tokens
            - errors
        tuple:
        - bin:
          - .TySynonym: AExpr
          - tuple:
            - tyIdent
            - ty
            - typeLoc
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (696:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected identifier\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOpen
    - openLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - parsePath
      - tuple:
        - tokens
        - errors
    - let:
      - fun:
        - go
        - acc
        - tuple:
          - tokens
          - errors
      - match:
        - tokens
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            cons:
            - tuple:
              - call:
                - .Ident: Token
                - ident
              - _
            tokens
          - ERROR:
            - missing
            - (704:60)
          bin:
          - bin:
            - go
            - bin:
              - ident
              - acc
          - tuple:
            - tokens
            - errors
        - arm:
          - cons:
            - tuple:
              - .Dot: Token
              - _
            tokens
          - ERROR:
            - missing
            - (707:34)
          let:
          - errors
          - bin:
            - bin:
              - parseNewError
              - \"Expected identifier\"
            - tuple:
              - tokens
              - errors
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
        - arm:
          - _
          - ERROR:
            - missing
            - (711:11)
          tuple:
          - bin:
            - listRev
            - acc
          - tokens
          - errors
      match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - call:
              - .Ident: Token
              - ident
            - _
          tokens
        - ERROR:
          - missing
          - (715:40)
        bin:
        - bin:
          - go
          - list: ident
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (718:9)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected identifier\"
          - tuple:
            - tokens
            - errors
        tuple:
        - list
        - tokens
        - errors
    let:
    - tuple:
      - path
      - tokens
      - errors
    - bin:
      - parsePath
      - tuple:
        - tokens
        - errors
    tuple:
    - bin:
      - .Open: AExpr
      - tuple:
        - path
        - openLoc
    - tokens
    - errors
  let:
  - fun:
    - parseAtom
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - _
      - bin:
        - not
        - bin:
          - bin:
            - nextInside
            - baseLoc
          - tokens
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - loc
        cons:
        - tuple:
          - .ParenR: Token
          - _
        tokens
      - ERROR:
        - missing
        - (730:56)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Bool: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (733:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Bool: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Int: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (736:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Int: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Char: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (739:39)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Char: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Str: Token
            - value
          - loc
        tokens
      - ERROR:
        - missing
        - (742:38)
      tuple:
      - bin:
        - .Lit: AExpr
        - tuple:
          - bin:
            - .Str: Lit
            - value
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - call:
            - .Ident: Token
            - ident
          - loc
        tokens
      - ERROR:
        - missing
        - (745:40)
      tuple:
      - bin:
        - .Ident: AExpr
        - tuple:
          - ident
          - loc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .ParenL: Token
          - parenLoc
        tokens
      - ERROR:
        - missing
        - (748:40)
      bin:
      - bin:
        - bin:
          - parseParenBody
          - baseLoc
        - parenLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .BracketL: Token
          - bracketLoc
        tokens
      - ERROR:
        - missing
        - (751:44)
      bin:
      - bin:
        - bin:
          - parseList
          - baseLoc
        - bracketLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .If: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (754:31)
      bin:
      - bin:
        - parseIf
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Match: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (757:34)
      bin:
      - bin:
        - parseMatch
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Fun: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (760:32)
      bin:
      - bin:
        - bin:
          - parseFun
          - baseLoc
        - loc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (763:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (766:7)
      bin:
      - bin:
        - parseExprError
        - \"Expected an expression\"
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseSuffix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - l
      - tokens
      - errors
    - bin:
      - bin:
        - parseAtom
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - .BracketL: Token
            - _
          tokens
        - ERROR:
          - missing
          - (775:57)
        let:
        - tuple:
          - r
          - tokens
          - errors
        - bin:
          - bin:
            - parseRange
            - baseLoc
          - tuple:
            - tokens
            - errors
        let:
        - tuple:
          - tokens
          - errors
        - match:
          - tokens
          - arm:
            - cons:
              - tuple:
                - .BracketR: Token
                - _
              tokens
            - ERROR:
              - missing
              - (780:41)
            tuple:
            - tokens
            - errors
          - arm:
            - _
            - ERROR:
              - missing
              - (783:13)
            let:
            - errors
            - bin:
              - bin:
                - parseNewError
                - \"Expected closing \\\']\\\'\"
              - tuple:
                - tokens
                - errors
            tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Index: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - loc
          cons:
          - tuple:
            - call:
              - .Ident: Token
              - r
            - _
          tokens
        - ERROR:
          - missing
          - (789:56)
        bin:
        - bin:
          - go
          - bin:
            - .Nav: AExpr
            - tuple:
              - acc
              - r
              - loc
        - tuple:
          - tokens
          - errors
      - arm:
        - cons:
          - tuple:
            - .Dot: Token
            - _
          tokens
        - ERROR:
          - missing
          - (792:32)
        let:
        - errors
        - bin:
          - bin:
            - parseNewError
            - \"Expected .[] or .field\"
          - tuple:
            - tokens
            - errors
        tuple:
        - acc
        - tokens
        - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (796:9)
        tuple:
        - acc
        - tokens
        - errors
    bin:
    - bin:
      - go
      - l
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseApp
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - calleeLoc
    - bin:
      - nextLoc
      - tokens
    let:
    - argBaseLoc
    - bin:
      - calleeLoc
      - bin:
        - locAddX
        - 1
    let:
    - tuple:
      - callee
      - tokens
      - errors
    - bin:
      - bin:
        - parseSuffix
        - baseLoc
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - go
      - callee
      - tuple:
        - tokens
        - errors
    - if:
      - bin:
        - bin:
          - bin:
            - nextInside
            - argBaseLoc
          - tokens
        - bin:
          - leadsArg
          - tokens
      - let:
        - tuple:
          - arg
          - tokens
          - errors
        - bin:
          - bin:
            - parseSuffix
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - .Bin: AExpr
            - tuple:
              - .App: Op
              - callee
              - arg
              - calleeLoc
        - tuple:
          - tokens
          - errors
      - tuple:
        - callee
        - tokens
        - errors
    bin:
    - bin:
      - go
      - callee
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parsePrefix
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Minus: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (820:34)
      let:
      - tuple:
        - arg
        - tokens
        - errors
      - bin:
        - bin:
          - parseApp
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Uni: AExpr
        - tuple:
          - .Neg: UniOp
          - arg
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (824:7)
      bin:
      - bin:
        - parseApp
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseNextLevelOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - bin:
      - opLevelToNext
      - level
    - arm:
      - .Prefix: OpLevel
      - ERROR:
        - missing
        - (829:20)
      bin:
      - bin:
        - parsePrefix
        - baseLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - nextLevel
      - ERROR:
        - missing
        - (832:15)
      bin:
      - bin:
        - bin:
          - parseOp
          - nextLevel
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseOps
    - level
    - baseLoc
    - first
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - nextL
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseNextLevelOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    let:
    - fun:
      - nextR
      - expr
      - op
      - opLoc
      - tuple:
        - tokens
        - errors
    - let:
      - tuple:
        - second
        - tokens
        - errors
      - bin:
        - bin:
          - bin:
            - parseOp
            - level
          - baseLoc
        - tuple:
          - tokens
          - errors
      let:
      - expr
      - bin:
        - .Bin: AExpr
        - tuple:
          - op
          - expr
          - second
          - opLoc
      bin:
      - bin:
        - bin:
          - bin:
            - parseOps
            - level
          - baseLoc
        - expr
      - tuple:
        - tokens
        - errors
    match:
    - tuple:
      - level
      - tokens
    - arm:
      - tuple:
        - .Or: OpLevel
        - cons:
          - tuple:
            - .PipePipe: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (847:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Or: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .And: OpLevel
        - cons:
          - tuple:
            - .AmpAmp: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (850:50)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .And: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Eq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (853:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Eq: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (856:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ne: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Lt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (859:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Lt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .LtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (862:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Le: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .Gt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (865:46)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Gt: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cmp: OpLevel
        - cons:
          - tuple:
            - .GtEq: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (868:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Ge: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Pipe: OpLevel
        - cons:
          - tuple:
            - .PipeGt: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (871:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Pipe: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Cons: OpLevel
        - cons:
          - tuple:
            - .ColonColon: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (874:55)
      bin:
      - bin:
        - bin:
          - bin:
            - nextR
            - first
          - .Cons: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Plus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (877:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Add: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Add: OpLevel
        - cons:
          - tuple:
            - .Minus: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (880:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Sub: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Star: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (883:48)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mul: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Slash: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (886:49)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Div: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - tuple:
        - .Mul: OpLevel
        - cons:
          - tuple:
            - .Percent: Token
            - opLoc
          tokens
      - ERROR:
        - missing
        - (889:51)
      bin:
      - bin:
        - bin:
          - bin:
            - nextL
            - first
          - .Mod: Op
        - opLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (892:7)
      tuple:
      - first
      - tokens
      - errors
  let:
  - fun:
    - parseOp
    - level
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - first
      - tokens
      - errors
    - bin:
      - bin:
        - bin:
          - parseNextLevelOp
          - level
        - baseLoc
      - tuple:
        - tokens
        - errors
    bin:
    - bin:
      - bin:
        - bin:
          - parseOps
          - level
        - baseLoc
      - first
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTupleItem
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - bin:
        - parseOp
        - .Or: OpLevel
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseTuple
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Comma: Token
            - _
          tokens
        - ERROR:
          - missing
          - (907:34)
        let:
        - tuple:
          - second
          - tokens
          - errors
        - bin:
          - bin:
            - parseTupleItem
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - go
          - bin:
            - second
            - acc
        - tuple:
          - tokens
          - errors
      - arm:
        - tokens
        - ERROR:
          - missing
          - (911:14)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - tuple:
      - item
      - tokens
      - errors
    - bin:
      - bin:
        - parseTupleItem
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Comma: Token
          - loc
        _
      - ERROR:
        - missing
        - (917:29)
      let:
      - tuple:
        - items
        - tokens
        - errors
      - bin:
        - bin:
          - go
          - list
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - bin:
            - item
            - items
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (921:7)
      tuple:
      - item
      - tokens
      - errors
  let:
  - fun:
    - parseAnno
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - body
      - tokens
      - errors
    - bin:
      - bin:
        - parseTuple
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Colon: Token
          - loc
        tokens
      - ERROR:
        - missing
        - (929:34)
      let:
      - tuple:
        - ty
        - tokens
        - errors
      - bin:
        - bin:
          - parseTy
          - baseLoc
        - tuple:
          - tokens
          - errors
      tuple:
      - bin:
        - .Anno: AExpr
        - tuple:
          - body
          - ty
          - loc
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (933:7)
      tuple:
      - body
      - tokens
      - errors
  let:
  - fun:
    - parseExpr
    - baseLoc
    - tuple:
      - tokens
      - errors
  - bin:
    - bin:
      - parseAnno
      - baseLoc
    - tuple:
      - tokens
      - errors
  let:
  - fun:
    - parseStmt
    - baseLoc
    - tuple:
      - tokens
      - errors
  - match:
    - tokens
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        tokens
      - ERROR:
        - missing
        - (941:53)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Let: Token
          - letLoc
        tokens
      - ERROR:
        - missing
        - (945:35)
      bin:
      - bin:
        - parseLet
        - letLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Type: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (948:37)
      bin:
      - bin:
        - parseTyDecl
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Open: Token
          - typeLoc
        tokens
      - ERROR:
        - missing
        - (951:37)
      bin:
      - bin:
        - parseOpen
        - typeLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (954:7)
      bin:
      - bin:
        - parseExpr
        - baseLoc
      - tuple:
        - tokens
        - errors
  let:
  - fun:
    - parseStmts
    - baseLoc
    - tuple:
      - tokens
      - errors
  - let:
    - fun:
      - go
      - acc
      - alignLoc
      - tuple:
        - tokens
        - errors
    - match:
      - tokens
      - arm:
        - cons:
          - tuple:
            - .Semi: Token
            - semiLoc
          tokens
        - bin:
          - bin:
            - locInside
            - alignLoc
          - semiLoc
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - bin:
          - bin:
            - bin:
              - locIsSameColumn
              - alignLoc
            - bin:
              - nextLoc
              - tokens
          - bin:
            - leadsExpr
            - tokens
        let:
        - tuple:
          - expr
          - tokens
          - errors
        - bin:
          - bin:
            - parseStmt
            - baseLoc
          - tuple:
            - tokens
            - errors
        bin:
        - bin:
          - bin:
            - go
            - bin:
              - expr
              - acc
          - alignLoc
        - tuple:
          - tokens
          - errors
      - arm:
        - _
        - ERROR:
          - missing
          - (972:9)
        tuple:
        - bin:
          - listRev
          - acc
        - tokens
        - errors
    let:
    - alignLoc
    - bin:
      - nextLoc
      - tokens
    if:
    - bin:
      - bin:
        - locInside
        - baseLoc
      - alignLoc
    - bin:
      - bin:
        - bin:
          - go
          - list
        - alignLoc
      - tuple:
        - tokens
        - errors
    - tuple:
      - list
      - tokens
      - errors
  let:
  - fun:
    - parseSemi
    - baseLoc
    - mainLoc
    - tuple:
      - tokens
      - errors
  - let:
    - tuple:
      - items
      - tokens
      - errors
    - bin:
      - bin:
        - parseStmts
        - baseLoc
      - tuple:
        - tokens
        - errors
    match:
    - items
    - arm:
      - list
      - ERROR:
        - missing
        - (991:8)
      bin:
      - bin:
        - parseExprError
        - \"Expected statements\"
      - tuple:
        - tokens
        - errors
    - arm:
      - list: item
      - ERROR:
        - missing
        - (994:12)
      tuple:
      - item
      - tokens
      - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (997:7)
      tuple:
      - bin:
        - .Semi: AExpr
        - tuple:
          - items
          - mainLoc
      - tokens
      - errors
  let:
  - fun:
    - parseTopLevel
    - tuple:
      - tokens
      - errors
  - let:
    - topLoc
    - tuple:
      - 0
      - 0
    match:
    - tokens
    - arm:
      - list
      - ERROR:
        - missing
        - (1005:8)
      tuple:
      - bin:
        - .TupleLit: AExpr
        - tuple:
          - list
          - topLoc
      - tokens
      - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        cons:
        - tuple:
          - .Dot: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1012:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - .Rec: Token
          - _
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1017:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - cons:
        - tuple:
          - .Module: Token
          - moduleLoc
        cons:
        - tuple:
          - call:
            - .Ident: Token
            - _
          - _
        tokens
      - ERROR:
        - missing
        - (1021:37)
      bin:
      - bin:
        - bin:
          - parseSemi
          - moduleLoc
        - moduleLoc
      - tuple:
        - tokens
        - errors
    - arm:
      - _
      - ERROR:
        - missing
        - (1024:7)
      bin:
      - bin:
        - bin:
          - parseSemi
          - topLoc
        - topLoc
      - tuple:
        - tokens
        - errors
  let:
  - anno:
    - fun:
      - parse
      - anno:
        - tokens
        - list:
          - tuple:
            - Token
            - Loc
    - tuple:
      - AExpr
      - list:
        - tuple:
          - string
          - Loc
  - let:
    - tuple:
      - expr
      - tokens
      - errors
    - bin:
      - parseTopLevel
      - tuple:
        - tokens
        - list
    let:
    - errors
    - match:
      - tokens
      - arm:
        - list
        - ERROR:
          - missing
          - (1032:10)
        errors
      - arm:
        - _
        - ERROR:
          - missing
          - (1035:9)
        bin:
        - bin:
          - parseNewError
          - \"Expected eof\"
        - tuple:
          - tokens
          - errors
    tuple:
    - expr
    - errors
  tuple
$? = 0
