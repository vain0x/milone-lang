#!/bin/bash

set -eu

# Finds path to test case directory.
# Sample:
#   locate hello
# Output:
#   tests/examples/hello
locate() {
    echo $(find tests/*/$1 -type d)
}

# Converts milone code to C code and compiles it with GCC.
# Sample:
#   compile hello -v
#   compile hello -q
compile() {
    m="$(locate $1)/$1.milone"
    c="$(locate $1)/~$1.c"
    app="$(locate $1)/~$1"

    mkdir -p tmp
    cat $m | dotnet run -p MiloneLang -- "$2" - >$c
    gcc -std=c11 -Wall -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-label $c -o $app
}

# Runs a milone code
# and verifies its stdout/exit code to be expected.
# Sample:
#   integ hello
# Sample:
#   integ tests/examples/hello
# Output:
#   hello ... ✔ ok
integ() {
    name=$(basename "$1")
    app="$(locate $name)/~$name"
    out="$(locate $name)/~$name.out"
    expected="$(locate $name)/$name.out"

    >&2 echo -n "$name ... "
    compile "$name" -q

    set +e
    $app >$out
    echo '$? = '$? >>$out
    if diff -q $out $expected
    then
        >&2 echo "✔ ok"
    else
        >&2 echo "✘ FAILED"
        echo -n '*'
    fi
    set -e
}

# Tests all milone codes.
# Sample:
#   integ_all
integ_all() {
    err=$(find tests/*/* -type d -exec ./task integ "{}" \;)
    >&2 echo $err
    exit $([[ -z $err ]])
}

if [[ "$1" = restore ]]
then
    dotnet restore
elif [[ "$1" = test ]]
then
    dotnet test MiloneLang.Tests -c Release --no-restore
    integ_all
elif [[ "$1" = integ-all ]]
then
    shift
    integ_all
elif [[ "$1" = integ ]]
then
    shift
    integ "$@"
elif [[ "$1" = inspect ]]
then
    shift
    compile "$@" -v
    code "$(locate $1)/~$1.c"
elif [[ "$1" = locate ]]
then
    shift
    locate "$@"
else
    >&2 echo "USAGE: ./task restore|integ-all|integ|inspect"
    exit 1
fi
