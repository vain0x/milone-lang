#!/bin/bash

set -eu

# Converts milone code to C code
# and compiles it with GCC.
# SAMPLE: compile hello
compile() {
    m="./tests/src/$1.milone"
    c="tmp/$1.c"
    app="tmp/$1"

    mkdir -p tmp
    cat $m | dotnet run -p MiloneLang -- -t c >$c
    gcc -std=c11 $c -o $app
    >&2 echo $app
}

# Runs a milone code
# and verifies its stdout/exit code to be expected.
# SAMPLE: integ hello
# SAMPLE: integ ./tests/src/hello.milone
integ() {
    name=$(basename "$1" .milone)
    app="./tmp/$name"
    out="./tmp/$name.out"
    expected="./tests/targets/$name.out"

    >&2 echo -n "$name ... "
    compile "$name" 2>/dev/null

    set +e
    $app >$out
    echo '$? = '$? >>$out
    if diff -q $out $expected
    then
        >&2 echo "✔ ok"
    else
        >&2 echo "✘ FAILED"
        echo -n '*'
    fi
    set -e
}

# Tests all milone codes.
# SAMPLE: integ_all
integ_all() {
    err=$(find ./tests/src -name '*.milone' -type f -exec ./task integ "{}" \;)
    exit $([[ -z $err ]])
}

if [[ "$1" = restore ]]
then
    dotnet restore
elif [[ "$1" = test ]]
then
    dotnet test MiloneLang.Tests -c Release --no-restore
    integ_all
elif [[ "$1" = integ-all ]]
then
    shift
    integ_all
elif [[ "$1" = integ ]]
then
    shift
    integ "$@"
elif [[ "$1" = inspect ]]
then
    shift
    compile "$@"
    code "./tmp/$1.c"
else
    >&2 echo "USAGE: ./task restore|integ-all|integ|inspect"
    exit 1
fi
