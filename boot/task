#!/bin/bash

set -eu

# Finds path to test case directory.
# Sample:
#   locate hello
# Output:
#   tests/examples/hello
locate() {
    echo $(find tests/*/$1 -type d)
}

# Converts milone code to C code and compiles it with GCC.
# Sample:
#   compile hello -v
#   compile hello -q
compile() {
    dir="$(locate $1)"
    c="$(locate $1)/~$1.c"
    app="$(locate $1)/~$1"

    mkdir -p tmp
    dotnet run -p MiloneLang -- "$2" $dir >$c
    if [[ $? != 0 ]]
    then
        echo 'milone-lang compile error.'
        return 1
    fi

    gcc -std=c11 -Wall -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-label $c -o $app
    if [[ $? != 0 ]]
    then
        echo 'gcc compile error.'
        return 1
    fi
}

# Runs a milone code
# and verifies its stdout/exit code to be expected.
# Sample:
#   integ hello args..
# Sample:
#   integ tests/examples/hello args..
# Output:
#   hello ... ✔ ok
integ() {
    name=$(basename "$1")
    shift
    app="$(locate $name)/~$name"
    out="$(locate $name)/~$name.out"
    expected="$(locate $name)/$name.out"

    set +e

    >&2 echo -n "$name ... "

    # Compile.
    compile "$name" -q >$out
    comple_exit_code=$?

    # Run.
    if [[ $comple_exit_code = 0 ]]
    then
        $app "$@" >>$out
        echo '$? = '$? >>$out
    fi

    # Verify output and exit code.
    if diff -q $out $expected
    then
        >&2 echo "✔ ok"
    else
        >&2 echo "✘ FAILED"
        echo -n '*'
    fi

    set -e
}

# Tests all milone codes.
# Sample:
#   integ_all
integ_all() {
    err=$(find tests/*/* -type d -exec ./task integ "{}" \;)
    >&2 echo $err
    exit $([[ -z $err ]])
}

if [[ "$1" = restore ]]
then
    dotnet restore
elif [[ "$1" = test ]]
then
    dotnet test MiloneLang.Tests -c Release --no-restore
    integ_all
elif [[ "$1" = integ-all ]]
then
    shift
    integ_all
elif [[ "$1" = integ ]]
then
    shift
    integ "$@"
elif [[ "$1" = inspect ]]
then
    shift
    compile "$@" -v
    code "$(locate $1)/~$1.c"
elif [[ "$1" = locate ]]
then
    shift
    locate "$@"
else
    >&2 echo "USAGE: ./task restore|integ-all|integ|inspect"
    exit 1
fi
