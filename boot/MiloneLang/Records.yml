ScopeCtx:
  # Last serial number.
  # We need manage identifiers as integers rather than strings due to shadowing.
  Serial: Serial

  # Serial to ident map.
  NameMap: AssocMap<Serial, Ident>

  # Variable serial to definition map.
  Vars: AssocMap<VarSerial, VarDef>

  # Variable serial to let-depth map.
  VarDepths: AssocMap<VarSerial, LetDepth>

  # Type serial to definition map.
  Tys: AssocMap<TySerial, TyDef>

  # Type serial to let-depth map.
  TyDepths: AssocMap<TySerial, LetDepth>

  # Serial of the current scope.
  LocalSerial: ScopeSerial

  # Current scope.
  Local: Scope

  # Current let-depth, the number of ancestral let-body.
  LetDepth: LetDepth

TyContext:
  Serial: Serial
  Tys: AssocMap<TySerial, TyDef>
  TyDepths: AssocMap<TySerial, LetDepth>

TyCtx:
  # Next serial number.
  # We need to identify variables by serial number rather than names
  # due to scope locality and shadowing.
  Serial: Serial

  # Variable serial to variable definition.
  Vars: AssocMap<VarSerial, VarDef>

  # Type serial to type definition.
  Tys: AssocMap<TySerial, TyDef>

  TyDepths: AssocMap<TySerial, LetDepth>
  LetDepth: LetDepth
  TraitBounds: (Trait * Loc) list
  Logs: (Log * Loc) list

CcCtx:
  Serial: Serial
  Vars: AssocMap<VarSerial, VarDef>
  Tys: AssocMap<TySerial, TyDef>

  # Known functions and their dependencies.
  Caps: AssocMap<FunSerial, (VarSerial * Ty * Loc) list>
  Known: AssocSet<FunSerial>
  Refs: AssocSet<VarSerial>
  Locals: AssocSet<VarSerial>
