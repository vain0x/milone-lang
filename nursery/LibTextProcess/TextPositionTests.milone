open Std.StdTesting
open LibTextProcess.TextPosition

// test equals
let () =
  assert (TextPosition.equals (0, 0) (2, 3) |> not)
  assert (TextPosition.equals (2, 3) (2, 3))

// test compare
let () =
  assert (TextPosition.compare (0, 0) (2, 3) < 0)
  assert (TextPosition.compare (2, 2) (2, 3) < 0)
  assert (TextPosition.compare (2, 3) (2, 3) = 0)
  assert (TextPosition.compare (2, 4) (2, 3) > 0)
  assert (TextPosition.compare (3, 0) (2, 3) > 0)

// test debug
let () = assert ((2, 3) |> TextPosition.debug |> shouldEqual id "3:4")

// test min, max
let () =
  let p m1 m2 =
    TextPosition.equals (TextPosition.min m1 m2) m1
    && TextPosition.equals (TextPosition.min m2 m1) m1
    && TextPosition.equals (TextPosition.max m1 m2) m2
    && TextPosition.equals (TextPosition.max m2 m1) m2

  assert (p (2, 2) (2, 3))
  assert (p (2, 3) (2, 3))
  assert (p (2, 3) (2, 4))
  assert (p (2, 3) (3, 0))

// test compute
let () =
  let p (s: string) (expected: RowIndex * ColumnIndex) =
    TextPosition.compute s s.Length |> shouldEqual TextPosition.debug expected

  assert (p "" (0, 0))
  assert (p "x" (0, 1))
  assert (p "\n" (1, 0))
  assert (p "üêß" (0, 4))
  assert (p " \n  \n   \n    " (3, 4))

// test computeIndex
let () =
  let debug (result: Result<int, int>) =
    match result with
    | Ok i -> string i
    | Error i -> "Error " + string i

  let p (s: string) pos expected =
    TextPosition.computeIndex s pos |> shouldEqual debug expected

  assert (p "" (0, 0) (Ok 0))
  assert (p "" (1, 0) (Error 0))
  assert (p "" (0, 1) (Error 0))

  let s = "hello\nworld\r\n"
  assert (p s (0, 1) (Ok 1))
  assert (p s (0, 5) (Ok 5))
  assert (p s (1, 0) (Ok 6))
  assert (p s (1, 5) (Ok 11))
  assert (p s (2, 0) (Ok 13))
  // Column index overflow. Error index is at the end of line 1.
  assert (p s (1, 99) (Error 11))
  // Row index overflow. Error index is at the end of string.
  assert (p s (99, 0) (Error 13))
