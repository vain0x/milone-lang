// Provides functions for Unicode.

// -----------------------------------------------
// Utf8
// -----------------------------------------------

module Utf8 =
  /// Gets the number of bytes that consist a single code point in UTF-8
  /// when byte `b` is at boundary.
  let byteLength (b: byte) : int option =
    if b < 0x80uy then
      Some 1
    else if
      // Continuation byte.
      (0x80uy <= b && b <= 0xBFuy)
      // Overlong encoding.
      || (b = 0xC0uy || b = 0xC1uy)
    then
      None
    else if 0xC2uy <= b && b <= 0xDFuy then
      Some 2
    else if 0xE0uy <= b && b <= 0xEFuy then
      Some 3
    else if 0xF0uy <= b && b <= 0xF3uy then
      Some 4
    else
      assert (b >= 0xF5uy)
      None

  /// Checks whether specified part of text is valid as UTF-8 to represent single code point.
  let private isLegalPoint (l: int) (r: int) (text: string) : bool =
    assert (0 <= l && l <= r && r <= text.Length)

    let rec checkLoop len =
      match len with
      | 1 ->
        let b = byte text.[l]
        (b < 0x7Fuy || 0xC2uy <= b) && b <= 0xF4uy

      | 2 ->
        let a = byte text.[l]
        let b = byte text.[l + 1]

        (match a with
         | 0xE0uy -> 0xA0uy <= b && b <= 0xBFuy
         | 0xEDuy -> 0x80uy <= b && b <= 0x9Fuy
         | 0xF0uy -> 0x90uy <= b && b <= 0xBFuy
         | 0xF4uy -> 0x80uy <= b && b <= 0x8Fuy
         | _ -> 0x80uy <= b && b <= 0xBFuy)
        && checkLoop 1

      | 3 ->
        let b = byte text.[l + 2]
        0x80uy <= b && b <= 0xBFuy && checkLoop 2

      | 4 ->
        let b = byte text.[l + 3]
        0x80uy <= b && b <= 0xBFuy && checkLoop 3

      | _ -> false

    checkLoop (r - l)

  /// Computes a code point within the specified range.
  let private decodeSingle (l: int) (r: int) (text: string) =
    // assert (0 <= l
    //         && l < r
    //         && r <= text.Length
    //         && isLegalPoint l r text)

    let rec decodeLoop (n: uint) i =
      if i = r then
        n
      else
        let b = byte text.[i]
        let n = (n <<< 6) + uint (b &&& 0x3Fuy)
        decodeLoop n (i + 1)

    let n =
      let b = byte text.[l]
      uint (b &&& (0xFFuy >>> (r - l)))

    decodeLoop n (l + 1)

  /// Gets a code point and its byte length (in UTF-8).
  ///
  /// - Returns None instead if the text is invalid as UTF-8.
  /// - This functions work as MoveNext on iterating over a string as code points.
  let decodeNext (i: int) (text: string) : (uint * int) option =
    if i < text.Length then
      match byteLength (byte text.[i]) with
      | Some count ->
        if i + count <= text.Length && isLegalPoint i (i + count) text then
          Some(decodeSingle i (i + count) text, count)
        else
          // Illegal.
          None

      | None ->
        // Not at boundary.
        None
    else
      // At EOF.
      None
