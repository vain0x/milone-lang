// note: update this for recent compiler changes

module Dylib =
  type private DylibPtr = nativeptr<__nativeType<``struct Dylib``>>

  let load (path: string): DylibPtr = __nativeFun("milone_dylib_open", path)

  let dispose (lib: DylibPtr) : unit = __nativeFun("milone_dylib_close", lib)

  let getSymbol (name: string) (lib: DylibPtr) : voidptr = __nativeFun("milone_dylib_get_symbol", lib, name)

let libHello = Dylib.load "./hello/target/debug/hello.dll"

__nativeDecl
  """
    typedef int (*MyPlusFn)(int, int);
    typedef void (*MyHelloFn)(void);
  """

// __nativeCast doesn't allow to cast to MyHelloFn
let myPlusPtr : __nativeFun<int * int, int> =
  Dylib.getSymbol "my_plus2" libHello
  |> __nativeCast

let myPlus (x: int) (y: int): int = __nativeExpr("{0}({1}, {2})", myPlusPtr, x, y)
printfn "my_plus %d" (myPlus 40 2)

let myHello : __nativeType<MyHelloFn> =
  let p = Dylib.getSymbol "my_hello" libHello
  __nativeExpr ("(MyHelloFn){0}", p)

// no syntax to call to function pointer
__nativeStmt ("{0}();", myHello)

Dylib.dispose libHello
