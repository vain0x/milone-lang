module rec MiloneLspServer.Json

module S = MiloneStd.StdString

type JsonValue =
  | JNull
  | JString of stringValue: string
  | JNumber of numberValue: float
  | JBoolean of boolValue: bool
  | JArray of items: JsonValue list
  | JObject of entries: (string * JsonValue) list

let jsonParseFromString (s: string) : JsonValue =
  __nativeFun ("json_parse_from_string", s)

// FIXME: fix escape, make it efficient
let jsonToString (value: JsonValue) : string =
  match value with
  | JNull -> "null"

  | JString value ->
      let value =
        value
        |> S.replace "\\" "\\\\"
        |> S.replace "\n" "\\n"
        |> S.replace "\"" "\\\""

      "\"" + value + "\""

  | JNumber value -> string value

  | JBoolean true -> "true"
  | JBoolean false -> "false"

  | JArray items ->
      "["
      + (List.map jsonToString items |> S.concat ",")
      + "]"

  | JObject entries ->
      "{"
      + (entries
         |> List.map (fun (key, value) -> "\"" + key + "\":" + jsonToString value)
         |> S.concat ",")
      + "}"
