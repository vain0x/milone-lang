module rec LibNursery.NativeInterop

// FIXME: use Std.NativeInterop

open LibNursery.Runtime

// FIXME: remove this
let private nativeptrSizeOf (p: nativeptr<'T>) : int = __sizeOf<'T>

// FIXME: remove this
let private inptrSizeOf (p: __inptr<'T>) : int = __sizeOf<'T>

// See also:
//
// - https://github.com/dotnet/fsharp/blob/main/src/fsharp/FSharp.Core/nativeptr.fs
// - https://github.com/fsharp/fslang-design/blob/main/RFCs/FS-1109-Additional-intrinsics-for-the-NativePtr-module.md
module rec NativePtr =
  // ---------------------------------------------
  // NativePtr at F# 5.0
  // ---------------------------------------------

  let ofNativeInt (p: nativeint) : nativeptr<'T> = __nativeCast p
  let toNativeInt (p: nativeptr<_>) : nativeint = nativeint p
  let toVoidPtr (p: nativeptr<_>) : voidptr = __nativeCast p
  let ofVoidPtr (p: voidptr) : nativeptr<_> = __nativeCast p

  let add (p: nativeptr<'T>) (i: int) : nativeptr<'T> =
    __nativeCast (
      nativeint p
      + nativeint i * nativeint (nativeptrSizeOf p)
    )

  let get (p: nativeptr<'T>) (i: int) : 'T =
    __ptrRead (__nativeCast p: __inptr<'T>) i

  let set (p: nativeptr<'T>) (i: int) (value: 'T) : unit = __ptrWrite p i value

  let read (p: nativeptr<'T>) : 'T =
    __ptrRead (__nativeCast p: __inptr<'T>) 0

  let write (p: nativeptr<'T>) (value: 'T) : unit = __ptrWrite p 0 value

  // not supported: stackalloc, toByRef

  // ---------------------------------------------
  // NativePtr at F# RFC FS-1109
  // ---------------------------------------------

  let isNullPtr (p: nativeptr<_>) : bool = unativeint p = unativeint 0

  /// Copies single value. (`*dest = *src`)
  let copy (dest: nativeptr<'T>) (src: nativeptr<'T>) : unit =
    assert (isNullPtr dest |> not)
    assert (isNullPtr src |> not)

    let _ =
      memcpy (__nativeCast dest) (__nativeCast src) (unativeint (nativeptrSizeOf dest))

    ()

  /// Copies a number of values.
  let copyBlock (dest: nativeptr<'T>) (src: nativeptr<'T>) (len: int) : unit =
    assert (isNullPtr dest |> not)
    assert (isNullPtr src |> not)
    assert (len >= 0)

    let _ =
      memcpy (__nativeCast dest) (__nativeCast src) (unativeint (nativeptrSizeOf dest * len))

    ()

  // not supported: nullPtr (generic constant isn't supported)
  // unimplemented: initBlock, clear

  // =============================================

  /// Gets size of the underlying type. (`sizeof(*p)`)
  let sizeOf (p: nativeptr<'T>) : int = nativeptrSizeOf p

  let getNullPtr () : nativeptr<_> = __nativeCast (unativeint 0)

// =============================================================================

module rec InPtr =
  // F# 5.0
  // not supported: stackalloc, toByRef, set, write

  let ofNativeInt (p: nativeint) : __inptr<'T> = __nativeCast p
  let toNativeInt (p: __inptr<_>) : nativeint = nativeint p
  let toObj (p: __inptr<_>) : obj = __nativeCast p
  let ofObj (p: obj) : __inptr<_> = __nativeCast p

  let add (p: __inptr<'T>) (i: int) : __inptr<'T> =
    __nativeCast (nativeint p + nativeint i * nativeint (inptrSizeOf p))

  let get (p: __inptr<'T>) (i: int) : 'T = __ptrRead p i
  let read (p: __inptr<'T>) : 'T = __ptrRead p 0

  // F# RFC FS-1109
  // not supported: nullPtr (generic constant isn't supported)

  let isNullPtr (p: __inptr<_>) : bool = unativeint p = unativeint 0

  // =============================================

  /// Gets size of the underlying type. (`sizeof(*p)`)
  let sizeOf (p: __inptr<'T>) : int = inptrSizeOf p

  let getNullPtr () : __inptr<_> = __nativeCast (unativeint 0)

  /// Adds const qualifier.
  let ofNativePtr (p: nativeptr<'T>) : __inptr<'T> = __nativeCast p

  /// Drops const qualifier.
  let toNativePtr (p: __inptr<'T>) : nativeptr<'T> = __nativeCast p
