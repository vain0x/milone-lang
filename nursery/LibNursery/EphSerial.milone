module rec LibNursery.EphSerial

open LibNursery.Runtime

module Ptr = Std.Ptr

/// Special object to represent ownership of ephemeral value.
///
/// This object can be used in a module to enforce
/// the user is using single value at most once.
/// (See EphArray for example.)
///
/// In other words, EphSerial is a tool
/// to make order of computation explicit.
/// Could be also called as "version".
type EphSerial = EphSerial of uint * nativeptr<uint>

// Meant to prevent copy propagation. (Actually such optimization is yet implemented though.)
let private blackbox (f: unit -> EphSerial) : EphSerial = f ()

let private createNew () =
  let ptr: nativeptr<uint> =
    memAlloc 1 (unativeint (sizeof<unativeint>))
    |> __nativeCast

  Ptr.write ptr (uint 0)
  EphSerial(uint 0, ptr)

module rec EphSerial =
  /// Invokes a function that uses impure computation.
  let run (f: EphSerial -> 'T * EphSerial) : 'T =
    let result, s = f (createNew ())
    let ok, _ = alive (refresh s)
    assert (ok || violate "no longer alive")
    result

  /// Creates a fresh serial. (created one, parent one)
  let create (parent: EphSerial) : EphSerial * EphSerial =
    let parent = refresh parent
    createNew (), parent

  /// Gets whether two serials are equivalent (i.e. serials for the same timeline).
  let equivalent (l: EphSerial) (r: EphSerial) : bool =
    let (EphSerial (_, lPtr)) = l
    let (EphSerial (_, rPtr)) = r
    (__nativeCast lPtr: unativeint) = __nativeCast rPtr

  /// Checks specified serial is alive (not outdated).
  let alive (serial: EphSerial) : bool * EphSerial =
    let (EphSerial (current, ptr)) = serial
    Ptr.read (__nativeCast ptr) = current, blackbox (fun () -> serial)

  /// Creates a fresh serial. After this, specified serial is outdated (no longer alive).
  let refresh (serial: EphSerial) : EphSerial =
    let ok, serial = alive serial
    assert (ok || violate "no longer alive")

    let (EphSerial (current, ptr)) = serial
    let next = current + uint 1
    Ptr.write ptr next // should increment atomically
    EphSerial(next, ptr)
