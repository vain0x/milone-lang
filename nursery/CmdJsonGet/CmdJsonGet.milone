module rec CmdJsonGet.Program

open Std.StdError
open Std.StdJson

module E = Std.StdEnv
module S = Std.StdString

let private helpText () =
  """json_get <PATH>

Extracts a value of property in JSON.

EXAMPLE:
    $ echo '{"foo": 42}' | json_get foo
    42

    $ echo '{"greets": {"en": "Hello"}}' | json_get greets.en
    "Hello"

    $ echo '[null, false, true]' | json_get 1
    false

OPTIONS:
    PATH: Path to a property to be extracted its value, separated by '.'."""

// -----------------------------------------------
// Imports
// -----------------------------------------------

let private stdinReadAll () : string = __nativeFun "stdin_read_all"

// -----------------------------------------------
// Entrypoint
// -----------------------------------------------

let main _ =
  let args =
    // wants List.skip
    match E.commandLineArgs () with
    | [] -> exit 1
    | _ :: xs -> xs

  match args with
  | []
  | "-h" :: _
  | "--help" :: _ ->
    printfn "%s" (helpText ())
    0

  | path :: _ ->
    let path = path |> S.split "."
    // printfn "// path.length: %d\n" (List.length path)

    let root =
      stdinReadAll ()
      |> Json.parse
      |> Option.defaultWith (fun () -> failwith "Invalid JSON.")
    // printfn "// input: %s\n" (jsonToString root)

    path
    |> List.fold
         (fun obj key ->
           match key, obj with
           | ".", _ -> obj

           | "length", JArray items -> items |> List.length |> float |> JNumber

           | _, JArray items ->
             items
             |> List.tryItem (int key)
             |> Option.defaultWith (fun () ->
               // printfn "// %s missing" key
               JNull)

           | _, JObject entries ->
             entries
             |> List.tryPick (fun (k, value) -> if k = key then Some value else None)
             |> Option.defaultWith (fun () ->
               // printfn "// %s missing" key
               JNull)

           | _ -> JNull)
         root
    |> Json.dump
    |> printfn "%s"

    0
