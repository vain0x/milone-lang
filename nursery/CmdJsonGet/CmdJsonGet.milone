module rec CmdJsonGet.Program

open Std.ByteVector
open Std.IO
open Std.File
open Std.StdError
open Std.StdList
open Std.StdJson
open Std.Vector

module E = Std.StdEnv
module S = Std.StdString

let private helpText () =
  """json_get: Extracts a value of property in JSON

USAGE:
    json_get <PATH>

EXAMPLE:
    $ echo '{"foo": 42}' | json_get foo
    42

    $ echo '{"greets": {"en": "Hello"}}' | json_get greets.en
    "Hello"

    $ echo '[null, false, true]' | json_get 1
    false

ARGS:
    PATH: Path to a property to extract, separated by '.'."""

// -----------------------------------------------
// Utility
// -----------------------------------------------

[<Literal>]
let private MaxLength = 1 <<< 25

/// Reads a file and writes its contents to standard output.
let private readToEnd (io: IO) (input: File) (buf: Vector<byte>) : Result<unit, string> * IO * File * Vector<byte> =

  let rec loop (io: IO) input buf =
    let buf = VectorExt.reserve 1000 buf

    let capacity, buf = VectorExt.capacity buf

    if capacity >= MaxLength then
      Error "Input too large", io, input, buf
    else
      let readSize, buf, input, io = File.readBlock io buf input

      if readSize < 0 then
        Error "read", io, input, buf
      else if readSize = 0 then
        Ok(), io, input, buf
      else
        loop io input buf

  loop io input buf

// -----------------------------------------------
// Application
// -----------------------------------------------

let private doProcess (io: IO) (input: File) (path: string) =
  let path = path |> S.split "."
  let buf = Vector.alloc 1000

  let result, io, input, buf = readToEnd io input buf

  // Convert to string.
  let jsonText =
    let len, buf = Vector.length buf
    let it, buf = ByteVector.sliceToString 0 len buf
    Vector.dispose buf
    it

  // Parse.
  let result =
    match result with
    | Error msg -> Error msg

    | Ok () ->
      match Json.parse jsonText with
      | None -> Error "Invalid JSON"
      | Some root -> Ok root

  match result with
  | Error msg -> Error msg, io, input

  | Ok root ->
    let output =
      path
      |> List.fold
           (fun obj key ->
             match key, obj with
             | ".", _ -> obj

             | "length", JArray items -> items |> List.length |> float |> JNumber

             | _, JArray items ->
               items
               |> List.tryItem (int key)
               |> Option.defaultWith (fun () ->
                 // printfn "// %s missing" key
                 JNull)

             | _, JObject entries ->
               entries
               |> List.tryPick (fun (k, value) -> if k = key then Some value else None)
               |> Option.defaultWith (fun () ->
                 // printfn "// %s missing" key
                 JNull)

             | _ -> JNull)
           root
      |> Json.dump

    Ok output, io, input

// -----------------------------------------------
// Entrypoint
// -----------------------------------------------

let main _ =
  let args = E.commandLineArgs () |> List.drop 1

  IO.exec (fun io ->
    match args with
    | []
    | "-h" :: _
    | "--help" :: _ ->
      printfn "%s" (helpText ())
      io

    | path :: _ ->
      let input = File.stdin ()

      let result, io, input = doProcess io input path

      let io = File.close io input

      match result with
      | Ok output ->
        printfn "%s" output
        io

      | Error msg ->
        printfn "ERROR: %s" msg
        exit 1
        io)
  |> never
