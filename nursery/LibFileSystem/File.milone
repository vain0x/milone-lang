module rec LibFileSystem.File

open LibSpan.Buffer

module Buffer = LibSpan.Buffer
module Path = LibSpan.Path
module Span = LibSpan.Span
module SpanMut = LibSpan.SpanMut

type private Path = Path.Path

type FP = nativeptr<__nativeType<``FILE``>>

/// Regular file.
type File = File of FP

/// Directory.
type Dir = Dir of FP

let private fpIsNull (fp: FP): bool =
  (__nativeCast fp: unativeint) = unativeint 0

let private fpAsFileOption (fp: FP) : File option =
  if not (fpIsNull fp) then Some(File fp) else None

let private fpAsDirOption (fp: FP) : Dir option =
  if not (fpIsNull fp) then Some(Dir fp) else None

let private fileAsFp (File fp) : FP = fp

let private dirAsFp (Dir fp) : FP = fp

let private toCStr (s: string) : __constptr<char> = __nativeFun ("str_to_c_str", s)

let openRead (path: Path) : File option =
  let filename = toCStr (Path.asString path)
  let mode = toCStr "r"
  __nativeFun ("fopen", filename, mode) |> fpAsFileOption

let closeFile (file: File) : unit =
  let ok = __nativeFun ("fclose", fileAsFp file) = 0
  assert ok

let readAllText (file: File): string =
  let itemSize = unativeint 1

  let chunk =
    let chunkLen = unativeint 1024
    __nativeStmt ("char chunk[{0}];", chunkLen)
    SpanMut.ofRawParts (__nativeExpr "chunk") chunkLen

  let contents = Buffer.create (unativeint 0) itemSize

  let rec go contents =
    let n : unativeint =
      __nativeFun (
        "fread",
        SpanMut.asPtr chunk,
        unativeint 1,
        SpanMut.length chunk,
        fileAsFp file
      )

    if n = unativeint 0 then
      contents
    else
      let chunk =
        chunk |> SpanMut.asConst |> Span.take n itemSize

      contents |> Buffer.append chunk itemSize |> go

  let contents = go contents |> Buffer.asString
  closeFile file
  contents
