let private hashCombine (n: uint64) (h: uint64) =
  let x = (h <<< 5) ||| (h >>> 57)
  (h + x) ^^^ n

// FNV-1a hash
module Fnv1a =
  [<Literal>]
  let Init = 14695981039346656037UL

  [<Literal>]
  let Prime = 1099511628211UL

  let combineUInt8 (n: byte) (h: uint64) = (h ^^^ uint64 n) * Prime

  let combineUInt16 (n: uint16) (h: uint64) =
    h
    |> combineUInt8 (byte (n &&& 15us))
    |> combineUInt8 (byte ((n >>> 8) &&& 15us))

  let combineUInt (n: uint) (h: uint64) =
    h
    |> combineUInt16 (uint16 (n &&& 255u))
    |> combineUInt16 (uint16 ((n >>> 16) &&& 255u))

  let combineUInt64 (n: uint64) (h: uint64) =
    h
    |> combineUInt (uint (n &&& 65535UL))
    |> combineUInt (uint ((n >>> 32) &&& 65535UL))

module String =
  let hash (s: string) : uint64 =
    let rec go (i: int) (h: uint64) =
      if i = s.Length then
        h
      else
        let b = uint64 (byte s.[i])
        go (i + 1) (hashCombine b h)

    go 0 31UL

module List =
  let hash (hashItem: 'T -> uint64) (xs: 'T list) : uint64 =
    xs
    |> List.fold (fun h item -> h |> Fnv1a.combineUInt64 (hashItem item)) Fnv1a.Init

// for debug:
let private digits = "0123456789"
let private alpha = "abcdef"

let hex64 (n: uint64) =
  let rec go acc (n: uint64) =
    if n = 0UL then
      acc
    else
      let d = int (byte (n % 16UL))

      let s =
        if d < 10 then
          digits.[d..d]
        else
          let d = d - 10
          alpha.[d..d]

      go (s + acc) (n / 16UL)

  if n = 0UL then "0" else go "" n
