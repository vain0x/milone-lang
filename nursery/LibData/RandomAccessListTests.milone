// Tests

open Std.StdLoop

module S = Std.StdString
module Ral = LibData.RandomAccessList

type private Ral<'T> = Ral.RandomAccessList<'T>

let private is expected (actual: string) =
  if actual <> expected then
    printfn "actual: %s\nexpected: %s" actual expected
    exit 1

let private isN (expected: int) (actual: int) =
  actual |> string |> is (string expected)

let private emptyTest () = Ral.empty () |> Ral.length |> isN 0

emptyTest ()

let private addTest () =
  let xs = Ral.empty () |> Ral.add 1
  xs |> Ral.item 0 |> isN 1
  xs |> Ral.length |> isN 1

  let xs = xs |> Ral.add 2 |> Ral.add 3
  xs |> Ral.item 0 |> isN 1
  xs |> Ral.item 1 |> isN 2
  xs |> Ral.item 2 |> isN 3
  xs |> Ral.length |> isN 3

addTest ()

let private addManyTest () =
  let rec go i xs =
    if i = 100 then xs else xs |> Ral.add i |> go (i + 1)

  let xs = Ral.empty () |> go 0

  Loop.range 0 100 |> Loop.fold (fun () i -> xs |> Ral.item i |> isN i) ()

  xs |> Ral.length |> isN 100

addManyTest ()

let private withItemTest () =
  let xs = Ral.empty () |> Ral.add 1 |> Ral.add 2 |> Ral.add 3 |> Ral.withItem 1 (-2)

  xs |> Ral.item 0 |> isN 1
  xs |> Ral.item 1 |> isN (-2)
  xs |> Ral.item 2 |> isN 3

withItemTest ()

let private foldTest () =
  Ral.ofList [ 1; 2; 3 ]
  |> Ral.fold (fun (i, s) (x: int) -> i + 1, s + (if i = 0 then "" else ", ") + string x) (0, "")
  |> (fun (i: int, s: string) -> string i + ": " + s)
  |> is "3: 1, 2, 3"

foldTest ()

let private mapTest () =
  Ral.ofList [ 1; 2; 3 ]
  |> Ral.map string
  |> Ral.toList
  |> S.concat "; "
  |> is "1; 2; 3"

mapTest ()

let private ofListTest () =
  let xs = Ral.ofList [ 1; 2; 3 ]

  xs |> Ral.item 0 |> isN 1
  xs |> Ral.item 1 |> isN 2
  xs |> Ral.item 2 |> isN 3

ofListTest ()

let private toListTest () =
  Ral.ofList [ 1; 2; 3 ]
  |> Ral.toList
  |> List.map string
  |> S.concat "; "
  |> is "1; 2; 3"

toListTest ()
