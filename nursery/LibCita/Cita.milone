open Std.Block
open Std.Own
open Std.Ptr

type private CStr = InPtr<__nativeType<char>>

// unsafeFn
let private cStrToString (value: CStr) : string = __nativeFun ("string_of_c_str", value)

// note: 64-bit float is called f64 here to avoid confusion.

/// Data representation of Cita.
// Size of payload is bounded by sizeof<voidptr * int32>.
// [<Export; Repr("C")>]
type CiData =
  | Null
  | Bool of bool
  | Int of int
  | Int64 of int64
  | UInt64 of uint64
  | F64 of float
  | String of string
  | Array of Block<CiData>
  | Map of Block<CiEntry>
  | Foreign of voidptr

// [<Export; Repr("C")>]
[<Repr("C")>]
type CiEntry = { Key: string; Value: CiData }

[<Opaque>]
type CiArray = private | CiArray

[<Opaque>]
type CiMap = private | CiMap

// struct CiArray { ... };
__nativeDecl (
  """{0} { {1} const *ptr; int32_t len; };""",
  (__type: CiArray),
  (__type: CiData)
)

// struct CiMap { ... };
__nativeDecl (
  """{0} { {1} const *ptr; int32_t len; };""",
  (__type: CiMap),
  (__type: CiEntry)
)

module private Internals =
  // Factories:
  [<Export>]
  let CiData_null () : CiData = CiData.Null

  [<Export>]
  let CiData_ofBool (value: bool) : CiData = CiData.Bool value

  [<Export>]
  let CiData_ofInt (value: int) : CiData = CiData.Int value

  [<Export>]
  let CiData_ofInt64 (value: int64) : CiData = CiData.Int64 value

  [<Export>]
  let CiData_ofUInt64 (value: uint64) : CiData = CiData.UInt64 value

  [<Export>]
  let CiData_ofF64 (value: float) : CiData = CiData.F64 value

  [<Export>]
  let CiData_ofString (value: string) : CiData = CiData.String value

  // unsafeFn
  [<Export>]
  let CiData_unsafeOfCString (value: CStr) : CiData = CiData.String(cStrToString value)

  [<Export>]
  let CiData_emptyArray () : CiData = CiData.Array(Block.empty ())

  // unsafeFn
  [<Export>]
  let CiData_unsafeWrapArray (array: CiArray) : CiData =
    BlockExt.unsafeOfRawParts (__nativeExpr ("{0}.ptr", array): InPtr<CiData>) (__nativeExpr ("{0}.len", array): int)
    |> CiData.Array

  [<Export>]
  let CiData_emptyMap () : CiData = CiData.Map(Block.empty ())

  // unsafeFn
  [<Export>]
  let CiData_unsafeWrapMap (map: CiMap) : CiData =
    BlockExt.unsafeOfRawParts (__nativeExpr ("{0}.ptr", map): InPtr<CiEntry>) (__nativeExpr ("{0}.len", map): int)
    |> CiData.Map

  [<Export>]
  let CiData_createForeign (ptr: voidptr) : CiData = CiData.Foreign ptr

  [<Export>]
  let CiEntry_create (key: string) (value: CiData) : CiEntry = { Key = key; Value = value }

  [<Export>]
  let CiEntry_key (e: CiEntry) : string = e.Key

  [<Export>]
  let CiEntry_value (e: CiEntry) : CiData = e.Value

  // Downcasts:
  [<Export>]
  let CiData_isNull (value: CiData) : bool =
    match value with
    | CiData.Null -> true
    | _ -> false

  [<Export>]
  let CiData_asBool (value: CiData) (writtenTo: OutPtr<bool>) : bool =
    match value with
    | CiData.Bool value ->
      Ptr.write writtenTo value
      true
    | _ ->
      Ptr.write writtenTo false
      false

  [<Export>]
  let CiData_asInt (value: CiData) (writtenTo: OutPtr<int>) : bool =
    match value with
    | CiData.Int value ->
      Ptr.write writtenTo value
      true
    | _ ->
      Ptr.write writtenTo 0
      false

  [<Export>]
  let CiData_asInt64 (value: CiData) (writtenTo: OutPtr<int64>) : bool =
    match value with
    | CiData.Int64 value ->
      Ptr.write writtenTo value
      true

    | _ ->
      Ptr.write writtenTo 0L
      false

  [<Export>]
  let CiData_asUInt64 (value: CiData) (writtenTo: OutPtr<uint64>) : bool =
    match value with
    | CiData.UInt64 value ->
      Ptr.write writtenTo value
      true

    | _ ->
      Ptr.write writtenTo 0UL
      false

  [<Export>]
  let CiData_asF64 (value: CiData) (writtenTo: OutPtr<float>) : bool =
    match value with
    | CiData.F64 value ->
      Ptr.write writtenTo value
      true

    | _ ->
      Ptr.write writtenTo 0.0
      false

  // unsafeFn
  [<Export>]
  let CiData_asArray (value: CiData) (writtenTo: OutPtr<CiArray>) : bool =
    match value with
    | CiData.Array value ->
      let ptr, len = BlockExt.unsafeToRawParts value
      Ptr.write writtenTo (__nativeExpr ("({0}){.ptr = {1}, .len = {2}}", (__type: CiArray), ptr, len): CiArray)
      true

    | _ ->
      Ptr.write writtenTo (__nativeExpr ("({0}){.ptr = NULL}", (__type: CiArray)): CiArray)
      false

  // unsafeFn
  [<Export>]
  let CiData_asMap (value: CiData) (writtenTo: OutPtr<CiMap>) : bool =
    match value with
    | CiData.Map value ->
      let ptr, len = BlockExt.unsafeToRawParts value
      Ptr.write writtenTo (__nativeExpr ("({0}){.ptr = {1}, .len = {2}}", (__type: CiMap), ptr, len): CiMap)
      true

    | _ ->
      Ptr.write writtenTo (__nativeExpr ("({0}){.ptr = NULL}", (__type: CiMap)): CiMap)
      false

  [<Export>]
  let CiData_asForeign (value: CiData) (writtenTo: OutPtr<voidptr>) : bool =
    match value with
    | CiData.Foreign value ->
      Ptr.write writtenTo value
      true

    | _ ->
      Ptr.write writtenTo Ptr.nullPtr
      false

module CiData =
  ()
