module rec LibNurseryTests.Program

open LibNursery.EphArray
open LibNursery.EphRef
open LibNursery.EphSerial
open LibNurseryTests.ClapTests
open LibNurseryTests.ExtIterTests
open LibNurseryTests.ExtStringTests

module S = MiloneStd.StdString

let testEphArrayEmpty () =
  let a : EphArray<int> = EphArray.empty ()
  let ok, a = EphArray.alive a
  assert ok
  assert (EphArray.length a = 0)
  a

let testEphArrayInit () =
  let a = EphArray.init 3 (fun i -> i + 1)
  assert (EphArray.length a = 3)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 1 2 a
  let a = itemEq 2 3 a

  let notExist i a =
    let actual, a = EphArray.tryItem i a
    assert (Option.isNone actual)
    a

  let a = notExist (-1) a
  let a = notExist 3 a
  a

let testEphArrayReplicate () =
  let a = EphArray.replicate 5 42
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 42 a
  let a = itemEq 4 42 a
  a

let testEphArraySetItem () =
  let n = 5
  let a = EphArray.replicate n 0
  let init = a

  let a =
    let rec go i a =
      if i < n then
        let a = EphArray.setItem i ((i + 1) * (i + 1)) a
        go (i + 1) a
      else
        a

    go 0 a

  let ok, a = EphArray.alive a
  assert ok
  let initIsAlive, _ = EphArray.alive init
  assert (not initIsAlive)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 2 9 a
  let a = itemEq 4 25 a
  a

let testEphArrayOfList () =
  let a = EphArray.ofList [ 2; 3; 5; 7; 11 ]
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 2 a
  let a = itemEq 2 5 a
  let a = itemEq 4 11 a
  a

let testEphArrayToList () =
  let a = EphArray.init 5 (fun i -> (i + 1) * 2)
  let xs, a = EphArray.toList a
  assert (List.length xs = 5)

  let s =
    xs
    |> List.map (fun (x: int) -> string x)
    |> S.concat ", "

  assert (s = "2, 4, 6, 8, 10")
  a

let testEphSerialRefresh () =
  let s : EphSerial = EphSerial.create ()
  //      ^ this symbol is type
  //                  ^ this symbol is module

  // At first the serial is alive.
  let ok, s = EphSerial.alive s
  assert ok

  // Refresh the serial. Old one is now outdated and result one is alive.
  let prev = s
  let s = EphSerial.refresh s

  let prevIsAlive, _ = EphSerial.alive prev
  assert (not prevIsAlive)

  let ok, s = EphSerial.alive s
  assert ok

  // Return the final serial to ensure `s` is alive (in terms of data flow).
  s

let testEphSerialEquivalent () =
  let s : EphSerial = EphSerial.create ()
  let t : EphSerial = EphSerial.create ()
  let sIsAlive, s = EphSerial.alive s
  let tIsAlive, t = EphSerial.alive t
  assert sIsAlive
  assert tIsAlive
  assert (EphSerial.equivalent s s)
  assert (EphSerial.equivalent t t)
  assert (EphSerial.equivalent s t |> not)

  let s2 = EphSerial.refresh s
  let sIsAlive, _ = EphSerial.alive s
  assert (not sIsAlive)

  let ok, t = EphSerial.alive t
  assert ok

  s2, t

let testEphRef () =
  let r : EphRef<int> = EphRef.create 2
  let ok, r = EphRef.alive r
  assert ok

  // Initial value is stored.
  let n, r = EphRef.read r
  assert (n = 2)

  // Update the value.
  let init = r
  let r = EphRef.write 3 r

  let n, r = EphRef.read r
  assert (n = 3)

  // Old reference is outdated.
  let initIsAlive, _ = EphRef.alive init
  assert (not initIsAlive)
  r

let testEphRefReplace () =
  let r = EphRef.create "hello"
  let prev, r = EphRef.replace "bye" r
  assert (prev = "hello")

  let next, r = EphRef.read r
  assert (next = "bye")
  r

let main _ =
  testClapModule ()
  testExtIterModule ()
  testExtStringModule ()

  let _ = testEphSerialRefresh ()
  let _ = testEphSerialEquivalent ()
  let _ = testEphRef ()
  let _ = testEphRefReplace ()
  let _ = testEphArrayEmpty ()
  let _ = testEphArrayInit ()
  let _ = testEphArrayReplicate ()
  let _ = testEphArraySetItem ()
  let _ = testEphArrayOfList ()
  let _ = testEphArrayToList ()
  printfn "OK"
  0
