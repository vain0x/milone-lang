module rec LibNurseryTests.Program

open LibNursery.EphArray
open LibNursery.EphRef
open LibNursery.EphSerial
open LibNurseryTests.ClapTests
open LibNurseryTests.ExtIterTests
open LibNurseryTests.ExtStringTests

module S = MiloneStd.StdString

let testEphArrayEmpty (ss: EphSerial) : EphSerial =
  let (a: EphArray<int>), ss = EphArray.empty ss
  let ok, a = EphArray.alive a
  assert ok
  assert (EphArray.length a = 0)
  ss

let testEphArrayInit (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.init 3 (fun i -> i + 1) ss
  assert (EphArray.length a = 3)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 1 2 a
  let a = itemEq 2 3 a

  let notExist i a =
    let actual, a = EphArray.tryItem i a
    assert (Option.isNone actual)
    a

  let a = notExist (-1) a
  let _ = notExist 3 a
  ss

let testEphArrayReplicate (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.replicate 5 42 ss
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 42 a
  let _ = itemEq 4 42 a
  ss

let testEphArraySetItem (ss: EphSerial) : EphSerial =
  let n = 5
  let a, ss = EphArray.replicate n 0 ss
  let init = a

  let a =
    let rec go i a =
      if i < n then
        let a = EphArray.setItem i ((i + 1) * (i + 1)) a
        go (i + 1) a
      else
        a

    go 0 a

  let ok, a = EphArray.alive a
  assert ok
  let initIsAlive, _ = EphArray.alive init
  assert (not initIsAlive)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 2 9 a
  let _ = itemEq 4 25 a
  ss

let testEphArrayOfList (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.ofList [ 2; 3; 5; 7; 11 ] ss
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 2 a
  let a = itemEq 2 5 a
  let _ = itemEq 4 11 a
  ss

let testEphArrayToList (ss: EphSerial) : EphSerial =
  let a, ss =
    EphArray.init 5 (fun i -> (i + 1) * 2) ss

  let xs, a = EphArray.toList a
  assert (List.length xs = 5)

  let s =
    xs
    |> List.map (fun (x: int) -> string x)
    |> S.concat ", "

  assert (s = "2, 4, 6, 8, 10")
  ss

let testEphSerialRefresh (ss: EphSerial) : EphSerial =
  let (s: EphSerial), ss = EphSerial.create ss
  //      ^ this symbol is type
  //                       ^ this symbol is module

  // At first the serial is alive.
  let ok, s = EphSerial.alive s
  assert ok

  // Refresh the serial. Old one is now outdated and result one is alive.
  let prev = s
  let s = EphSerial.refresh s

  let prevIsAlive, _ = EphSerial.alive prev
  assert (not prevIsAlive)

  let ok, _ = EphSerial.alive s
  assert ok
  ss

let testEphSerialEquivalent (ss: EphSerial) : EphSerial =
  let s, ss = EphSerial.create ss
  let t, ss = EphSerial.create ss
  let sIsAlive, s = EphSerial.alive s
  let tIsAlive, t = EphSerial.alive t
  assert sIsAlive
  assert tIsAlive
  assert (EphSerial.equivalent s s)
  assert (EphSerial.equivalent t t)
  assert (EphSerial.equivalent s t |> not)

  let s2 = EphSerial.refresh s
  let sIsAlive, _ = EphSerial.alive s
  assert (not sIsAlive)

  let ok, _ = EphSerial.alive t
  assert ok
  ss

let testEphRef (ss: EphSerial) : EphSerial =
  let (r: EphRef<int>), ss = EphRef.create 2 ss
  let ok, r = EphRef.alive r
  assert ok

  // Initial value is stored.
  let n, r = EphRef.read r
  assert (n = 2)

  // Update the value.
  let init = r
  let r = EphRef.write 3 r

  let n, _ = EphRef.read r
  assert (n = 3)

  // Old reference is outdated.
  let initIsAlive, _ = EphRef.alive init
  assert (not initIsAlive)
  ss

let testEphRefReplace (ss: EphSerial) : EphSerial =
  let r, ss = EphRef.create "hello" ss
  let prev, r = EphRef.replace "bye" r
  assert (prev = "hello")

  let next, _ = EphRef.read r
  assert (next = "bye")
  ss

let main _ =
  testClapModule ()
  testExtIterModule ()
  testExtStringModule ()

  EphSerial.run
    (fun (ss: EphSerial) ->
      let ss : EphSerial =
        ss
        |> testEphSerialRefresh
        |> testEphSerialEquivalent
        |> testEphRef
        |> testEphRefReplace
        |> testEphArrayEmpty
        |> testEphArrayInit
        |> testEphArrayReplicate
        |> testEphArraySetItem
        |> testEphArrayOfList
        |> testEphArrayToList

      (), ss)

  printfn "OK"
  0
