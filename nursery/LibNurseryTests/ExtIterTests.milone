module rec LibNurseryTests.ExtIterTests

module S = MiloneStd.StdString
open LibNursery.ExtIter

let private testNext () =
  let bang () = exit 1

  let xs: Iter<int> = ExtIter.range 1 4
  let xs1 = xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 1)
      xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 2)
      xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 3)
      xs

  match ExtIter.next xs with
  | None -> ()
  | Some _ -> bang (assert false)

  // fused
  match ExtIter.next xs with
  | None -> ()
  | Some _ -> bang (assert false)

  // it's stateless
  match ExtIter.next xs1 with
  | None -> bang (assert false)

  | Some (x, xs) -> assert (x = 1)

let private testFold () =
  let xs: Iter<int> = ExtIter.range 1 4

  let n =
    xs |> ExtIter.fold (fun n x -> n * 10 + x) 0

  assert (n = 123)

let private testOfList () =
  let f iter = ExtIter.fold (fun n x -> n * 10 + x) 0 iter

  let xs: Iter<int> = ExtIter.ofList [ 2; 3; 5 ]
  assert (f xs = 235)

  let ys = ExtIter.ofList [ 2 ]
  assert (f ys = 2)

  let zs = ExtIter.ofList [ ]
  assert (f zs = 0)

let testExtIterModule () =
  testNext ()
  testFold ()
  testOfList ()
