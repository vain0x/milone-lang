module rec LibNurseryTests.ExtIterTests

module S = MiloneStd.StdString
open LibNursery.ExtIter

let private bang () = exit 1

/// Generates `i`: `0 <= i < n`.
let private gen (n: int) = ExtIter.range 0 n

let private cat (xs: Iter<int>) : int =
  ExtIter.fold (fun n x -> n * 10 + x) 0 xs

let private testNext () =
  let xs: Iter<int> = ExtIter.range 1 4
  let xs1 = xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 1)
      xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 2)
      xs

  let xs =
    match ExtIter.next xs with
    | None -> bang (assert false)

    | Some (x, xs) ->
      assert (x = 3)
      xs

  match ExtIter.next xs with
  | None -> ()
  | Some _ -> bang (assert false)

  // fused
  match ExtIter.next xs with
  | None -> ()
  | Some _ -> bang (assert false)

  // it's stateless
  match ExtIter.next xs1 with
  | None -> bang (assert false)

  | Some (x, xs) -> assert (x = 1)

let private testSingleton () =
  let xs = ExtIter.singleton "foo"

  match ExtIter.next xs with
  | None -> assert false
  | Some (x, xs) ->
    assert (x = "foo")

    match ExtIter.next xs with
    | None -> ()
    | Some _ -> assert false

let private testMap () =
  assert (gen 0
          |> ExtIter.map (fun _ -> bang (assert false))
          |> cat = 0)

  assert (gen 3 |> ExtIter.map (fun x -> x + 1) |> cat = 123)

  assert (gen 3
          |> ExtIter.map (fun x -> x * 2)
          |> ExtIter.map (fun x -> x + 1)
          |> cat = 135)

let private testIsEmpty () =
  assert (ExtIter.range 0 0 |> ExtIter.isEmpty)
  assert (ExtIter.range 0 1 |> ExtIter.isEmpty |> not)
  assert (ExtIter.range 0 2 |> ExtIter.isEmpty |> not)

let private testFold () =
  let xs: Iter<int> = ExtIter.range 1 4

  let n =
    xs |> ExtIter.fold (fun n x -> n * 10 + x) 0

  assert (n = 123)

let private testOfList () =
  let f iter =
    ExtIter.fold (fun n x -> n * 10 + x) 0 iter

  let xs: Iter<int> = ExtIter.ofList [ 2; 3; 5 ]
  assert (f xs = 235)

  let ys = ExtIter.ofList [ 2 ]
  assert (f ys = 2)

  let zs = ExtIter.ofList []
  assert (f zs = 0)

let private testToList () =
  let xs =
    ExtIter.ofList [ 2; 3; 5 ] |> ExtIter.toList

  assert (List.fold (fun n x -> n * 10 + x) 0 xs = 235)

  let ys =
    ExtIter.ofList [ "x"; "y"; "z" ] |> ExtIter.toList

  assert (List.fold (fun (x: string) y -> x + y) "" ys = "xyz")

let testExtIterModule () =
  testNext ()
  testSingleton ()
  testMap ()
  testIsEmpty ()
  testFold ()
  testOfList ()
  testToList ()
