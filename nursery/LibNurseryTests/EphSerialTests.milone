module rec LibNurseryTests.EphSerialTests

open LibNursery.EphSerial

let private testRefresh (ss: EphSerial) : EphSerial =
  let (s: EphSerial), ss = EphSerial.create ss
  //      ^ this symbol is type
  //                       ^ this symbol is module

  // At first the serial is alive.
  let ok, s = EphSerial.alive s
  assert ok

  // Refresh the serial. Old one is now outdated and result one is alive.
  let prev = s
  let s = EphSerial.refresh s

  let prevIsAlive, _ = EphSerial.alive prev
  assert (not prevIsAlive)

  let ok, _ = EphSerial.alive s
  assert ok
  ss

let private testEquivalent (ss: EphSerial) : EphSerial =
  let s, ss = EphSerial.create ss
  let t, ss = EphSerial.create ss
  let sIsAlive, s = EphSerial.alive s
  let tIsAlive, t = EphSerial.alive t
  assert sIsAlive
  assert tIsAlive
  assert (EphSerial.equivalent s s)
  assert (EphSerial.equivalent t t)
  assert (EphSerial.equivalent s t |> not)

  let s2 = EphSerial.refresh s
  let sIsAlive, _ = EphSerial.alive s
  assert (not sIsAlive)

  let ok, _ = EphSerial.alive t
  assert ok
  ss

let testEphSerialModule () =
  EphSerial.run
    (fun (ss: EphSerial) ->
      let ss : EphSerial =
        ss
        |> testRefresh
        |> testEquivalent

      (), ss)
