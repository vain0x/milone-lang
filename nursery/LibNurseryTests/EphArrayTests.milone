module rec LibNurseryTests.EphArrayTests

open LibNursery.EphArray
open LibNursery.EphSerial

module S = MiloneStd.StdString

let private testEmpty (ss: EphSerial) : EphSerial =
  let (a: EphArray<int>), ss = EphArray.empty ss
  let ok, a = EphArray.alive a
  assert ok
  assert (EphArray.length a = 0)
  ss

let private testInit (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.init 3 (fun i -> i + 1) ss
  assert (EphArray.length a = 3)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 1 2 a
  let a = itemEq 2 3 a

  let notExist i a =
    let actual, a = EphArray.tryItem i a
    assert (Option.isNone actual)
    a

  let a = notExist (-1) a
  let _ = notExist 3 a
  ss

let private testReplicate (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.replicate 5 42 ss
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 42 a
  let _ = itemEq 4 42 a
  ss

let private testSetItem (ss: EphSerial) : EphSerial =
  let n = 5
  let a, ss = EphArray.replicate n 0 ss
  let init = a

  let a =
    let rec go i a =
      if i < n then
        let a = EphArray.setItem i ((i + 1) * (i + 1)) a
        go (i + 1) a
      else
        a

    go 0 a

  let ok, a = EphArray.alive a
  assert ok
  let initIsAlive, _ = EphArray.alive init
  assert (not initIsAlive)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 1 a
  let a = itemEq 2 9 a
  let _ = itemEq 4 25 a
  ss

let private testOfList (ss: EphSerial) : EphSerial =
  let a, ss = EphArray.ofList [ 2; 3; 5; 7; 11 ] ss
  assert (EphArray.length a = 5)

  let itemEq i (expected: int) a =
    let actual, a = EphArray.item i a
    assert (actual = expected)
    a

  let a = itemEq 0 2 a
  let a = itemEq 2 5 a
  let _ = itemEq 4 11 a
  ss

let private testToList (ss: EphSerial) : EphSerial =
  let a, ss =
    EphArray.init 5 (fun i -> (i + 1) * 2) ss

  let xs, a = EphArray.toList a
  assert (List.length xs = 5)

  let s =
    xs
    |> List.map (fun (x: int) -> string x)
    |> S.concat ", "

  assert (s = "2, 4, 6, 8, 10")
  ss

let private testCopyTo (ss: EphSerial) : EphSerial =
  let src, ss =
    EphArray.init 5 (fun i -> (i + 1) * 2) ss

  let dest, ss = EphArray.replicate 5 0 ss

  let dest, _ = EphArray.copyTo dest 2 src 1 2
  let dest, _ = dest |> EphArray.toList
  let dest = dest |> List.map string |> S.concat ", "

  assert (dest = "0, 0, 4, 6, 0")
  ss

let testEphArrayModule () =
  EphSerial.run (fun (ss: EphSerial) ->
    let ss: EphSerial =
      ss
      |> testEmpty
      |> testInit
      |> testReplicate
      |> testSetItem
      |> testOfList
      |> testToList
      |> testCopyTo

    (), ss)
