{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "version": "0.1.0",
    "name": "milone",
    "scopeName": "source.milone",
    "patterns": [
        {
            "include": "#milone_syntax"
        }
    ],
    "repository": {
        "milone_syntax": {
            "patterns": [
                {
                    "include": "#comment_rule"
                },
                {
                    "include": "#literal_rule"
                },
                {
                    "comment": "Type parameter list",
                    "begin": "\\b(type)\\b\\s*([A-Za-z]\\w*)(<)",
                    "end": ">",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.milone"
                        },
                        "2": {
                            "name": "entity.name.type.milone"
                        },
                        "3": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type_rule"
                        }
                    ]
                },
                {
                    "include": "#type_argument_list_rule"
                },
                {
                    "include": "#type_ascription_rule"
                },
                {
                    "include": "#keyword_rule"
                },
                {
                    "include": "#built_in_type_rule"
                },
                {
                    "include": "#built_in_value_rule"
                },
                {
                    "comment": "Attributes",
                    "name": "meta.embedded.milone",
                    "begin": "^\\[<",
                    "end": ">\\]",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "patterns": [
                        {
                            "name": "entity.other.attribute-name",
                            "match": "\\bRepr\\b"
                        },
                        {
                            "include": "#milone_syntax"
                        }
                    ]
                },
                {
                    "include": "#sigil_rule"
                },
                {
                    "comment": "Potential namespaces guess (front of dot)",
                    "match": "\\b([A-Z]\\w+)(?=\\.(?!\\.|\\[))",
                    "captures": {
                        "1": {
                            "name": "entity.name.class.milone"
                        }
                    }
                },
                {
                    "comment": "Wildcard or discard",
                    "name": "variable.other.wildcard.milone",
                    "match": "\\b_\\w*\\b"
                }
            ]
        },
        "comment_rule": {
            "comment": "Grammar of comments.",
            "patterns": [
                {
                    "comment": "Single-line documentation comment",
                    "name": "comment.line.documentation.milone",
                    "begin": "///",
                    "end": "$"
                },
                {
                    "comment": "Single-line non-documentation comment",
                    "name": "comment.line.double-slash.milone",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "literal_rule": {
            "comment": "Grammar of number literals, char literals, type variables, string literals, and bool keywords.",
            "patterns": [
                {
                    "comment": "Hex literal",
                    "name": "constant.numeric.hexadecimal.milone",
                    "match": "\\b0x\\w*\\b"
                },
                {
                    "comment": "Decimal literal",
                    "name": "constant.numeric.float.milone",
                    "match": "\\b-?[0-9][_0-9]*(\\.[_0-9]*)?([eE][-+]?[_0-9]*)?\\w*\\b"
                },
                {
                    "comment": "Char literal",
                    "name": "string.quoted.single.milone",
                    "match": "'([^'\\\\]|\\\\(?:x[0-9A-Fa-f]{2}|.))'",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#escape_sequence_rule"
                                }
                            ]
                        }
                    }
                },
                {
                    "comment": "Type variable",
                    "name": "entity.name.type.variable.milone",
                    "match": "'[A-Za-z]\\b"
                },
                {
                    "comment": "Multiline string literal",
                    "name": "string.quoted.triple.milone",
                    "begin": "\"\"\"",
                    "end": "\"\"\"",
                    "patterns": []
                },
                {
                    "comment": "Illegal prefix of char/string literal",
                    "name": "invalid.illegal.milone",
                    "match": "\\b[_A-Za-z]\\w*(?=['\"])"
                },
                {
                    "comment": "Single-line string literal",
                    "name": "string.quoted.double.milone",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "include": "#escape_sequence_rule"
                        }
                    ]
                },
                {
                    "comment": "Unit and bool literals",
                    "name": "constant.language.literal.milone",
                    "match": "\\(\\)|\\b(false|true)\\b"
                }
            ]
        },
        "escape_sequence_rule": {
            "comment": "Escape sequences in quotes",
            "name": "constant.character.escape.milone",
            "match": "\\\\(x[0-9A-Fa-f]{2}|.)"
        },
        "keyword_rule": {
            "comment": "Grammar of non-contextual keywords.",
            "patterns": [
                {
                    "comment": "Unsupported computation expression binders",
                    "name": "invalid.illegal.milone",
                    "match": "\\b(do|let|match|return|yield)!"
                },
                {
                    "comment": "Unsupported keywords",
                    "name": "invalid.illegal.milone",
                    "match": "\\b(abstract|and|async|base|become|begin|break|checked|class|component|const|constraint|continue|default|delegate|done|downcast|downto|do|elif|end|event|exception|extern|external|finally|fixed|for|function|global|include|inherit|inline|interface|internal|lazy|member|mixin|mutable|mut|namespace|new|null|or|override|parallel|process|protected|pure|ref|return|sealed|select|seq|signature|sig|static|struct|tailcall|to|trait|try|upcast|use|val|virtual|void|while|yield)\\b"
                },
                {
                    "comment": "Control keywords",
                    "name": "keyword.control.milone",
                    "match": "\\b(else|if|match|then|when|with)\\b"
                },
                {
                    "comment": "Visibility keywords",
                    "name": "storage.modifier.visibility.milone",
                    "match": "\\b(private|public)\\b"
                },
                {
                    "comment": "Other keywords",
                    "name": "keyword.milone",
                    "match": "\\b(_|as|fun|in|let|module|of|open|rec|type)\\b"
                }
            ]
        },
        "built_in_type_rule": {
            "patterns": [
                {
                    "comment": "Built-in types",
                    "name": "entity.name.type.milone",
                    "match": "\\b(bool|s?byte|char|float(32)?|list|nativeptr|obj|option|Result|string|u?int(8|16|32|64)?|u?nativeint|unit|voidptr|__inptr|__nativeType|__outptr|__voidinptr)\\b"
                }
            ]
        },
        "built_in_value_rule": {
            "patterns": [
                {
                    "comment": "Built-in functions",
                    "name": "entity.name.function.milone",
                    "match": "\\b(assert|box|compare|exit|not|printfn|sizeof|unbox|__\\w*)\\b"
                },
                {
                    "comment": "Built-in variants",
                    "name": "constant.language.milone",
                    "match": "\\b(Error|None|Ok|Some)\\b"
                }
            ]
        },
        "sigil_rule": {
            "comment": "Grammar of brackets, operators, punctuations and other sigils.",
            "patterns": [
                {
                    "comment": "Unsupported brackets and sigils",
                    "name": "invalid.illegal.milone",
                    "match": "\\(\\||\\|\\)|\\[\\||\\|\\]|\\[:|:\\]|\\{\\||\\|\\}|\\(\\*|\\*\\)|\\\\|#|`|\\$"
                },
                {
                    "comment": "Arithmetic operators",
                    "name": "keyword.operator.arithmetic.milone",
                    "match": "(\\+|-|\\*|/|%|&&&|\\|\\|\\||\\^\\^\\^|<<<|>>>)(?![-;:!?\\.@*\\/&%^+<=>|~])"
                },
                {
                    "comment": "Logical operators (this rule must be after arithmetic operators to avoid conflict)",
                    "name": "keyword.operator.logical.milone",
                    "match": "(&&|\\|\\|)(?![-;:!?\\.@*\\/&%^+<=>|~])"
                },
                {
                    "comment": "Other operators",
                    "name": "keyword.operator.other.milone",
                    "match": "(\\|>|\\.\\.?|::?|->|&|\\||,|;)(?![-;:!?\\.@*\\/&%^+<=>|~])"
                },
                {
                    "comment": "Comparison operators (this rule must be after arithmetic operators and pipeline operator to avoid conflict)",
                    "name": "keyword.operator.comparison.milone",
                    "match": "(=|<>|<|<=|>|>=)(?![-;:!?\\.@*\\/&%^+<=>|~])"
                },
                {
                    "comment": "Unsupported operators",
                    "name": "invalid.illegal.milone",
                    "match": "[-;:!?\\.@*\\/&%^+<=>|~]+"
                },
                {
                    "comment": "Brackets",
                    "name": "keyword.operator.bracket.milone",
                    "match": "\\(|\\)|\\[|\\]|\\{|\\}"
                }
            ]
        },
        "nav_type_rule": {
            "comment": "Grammar of nav type including 1+ dots.",
            "patterns": [
                {
                    "match": "\\b([A-Za-z]\\w*)(\\.[A-Za-z]\\w*)+\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.milone"
                        },
                        "2": {
                            "name": "entity.name.type.milone"
                        }
                    }
                }
            ]
        },
        "type_argument_list_rule": {
            "comment": "Grammar of identifier with type argument list",
            "patterns": [
                {
                    "comment": "Type argument list",
                    "begin": "\\b([A-Za-z]\\w*(?:\\.[A-Za-z]\\w*)*)(<)",
                    "end": ">",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#keyword_rule"
                                },
                                {
                                    "include": "#built_in_type_rule"
                                },
                                {
                                    "include": "#built_in_value_rule"
                                },
                                {
                                    "include": "#nav_type_rule"
                                }
                            ]
                        },
                        "2": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.bracket.milone"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type_rule"
                        }
                    ]
                }
            ]
        },
        "type_ascription_rule": {
            "comment": "Grammar of type ascription (':' type)",
            "patterns": [
                {
                    "begin": "(:)(?![-;:!?\\.@*\\/&%^+<=>|~])",
                    "end": "(?=\\)|\\]|\\}|,|;|=|\\n)|$",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.milone"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type_rule"
                        }
                    ]
                }
            ]
        },
        "type_rule": {
            "comment": "Grammar for type ascription. This excludes grammar of values and statements.",
            "patterns": [
                {
                    "include": "#comment_rule"
                },
                {
                    "include": "#literal_rule"
                },
                {
                    "include": "#keyword_rule"
                },
                {
                    "include": "#type_argument_list_rule"
                },
                {
                    "include": "#built_in_type_rule"
                },
                {
                    "include": "#nav_type_rule"
                },
                {
                    "name": "keyword.operator.milone",
                    "match": "\\*|->"
                },
                {
                    "name": "entity.name.type",
                    "match": "\\b([A-Za-z]\\w*)\\b"
                }
            ]
        }
    }
}
