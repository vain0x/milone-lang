open Std.Block
open Std.StdTesting
open Std.StringBuffer

let private testWriteUInt64 () =
  let sb = StringBuffer.empty ()

  let sb = sb |> StringBuffer.writeUInt64 0 42UL
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "42" s)
  assert (shouldEqual string 2 s.Length)
  let sb = sb |> StringBuffer.clear

  let sb = sb |> StringBuffer.writeUInt64 20 0x7fff00007fff0000UL
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "09223090564025483264" s)
  assert (shouldEqual string 20 s.Length)
  StringBuffer.dispose sb

let private testWriteHex () =
  let sb = StringBuffer.empty ()

  let sb = sb |> StringBuffer.writeHex 0 0xCa10CafeUL

  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "ca10cafe" s)
  assert (shouldEqual string 8 s.Length)
  let sb = sb |> StringBuffer.clear

  let sb = sb |> StringBuffer.writeHex 20 0x7fff00006eee0000UL
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "00007fff00006eee0000" s)
  assert (shouldEqual string 20 s.Length)
  StringBuffer.dispose sb

let private testWriteAscii () =
  let sb = StringBuffer.empty ()
  let sb = sb |> StringBuffer.writeAscii '^' |> StringBuffer.writeAscii '$'
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "^$" s)
  StringBuffer.dispose sb

let private testWriteList () =
  let sb = StringBuffer.empty ()
  let sb = sb |> StringBuffer.writeList StringBuffer.writeInt ", " [ 31; 41; 59; 26 ]
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "31, 41, 59, 26" s)
  StringBuffer.dispose sb

let private testWriteBlock () =
  let sb = StringBuffer.empty ()
  let b = Block.ofList [ 27; 18; 28; 18 ]
  let sb = sb |> StringBuffer.writeBlock StringBuffer.writeInt ", " b
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "27, 18, 28, 18" s)
  StringBuffer.dispose sb

let private testOfString () =
  let sb = StringBuffer.ofString "ABCDEF"
  let a, sb = sb |> StringBuffer.forceGetByte 0
  let c, sb = sb |> StringBuffer.forceGetByte 2
  let f, sb = sb |> StringBuffer.forceGetByte 5
  assert (shouldEqual string (byte 'A') a)
  assert (shouldEqual string (byte 'C') c)
  assert (shouldEqual string (byte 'F') f)
  StringBuffer.dispose sb

let private testReplicate () =
  let sb = StringBuffer.replicate 2 "../"
  let s, sb = sb |> StringBuffer.toString
  assert (shouldEqual id "../../" s)
  StringBuffer.dispose sb

let testStringBuffer () =
  testWriteUInt64 ()
  testWriteHex ()
  testWriteAscii ()
  testWriteList ()
  testWriteBlock ()
  testOfString ()
  testReplicate ()
