// TODO: this should be removed in favor of Vector

module rec Std.StdArrayBase

module Ptr = Std.Ptr

// -----------------------------------------------
// MutArray
// -----------------------------------------------

// ptr, len
type __MutArray<'T> = nativeptr<'T> * uint

let __mutArrayCreate (len: uint) : __MutArray<'T> =
  if len = 0u then
    Ptr.nullPtr, 0u
  else
    let ptr: __outptr<'T> = Ptr.regionAlloc len
    Ptr.cast ptr, len

let __mutArraySet (index: int) (value: 'T) (array: __MutArray<'T>) =
  let mutPtr, len = array

  assert (uint index < len)

  Ptr.write mutPtr.[index] value

let __mutArraySlice (start: int) (endIndex: int) (array: __MutArray<'T>) : __MutArray<'T> =
  let mutPtr, len = array

  assert (0 <= start && uint start <= uint endIndex && uint endIndex <= len)

  Ptr.select mutPtr.[start], uint endIndex - uint start

// -----------------------------------------------
// ConstArray
// -----------------------------------------------

type __ConstArray<'T> = __inptr<'T> * uint

let __constArrayOfMut (mutArray: __MutArray<'T>) : __ConstArray<'T> =
  let mutPtr, len = mutArray
  Ptr.asIn mutPtr, len

let __constArrayLength (array: __ConstArray<'T>) : int =
  let _, len = array
  int len

let __constArrayGet (index: int) (array: __ConstArray<'T>) : 'T =
  let ptr, len = array
  assert (uint index < len)
  Ptr.read ptr.[int index]

let __constArraySlice (start: int) (endIndex: int) (array: __ConstArray<'T>) : __ConstArray<'T> =
  let ptr, len = array

  assert (0 <= start && uint start <= uint endIndex && uint endIndex <= len)

  Ptr.select ptr.[start], uint endIndex - uint start
