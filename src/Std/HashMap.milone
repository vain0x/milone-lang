open Std.Block
open Std.StdError
open Std.Vector

// For memset.
__nativeDecl "#include <string.h>"

// Wording:
//  - entry: an associated pair of key and value
//
// Structure:
//
//  - table: open-addressing hash table
//      from hash (% table-size) to entry index.
//  - keys: unordered array of keys
//  - values: unordered array of values
//
// See also:
//
// - https://en.wikipedia.org/wiki/Open_addressing
// - https://hnw.hatenablog.com/entry/2021/01/10/162018 (Japanese)

/// Hash value. Fixed-width integer that is deterministically computed from a value.
type HashValue = int

type EqualFun<'T> = 'T -> 'T -> bool

/// Computes a hash value for hash table.
///
/// Hash function for hash table isn't cryptographic nor inter-process stable.
type HashFun<'T> = 'T -> HashValue

/// Gets some random value.
let private baseHash () : int =
  __nativeStmt
    """
      static char s_char;
      uintptr_t a = (uintptr_t)(&s_char);
      uint32_t lo = a & 0xffffffff;
      uint32_t hi = (a >> 32) & 0xffffffff;
    """

  __nativeExpr "(int32_t)((((hi << 5) | (hi >> 27)) ^ lo) & 0xffffffff)"

type private ProbeResult =
  | PrEqual
  | PrUnoccupied
  | PrFull

/// Searches a hash table for an unoccupied (non-tombstone) slot.
let private proveEqual (equalFun: EqualFun<'K>) (hashValue: int) (key: 'K) (table: Vector<int>) (keys: Vector<'K>) =
  let capacity, table = Vector.length table

  // Search for a range (ti < tn). (ti: table index)
  let rec go ti tn table keys =
    if ti < tn then
      let cell, table = Vector.forceGet ti table

      match cell with
      | 0 ->
        // 0: unoccupied
        // printfn "probe ti:%d -> unoccupied" ti
        PrUnoccupied, ti, table, keys

      | 1 ->
        // 1: tombstone
        // printfn "probe ti:%d -> tombstone" ti
        go (ti + 1) tn table keys

      | _ ->
        // entry index; 2: offset
        let ei = cell - 2
        // printfn "probe ti:%d -> entry(%d)" ti ei

        let k, keys = Vector.forceGet ei keys

        if equalFun key k then
          PrEqual, ti, table, keys
        else
          go (ti + 1) tn table keys
    else
      // 0 isn't used
      PrFull, 0, table, keys

  if capacity <> 0 then
    let ti = int ((uint hashValue ^^^ uint (baseHash ())) % uint capacity)
    let status, tj, table, keys = go ti capacity table keys

    match status with
    | PrEqual
    | PrUnoccupied -> status, tj, table, keys
    | PrFull -> go 0 ti table keys
  else
    PrFull, 0, table, keys

/// Finds the next occupied entry in table.
let private probeNext (ti: int) (table: Vector<int>) =
  let len, table = Vector.length table

  let rec go table ti =
    if ti < len then
      let cell, table = Vector.forceGet ti table

      // 2: offset
      if cell >= 2 then
        Some(cell - 2, ti + 1), table
      else
        go table (ti + 1)
    else
      None, table

  go table ti

// -----------------------------------------------
// HashMapBuffer
// -----------------------------------------------

/// Owned hash map.
type HashMapBuffer<'K, 'T> =
  private | HashMapBuffer of
    table: Vector<int> *
    keys: Vector<'K> *
    values: Vector<'T> *
    equalFun: EqualFun<'K> *
    hashFun: HashFun<'K>

let private rehash (equalFun: EqualFun<'K>) (hashFun: HashFun<'K>) (table: Vector<int>) (keys: Vector<'K>) =
  let length, keys = Vector.length keys
  let oldCapacity, keys = VectorExt.capacity keys
  let oldTableCapacity, table = Vector.length table

  // newCapacity >= oldCapacity, >= length * 2, and >= 15
  let newCapacity = oldCapacity ||| length * 2 ||| 15
  // #table_capacity
  let newTableCapacity =
    newCapacity + int (float newCapacity * 0.43)

  // printfn "rehash n:%d tn:%d" newCapacity (int newTableCapacity)

  // Resize and clear table.
  let table =
    let table =
      VectorExt.reserveExact (newTableCapacity - oldTableCapacity) table

    let ptr, _, capacity, table = VectorExt.unsafeDup table
    assert (capacity = newTableCapacity)
    __nativeStmt ("memset({0}, 0, (size_t){1} * sizeof(uint32_t));", ptr, capacity)

    VectorExt.unsafeSetLength capacity table

  // Recompute table.
  let rec go ei table keys =
    if ei < length then
      let key, keys = Vector.forceGet ei keys
      let h = hashFun key

      let result, ti, table, keys =
        proveEqual (fun _ _ -> false) h key table keys

      match result with
      | PrEqual
      | PrFull ->
        unreachable ()
        table, keys // #owned_never

      | PrUnoccupied ->
        // 2: offset
        let table =
          Vector.forceSet ti (ei + 2) table

        go (ei + 1) table keys
    else
      table, keys

  go 0 table keys

module HashMapBuffer =
  let empty (equalFun: EqualFun<'K>) (hashFun: HashFun<'K>) : HashMapBuffer<'K, 'T> =
    HashMapBuffer(Vector.empty (), Vector.empty (), Vector.empty (), equalFun, hashFun)

  // capacity: count of entries
  let alloc (equalFun: EqualFun<'K>) (hashFun: HashFun<'K>) (capacity: int) : HashMapBuffer<'K, 'T> =
    assert (capacity >= 0)

    // #table_capacity
    // Compute table capacity so that load factor is 0.7 when map size is equal to capacity.
    // That is, c/t = 0.7 <=> t = c/0.7 <=> t = c * 1.43
    let tableCapacity = capacity + int (float capacity * 0.43)

    HashMapBuffer(Vector.replicate tableCapacity 0, Vector.alloc capacity, Vector.alloc capacity, equalFun, hashFun)

  let dispose (map: HashMapBuffer<'K, 'T>) : unit =
    let (HashMapBuffer (table, keys, values, _, _)) = map
    Vector.dispose table
    Vector.dispose keys
    Vector.dispose values

  let tryFind (key: 'K) (map: HashMapBuffer<'K, 'T>) : 'T option * HashMapBuffer<'K, 'T> =
    let (HashMapBuffer (table, keys, values, equalFun, hashFun)) = map

    let capacity, table = Vector.length table

    let h = hashFun key
    let status, ti, table, keys = proveEqual equalFun h key table keys

    match status with
    | PrEqual ->
      let ei, table = Vector.forceGet ti table
      assert (ei >= 2) // 2: offset
      let ei = ei - 2

      let value, values = Vector.forceGet ei values
      Some value, HashMapBuffer(table, keys, values, equalFun, hashFun)

    | PrUnoccupied
    | PrFull -> None, HashMapBuffer(table, keys, values, equalFun, hashFun)

  let insert (key: 'K) (value: 'T) (map: HashMapBuffer<'K, 'T>) : HashMapBuffer<'K, 'T> =
    let (HashMapBuffer (table, keys, values, equalFun, hashFun)) = map

    let h = hashFun key
    let status, ti, table, keys = proveEqual equalFun h key table keys

    match status with
    | PrEqual ->
      let ei, table = Vector.forceGet ti table
      assert (ei >= 2)
      let ei = ei - 2 // 2: offset

      let keys = Vector.forceSet ei key keys
      let values = Vector.forceSet ei value values
      // printfn "insert (set): ti:%d ei:%d" ti ei
      HashMapBuffer(table, keys, values, equalFun, hashFun)

    | PrUnoccupied ->
      let ei, keys = Vector.length keys
      let ei = ei + 2 // 2: offset
      // printfn "insert (push): ti:%d ei:%d" ti ei

      let table = Vector.forceSet ti ei table
      let keys = Vector.push key keys
      let values = Vector.push value values

      // Check load factor.
      let table, keys =
        let tableCapacity, table = Vector.length table
        let loadFactor = float ei / float tableCapacity

        if loadFactor > 0.8 then
          // printfn "load factor %f" loadFactor
          rehash equalFun hashFun table keys
        else
          table, keys

      HashMapBuffer(table, keys, values, equalFun, hashFun)

    | PrFull ->
      let table, keys = rehash equalFun hashFun table keys
      insert key value (HashMapBuffer(table, keys, values, equalFun, hashFun))

  let remove (key: 'K) (map: HashMapBuffer<'K, 'T>) : ('K * 'T) option * HashMapBuffer<'K, 'T> =
    let (HashMapBuffer (table, keys, values, equalFun, hashFun)) = map

    let h = hashFun key
    let status, ti, table, keys = proveEqual equalFun h key table keys

    match status with
    | PrEqual ->
      let ei, table = Vector.forceGet ti table
      assert (ei >= 2)
      let ei = ei - 2 // 2: offset
      let key, keys = Vector.forceGet ei keys
      let value, values = Vector.forceGet ei values
      let table = Vector.forceSet ti 1 table // 1: tombstone
      // printfn "remove (tomb): ti:%d ei:%d" ti ei
      Some(key, value), HashMapBuffer(table, keys, values, equalFun, hashFun)

    | _ -> None, HashMapBuffer(table, keys, values, equalFun, hashFun)

  let extendFromList (entries: ('K * 'T) list) (map: HashMapBuffer<'K, 'T>) : HashMapBuffer<'K, 'T> =
    let rec go map entries =
      match entries with
      | [] -> map
      | (k, v) :: entries -> go (insert k v map) entries

    go map entries

  let ofList (equalFun: EqualFun<'K>) (hashFun: HashFun<'K>) (entries: ('K * 'T) list) : HashMapBuffer<'K, 'T> =
    extendFromList entries (empty equalFun hashFun)

  let toList (map: HashMapBuffer<'K, 'T>) : ('K * 'T) list * HashMapBuffer<'K, 'T> =
    let rec go acc ti table keys values =
      let opt, table = probeNext ti table

      match opt with
      | Some (ei, ti) ->
        let key, keys = Vector.forceGet ei keys
        let value, values = Vector.forceGet ei values
        go ((key, value) :: acc) ti table keys values

      | None -> List.rev acc, table, keys, values

    let (HashMapBuffer (table, keys, values, equalFun, hashFun)) = map
    let entries, table, keys, values = go [] 0 table keys values
    entries, HashMapBuffer(table, keys, values, equalFun, hashFun)
