open Std.Ptr
open Std.StdError
open Std.Vector

__nativeDecl "#include <string.h>" // for memcpy

// Functions for `Vector<byte>`.
// No "ByteVectorExt" because ByteVector itself is rarely used.
module ByteVector =
  /// Creates a vector with the specified length and all elements are zero.
  let zeroCreate (length: int) : Vector<byte> = VectorExt.unsafeZeroCreate length

  /// Appends UTF-8 bytes of string to the vector.
  let writeString (s: string) (v: Vector<byte>) : Vector<byte> =
    if s.Length <> 0 then
      let sPtr: InPtr<byte> = __nativeExpr ("(uint8_t const *){0}.ptr", s)

      v
      |> VectorWriter.start s.Length
      |> VectorWriter.copy sPtr s.Length
      |> VectorWriter.finish
    else
      v

  /// Creates a vector and copies from a string.
  let ofString (s: string) : Vector<byte> = writeString s (Vector.empty ())

  /// Creates a string from the contents in the specified range of the vector.
  ///
  /// The contents must be valid as UTF-8. Otherwise, string functions don't work well.
  /// See also invariants of the string type.
  let sliceToString (start: int) (endIndex: int) (v: Vector<byte>) : string * Vector<byte> =
    let ptr, length, capacity, v = VectorExt.unsafeDup v

    assert (uint endIndex <= uint length)
    assert (uint start <= uint endIndex)

    let s: string =
      if length <> 0 then
        __nativeExpr ("string_of_raw_parts(&({0})[{1}], {2})", ptr, start, endIndex - start)
      else
        ""

    s, v

  /// Writes an int to the vector. (Decimal)
  let writeInt (value: int) (v: Vector<byte>) =
    v
    |> VectorWriter.start 21
    |> VectorWriter.writeWith (fun v len -> FormatBase.formatInt64 0 (int64 value) v len)
    |> VectorWriter.finish

  /// Writes a float to the vector. Format is unspecified yet.
  let writeFloat (value: float) (v: Vector<byte>) =
    v
    |> VectorWriter.start 64
    |> VectorWriter.writeWith (fun v len -> FormatBase.formatFloat value v len)
    |> VectorWriter.finish

  /// Writes a boolean to the vector. "True" or "False".
  let writeBool (value: bool) (v: Vector<byte>) = writeString (string value) v
