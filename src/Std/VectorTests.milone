open Std.Vector

let private basicCase () : unit =
  let v = Vector.empty ()
  let n, v = Vector.length v
  assert (n = 0)

  let v = Vector.push 31 v
  let n, v = Vector.length v
  assert (n = 1)

  let v = Vector.push 42 v
  let n, v = Vector.length v
  assert (n = 2)

  let itemOpt, v = Vector.pop v
  assert (Option.defaultValue 0 itemOpt = 42)
  let n, v = Vector.length v
  assert (n = 1)

  let itemOpt, v = Vector.pop v
  assert (Option.defaultValue 0 itemOpt = 31)
  let n, v = Vector.length v
  assert (n = 0)

  let itemOpt, v = Vector.pop v
  assert (Option.defaultValue 0 itemOpt = 0)
  let n, v = Vector.length v
  assert (n = 0)

  Vector.dispose v

let private forceGetCase () =
  let n = 8

  // Pre-compute factorial.
  let v =
    let rec go acc i v =
      if i < n then
        go (acc * (i + 1)) (i + 1) (Vector.push acc v)
      else
        v

    go 1 0 (Vector.empty ())

  let l, v = Vector.length v
  assert (l = n)

  let f5, v = Vector.forceGet 5 v
  assert (f5 = 120)

  let f7, v = Vector.forceGet 7 v
  assert (f7 = 5040)

  Vector.dispose v

let private forceSetCase () =
  let n = 10

  // Make vector.
  let v =
    let rec go i v =
      if i < n then
        go (i + 1) (Vector.push 0 v)
      else
        v

    go 0 (Vector.empty ())

  // Compute frequency.
  let v =
    let rec go xs v =
      match xs with
      | [] -> v
      | x :: xs ->
        let n, v = Vector.forceGet x v
        go xs (Vector.forceSet x (n + 1) v)

    go [ 3; 1; 4; 1; 5; 9 ] v

  let f0, v = Vector.forceGet 0 v
  assert (f0 = 0)

  let f2, v = Vector.forceGet 1 v
  assert (f2 = 2)

  let f9, v = Vector.forceGet 9 v
  assert (f9 = 1)

  Vector.dispose v

let testVector () =
  basicCase ()
  forceGetCase ()
  forceSetCase ()
