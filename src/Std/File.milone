// Provides file system API.
//
// Currently functionality is designed similar to C standard library.
open Std.Block
open Std.ByteVector
open Std.CFileInternal
open Std.CMemory
open Std.CStr
open Std.Own
open Std.Ptr
open Std.StdError
open Std.Vector

module S = Std.StdString

/// `FILE *` in C
type private FilePtr = nativeptr<__nativeType<FILE>>

/// Represents a connection to an opened file.
type File = private File of Own<FilePtr>

/// Unsafely retrieves a `FILE *` ptr, which must not outlive `File` value.
let private unsafeDup (file: File) : FilePtr * File =
  let (File fp) = file
  let fp = Own.release fp
  fp, File(Own.acquire fp)

type FileSystem = private | FileSystem

module File =
  /// Gets the file abstraction of standard input.
  let stdin () : File = File(Own.acquire (CFile.stdin ()))

  /// Gets the file abstraction of standard output.
  let stdout () : File = File(Own.acquire (CFile.stdout ()))

  /// Gets the file abstraction of standard error.
  let stderr () : File = File(Own.acquire (CFile.stderr ()))

  /// Opens a file for reading.
  ///
  /// On Windows: The file is opened in binary mode.
  let openRead (pathname: string) : Result<File, int> =
    match CFile.fopen pathname "rb" with
    | Ok fp -> Ok(File(Own.acquire fp))
    | Error e -> Error e

  /// Opens or a file for writing. Creates a regular file if missing.
  ///
  /// On Windows: The file is opened in binary mode.
  let openWrite (pathname: string) : Result<File, int> =
    match CFile.fopen pathname "wb" with
    | Ok fp -> Ok(File(Own.acquire fp))
    | Error e -> Error e

  /// Closes the file.
  ///
  /// The underlying file descriptor is closed.
  /// Remark: Closing stdin/stdout/stderr is noop. It's required to close such file due to the ownership check.
  let close (file: File) : Result<unit, int> =
    let (File fp) = file
    CFile.fclose (Own.release fp)

  /// Reads a chunk from the file to append the buffer.
  ///
  /// Returns:
  ///
  /// - `Ok size`: If success. `size` is the size of data to read.
  /// - `Error e`: If failed. `e` is errno.
  ///
  /// Effects:
  ///
  /// - This function blocks to wait until the buffer is fill (unless the underlying file is asynchronous).
  let readBlock (dest: Vector<byte>) (input: File) : Result<int, int> * Vector<byte> * File =
    let fp, input = unsafeDup input
    let destPtr, destLength, destCapacity, dest = VectorExt.unsafeDup dest
    let size = destCapacity - destLength

    let resultOpt =
      match CFile.fread (Ptr.cast (Ptr.select destPtr.[destLength]): voidptr) 1 size fp with
      | FReadFull -> Ok size
      | FReadPartial len -> Ok len
      | FReadError e -> Error e

    match resultOpt with
    | Ok len ->
      let dest = VectorExt.unsafeSetLength (destLength + len) dest
      Ok len, dest, input

    | Error e -> Error e, dest, input

  /// Reads a block of bytes equal to the specified size from the file to append the buffer.
  ///
  /// Returns:
  ///
  /// - `Ok true`: if successfully read.
  /// - `Ok false`: if nothing to read. It's at EOF.
  /// - `Error e`: if failed. e is errno.
  ///
  /// Effects:
  ///
  /// - This function blocks to wait until the buffer is fill (unless the underlying file is asynchronous).
  let readExact (dest: Vector<byte>) (size: int) (input: File) : Result<bool, int> * Vector<byte> * File =
    assert (size >= 0)

    let fp, input = unsafeDup input

    let destPtr, destLength, destCapacity, dest =
      VectorExt.unsafeDup (VectorExt.reserve size dest)

    let resultOpt =
      match CFile.fread (Ptr.cast (Ptr.select destPtr.[destLength]): voidptr) size 1 fp with
      | FReadFull -> Ok true
      | FReadPartial _ -> Ok false
      | FReadError e -> Error e

    match resultOpt with
    | Ok len ->
      let dest = VectorExt.unsafeSetLength (destLength + size) dest
      Ok len, dest, input

    | Error e -> Error e, dest, input

  let private readAllTo (dest: Vector<byte>) (input: File) : Result<unit, int> * Vector<byte> * File =
    let rec readLoop dest input =
      let dest = VectorExt.reserve 1000 dest
      let len, dest = Vector.length dest
      let capacity, dest = VectorExt.capacity dest
      let size = capacity - len

      let result, dest, input = readBlock dest input

      match result with
      | Ok n when n < size -> Ok(), dest, input
      | Ok _ -> readLoop dest input
      | Error e -> Error e, dest, input

    readLoop dest input

  /// Reads all contents from a file to append the buffer.
  let readToEnd (dest: Vector<byte>) (pathname: string) : Result<unit, int> * Vector<byte> =
    match openRead pathname with
    | Ok file ->
      let result, dest, file = readAllTo dest file
      let _ = File.close file
      result, dest

    | Error e -> Error e, dest

  /// Writes a block of bytes to the file.
  ///
  /// This function blocks the thread (unless the underlying file descriptor is asynchronous mode)
  /// until all data has been written.
  let writeExact (contents: Block<byte>) (output: File) : Result<unit, int> * File =
    let fp, output = unsafeDup output
    let ptr, len = BlockExt.unsafeToRawParts contents

    match CFile.fwrite (Ptr.cast ptr: VoidInPtr) len 1 fp with
    | Ok _ -> Ok(), output
    | Error e -> Error e, output

  /// Writes a string to the file.
  let writeString (s: string) (output: File) : Result<unit, int> * File =
    let b =
      let ptr = (Ptr.cast (S.StringExt.asPtr s): InPtr<byte>)
      BlockExt.unsafeOfRawParts ptr s.Length

    writeExact b output

  /// Moves a file.
  let rename (oldPathname: string) (newPathname: string) : Result<unit, int> = CFile.rename oldPathname newPathname

  /// Deletes a non-directory file.
  let remove (pathname: string) : Result<unit, int> = CFile.remove pathname

  /// Flushes a file.
  let flush (file: File) : Result<unit, int> * File =
    let fp, file = unsafeDup file
    CFile.fflush fp, file

  // Easy to use functions:

  /// Reads all contents of a text file.
  let readAllText (pathname: string) : Result<string, int> =
    let dest = Vector.alloc 1024
    let result, dest = readToEnd dest pathname

    match result with
    | Ok() ->
      let ptr, length, _, dest = VectorExt.unsafeDup dest
      let s = S.StringExt.unsafeOfRawParts (Ptr.cast ptr: InPtr<char>) length
      Vector.dispose dest
      Ok s

    | Error e ->
      Vector.dispose dest
      Error e

  /// Replaces all contents of a text file, or creates a file.
  let writeAllText (s: string) (pathname: string) : Result<unit, int> =
    match openWrite pathname with
    | Ok file ->
      let r1, file = writeString s file
      let r2 = File.close file

      match r1, r2 with
      | Ok(), Ok() -> Ok()
      | Ok(), _ -> r2
      | _ -> r1

    | Error e -> Error e

/// Features rarely used or unsafe.
module FileExt =
  /// `FILE *`
  type FilePtr = nativeptr<__nativeType<FILE>>

  /// Unsafely wraps a `FILE *` ptr in an abstraction.
  let unsafeWrap (fp: Own<FilePtr>) : File =
    File(Own.acquire (__nativeCast (Own.release fp)))

  /// Unsafely unwraps an abstraction and returns a `File *` ptr.
  let unsafeUnwrap (file: File) : Own<FilePtr> =
    let (File fp) = file
    Own.acquire (__nativeCast (Own.release fp))
