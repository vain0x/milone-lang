open Std.ByteVector
open Std.File
open Std.IO
open Std.StdError
open Std.StdTesting
open Std.StringBuffer
open Std.Vector

__nativeDecl "#include <assert.h>"

let private testWrite () =
  match File.openWrite "output.ignored.txt" with
  | Ok file ->
    let result, file = File.writeString "Hello, world!\n" file

    match result with
    | Ok() ->
      let result, file = File.writeString "Good bye!\n" file
      let _ = File.close file

      match result with
      | Ok() -> ()
      | Error e -> failwith "write 2 failed"

    | Error e ->
      let _ = File.close file
      failwith "write 1 failed"

  | Error _ -> failwith "openWrite failed"

let private testRead () =
  match File.readAllText "output.ignored.txt" with
  | Ok contents -> assert (shouldEqual id "Hello, world!\nGood bye!\n" contents)
  | Error _ -> assert false

let private testReadLine () =
  let drain (buf: StringBuffer) =
    let output, buf = StringBuffer.toString buf
    output, StringBuffer.clear buf

  match File.openRead "output.ignored.txt" with
  | Ok file ->
    let buf = StringBuffer.empty ()
    let result, buf, file = File.readLine buf file

    match result with
    | Ok true ->
      let s, buf = drain buf
      assert (shouldEqual id "Hello, world!\n" s)

      let result, buf, file = File.readLine buf file

      match result with
      | Ok true ->
        let s, buf = drain buf
        assert (shouldEqual id "Good bye!\n" s)

        let result, buf, file = File.readLine buf file

        match result with
        | Ok false -> ()
        | _ -> assert false

        StringBuffer.dispose buf
        let _ = File.close file
        ()

      | _ ->
        StringBuffer.dispose buf
        let _ = File.close file
        assert false

    | _ ->
      StringBuffer.dispose buf
      let _ = File.close file
      assert false

  | Error _ -> assert false

let testRename () =
  let r1 = File.writeAllText "a" "rename1.ignored.txt"
  let r2 = File.rename "rename1.ignored.txt" "rename2.ignored.txt"
  let r3 = File.remove "rename2.ignored.txt"

  match r1, r2, r3 with
  | Ok(), Ok(), Ok() -> ()
  | _ -> assert false

let testFile () =
  testWrite ()
  testRead ()
  testReadLine ()
  testRename ()
  File.remove "output.ignored.txt" |> ignore
