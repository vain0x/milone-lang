open Std.ByteVector
open Std.File
open Std.IO
open Std.StdError
open Std.StdTesting
open Std.Vector

__nativeDecl "#include <assert.h>"

let private testWrite () =
  match File.openWrite "output.ignored.txt" with
  | Ok file ->
    let result, file = File.writeString "Hello, world!\n" file

    match result with
    | Ok() ->
      let result, file = File.writeString "Good bye!\n" file
      let _ = File.close file

      match result with
      | Ok() -> ()
      | Error e -> failwith "write 2 failed"

    | Error e ->
      let _ = File.close file
      failwith "write 1 failed"

  | Error _ -> failwith "openWrite failed"

let private testRead () =
  match File.readAllText "output.ignored.txt" with
  | Ok contents -> assert (shouldEqual id "Hello, world!\nGood bye!\n" contents)
  | Error _ -> assert false

// let private readLineCase (io: IO) =
//   let file, io =
//     match File.openRead io "output.ignored.txt" with
//     | Some it, io -> it, io
//     | None, io ->
//       failwith "Not found"
//       File.stdin (), io // HACK: failwith "" can't be File

//   let buf = Vector.alloc 1024
//   let ok, buf, file, io = File.readLine io buf file
//   assert ok
//   let length, buf = Vector.length buf
//   let s, buf = ByteVector.sliceToString 0 length buf
//   assert (shouldEqual id "Hello, world!\n" s)

//   let ok, buf, file, io = File.readLine io buf file
//   assert ok
//   let length2, buf = Vector.length buf

//   let s, buf =
//     ByteVector.sliceToString length length2 buf

//   assert (shouldEqual id "Good bye!\n" s)

//   let ok, buf, file, io = File.readLine io buf file
//   assert (not ok) // EOF.

//   Vector.dispose buf
//   File.close io file

let testRename () =
  let r1 = File.writeAllText "a" "rename1.ignored.txt"
  let r2 = File.rename "rename1.ignored.txt" "rename2.ignored.txt"
  let r3 = File.remove "rename2.ignored.txt"

  match r1, r2, r3 with
  | Ok(), Ok(), Ok() -> ()
  | _ -> assert false

let testFile () =
  testWrite ()
  testRead ()
  testRename ()
  File.remove "output.ignored.txt" |> ignore
