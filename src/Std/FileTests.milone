open Std.ByteVector
open Std.File
open Std.IO
open Std.StdError
open Std.StdTesting
open Std.Vector

__nativeDecl "#include <assert.h>"

let private writeCase (io: IO) =
  __nativeStmt
    """
      FILE *fp = fopen("output.ignored.txt", "wb+");
      assert(fp != NULL);
    """

  let file = FileExt.unsafeWrap (__nativeExpr "fp")

  let ok, file, io =
    file |> File.writeString io "Hello, world!\n"

  assert ok

  let ok, file, io =
    file |> File.writeString io "Good bye!\n"

  assert ok
  File.close io file

let private readCase (io: IO) =
  let file, io =
    match File.openRead io "output.ignored.txt" with
    | Some it, io -> it, io
    | None, io ->
      failwith "Not found"
      File.stdin (), io // HACK: failwith "" can't be File

  let contents, file, io =
    File.readToEnd io (Vector.empty ()) file

  let length, contents = Vector.length contents

  let s, contents =
    ByteVector.sliceToString 0 length contents

  assert (shouldEqual id "Hello, world!\nGood bye!\n" s)
  Vector.dispose contents
  File.close io file

let private readLineCase (io: IO) =
  let file, io =
    match File.openRead io "output.ignored.txt" with
    | Some it, io -> it, io
    | None, io ->
      failwith "Not found"
      File.stdin (), io // HACK: failwith "" can't be File

  let buf = Vector.alloc 1024
  let ok, buf, file, io = File.readLine io buf file
  assert ok
  let length, buf = Vector.length buf
  let s, buf = ByteVector.sliceToString 0 length buf
  assert (shouldEqual id "Hello, world!\n" s)

  let ok, buf, file, io = File.readLine io buf file
  assert ok
  let length2, buf = Vector.length buf

  let s, buf =
    ByteVector.sliceToString length length2 buf

  assert (shouldEqual id "Good bye!\n" s)

  let ok, buf, file, io = File.readLine io buf file
  assert (not ok) // EOF.

  Vector.dispose buf
  File.close io file

let testFile (io: IO) =
  let io =
    io |> writeCase |> readCase |> readLineCase

  File.remove io "output.ignored.txt"
