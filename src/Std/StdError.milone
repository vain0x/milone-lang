module rec Std.StdError

let __dump (_: 'T) : string = "<dump>"

let __writeError (s: string) : unit =
  __nativeStmt ("fwrite({0}.ptr, sizeof(char), (size_t){0}.len, stderr);", s)

let __writeErrorLine (s: string) : unit = __writeError (s + "\n")

/// Only for debugging. Prints to stderr.
let __trace (s: string) : unit = __writeErrorLine s

/// Only for debugging. Adds context to error info if thrown.
let __context _ (action: unit -> 'A) : 'A = action ()

// -----------------------------------------------
// F# primitives
// -----------------------------------------------

// add to prelude?

let failwith (msg: string) : never =
  __nativeStmt (
    """
    milone_failwithf("failwith: %s", string_to_c_str({0}));
    """,
    msg
  )

  // Make it clear that it's cold path.
  assert false

  __nativeExpr "never"

let failwithf (msg: string) (_: 'A) : never = failwith msg

// -----------------------------------------------
// Exceptions
// -----------------------------------------------

/// Never executed.
let unreachable (_: 'A) : never = failwith "unreachable"

/// Not implemented.
let todo () : never = failwith "todo"

/// For compatibility with F#.
let never (n: never) : never = n
