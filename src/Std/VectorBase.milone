module rec Std.VectorBase

open Std.Own
open Std.Ptr

// For memcpy.
__nativeDecl
  """
#include <string.h>

#if defined(_MSC_VER) // On Windows MSVC
#define THREAD_LOCAL __declspec(thread)
#else
#define THREAD_LOCAL _Thread_local
#endif
"""

/// Allocates an untyped vector.
///
/// Returns NULL if count or size is zero.
///
/// - Result is valid until free.
///   - This implies that result can escape from the region.
/// - Result must be free'd exactly once.
let alloc (count: int) (size: int) : Own<voidptr> =
  if count <= 0 || size <= 0 then
    // __trace "allocate 0"
    Own.acquire Ptr.nullPtr
  else
    assert (uint count < (1u <<< 31) / (uint size))

    let ptr: voidptr =
      __nativeExpr ("calloc({0}, {1})", unativeint count, unativeint size)

    // __trace (
    //   ("allocate " + string (unativeint ptr))
    //   + (" " + string (count * size))
    // )

    assert (ptr <> Ptr.nullPtr)
    Own.acquire ptr

/// Deallocates an untyped vector that is allocated with `heapAlloc`.
///
/// - This function is noop if ptr is null.
/// - Never use the input pointer after this.
let unsafeFree (ptr: Own<voidptr>) : unit =
  let ptr = Own.release ptr
  // __trace ("free " + string (unativeint ptr))
  __nativeStmt ("free({0});", ptr)

/// Grows an untyped vector that is allocated with `heapAlloc`.
///
/// Vector moves to newly reallocated memory.
/// New memory must have a capacity `minLength` at least.
let unsafeGrowExact
  (newCapacity: int)
  (ptr: Own<voidptr>)
  (length: int)
  (capacity: int)
  (size: int)
  : Own<voidptr> * int =
  let oldPtr = Own.release ptr

  // __trace (
  //   ("grow len:" + string length)
  //   + (" cap:" + string capacity)
  //   + (" -> " + string newCapacity)
  // )

  let newPtr = Own.release (alloc newCapacity size)

  if oldPtr <> Ptr.nullPtr then
    if length <> 0 then
      __nativeStmt ("memcpy({0}, {1}, {2});", newPtr, oldPtr, unativeint length * unativeint size)

    unsafeFree (Own.acquire oldPtr)

  Own.acquire newPtr, newCapacity

/// Reserves more capacity for an untyped vector.
///
/// In result, `length + addition` doesn't exceed capacity`.
let unsafeReserve (addition: int) ptr (length: int) capacity size =
  assert (uint addition < (1u <<< 31) - uint length)

  let minLength = length + addition

  if minLength > capacity then
    // #exponentially_grow
    // newCapacity >= max(capacity * 2, minLength, 15).
    let newCapacity = (capacity <<< 1) ||| minLength ||| 15
    unsafeGrowExact newCapacity ptr length capacity size
  else
    ptr, capacity

/// Reserves more capacity for an untyped vector.
///
/// In result, `length + addition == capacity`.
let unsafeReserveExact (addition: int) ptr (length: int) capacity size =
  assert (uint addition < (1u <<< 31) - uint length)

  let newCapacity = length + addition

  if newCapacity > capacity then
    unsafeGrowExact newCapacity ptr length capacity size
  else
    ptr, capacity

/// Appends an item to an untyped vector.
///
/// Returns new pointer and capacity since the vector grows if full.
let unsafePush (item: VoidInPtr) (ptr: Own<voidptr>) (length: int) (capacity: int) (size: int) : Own<voidptr> * int =
  let ptr, capacity =
    if length = capacity then
      // #exponentially_grow
      // newCapacity >= max(capacity * 2, minLength, 15).
      let newCapacity = (capacity <<< 1) ||| (length + 1) ||| 15

      unsafeGrowExact newCapacity ptr length capacity size
    else
      ptr, capacity

  let ptr = Own.release ptr

  __nativeStmt (
    "memcpy(&({0})[{1}], {2}, {3});",
    (__nativeCast ptr: nativeptr<byte>),
    unativeint length * unativeint size,
    item,
    unativeint size
  )

  Own.acquire ptr, capacity

/// Sorts an untyped vector in-place.
///
/// - Sort algorithm is an unstable sort.
/// - `ptrComparer` is called with two pointers, each of them points to an item in the vector.
/// - Input span must be valid to read and write.
let unsafeSortUnstable
  (ptrComparer: VoidInPtr -> VoidInPtr -> int)
  (ptr: Own<voidptr>)
  (len: int)
  (size: int)
  : Own<voidptr> =
  let ptr = Own.release ptr

  // Define a static function that captures the comparer via thread local.
  __nativeDecl
    """
      struct PtrCompareFun {
        int32_t(*fun)(void const *, void const *, void const *);
        void const *env;
      };
      THREAD_LOCAL struct PtrCompareFun t_compare_fun;
      static int static_compare(void const *l, void const *r) {
        return (int)t_compare_fun.fun(t_compare_fun.env, l, r);
      }
    """

  __nativeStmt (
    """
      struct PtrCompareFun prev = t_compare_fun;
      t_compare_fun = (struct PtrCompareFun){.fun = {0}.fun, .env = {0}.env};
      qsort({1}, {2}, {3}, static_compare);
      t_compare_fun = prev;
    """,
    ptrComparer,
    ptr,
    len,
    size
  )

  Own.acquire ptr
