module rec Std.StdJsonBase

module S = Std.StdString

let private ofChars (charList: char list) =
  charList |> List.map string |> S.concat ""

let encodeUtf8 (codePoint: int) : string option =
  let c = codePoint

  if c < 0x80 then
    string c |> Some
  else if c < 0x800 then
    let c1 = char (((c >>> 6) &&& 0x1f) ||| 0xc0)
    let c2 = char (((c >>> 0) &&& 0x3f) ||| 0x80)
    ofChars [ c1; c2 ] |> Some
  else if c < 0x10000 then
    if 0xd800 <= c && c <= 0xdfff then
      None
    else
      let c1 = char (((c >>> 12) &&& 0x0f) ||| 0xe0)
      let c2 = char (((c >>> 6) &&& 0x3f) ||| 0x80)
      let c3 = char (((c >>> 0) &&& 0x3f) ||| 0x80)
      ofChars [ c1; c2; c3 ] |> Some
  else if c < 0x110000 then
    let c1 = char (((c >>> 18) &&& 0x07) ||| 0xf0)
    let c2 = char (((c >>> 12) &&& 0x3f) ||| 0x80)
    let c3 = char (((c >>> 6) &&& 0x3f) ||| 0x80)
    let c4 = char (((c >>> 0) &&& 0x3f) ||| 0x80)
    ofChars [ c1; c2; c3; c4 ] |> Some
  else
    // printfn "warn: invalid code point %s" (string c)
    None

// NaN and inf should be error.
let jsonNumberToString (n: float) : string =
  __nativeStmt (
    """
      double n = {0};
      char buf[32] = "";
      size_t len = sprintf(buf, "%.15g", n);
      struct String s = str_of_raw_parts(buf, len);
    """,
    n
  )

  __nativeExpr "s"
