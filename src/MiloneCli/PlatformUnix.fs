module rec MiloneCli.PlatformUnix

open MiloneStd.StdPath
open MiloneShared.Util

module S = MiloneStd.StdString

// -----------------------------------------------
// Utils
// -----------------------------------------------

let private escapeShellWord (s: string) : string =
  s
  |> S.replace "\\" "\\\\"
  |> S.replace "!" "\\!"
  |> S.replace "$" "\\$"
  |> S.replace "'" "\\'"
  |> S.replace "\"" "\\\""

let private quoteShellWord (s: string) : string = "\"" + escapeShellWord s + "\""

// -----------------------------------------------
// Interface
// -----------------------------------------------

[<RequireQualifiedAccess; NoEquality; NoComparison>]
type BuildOnUnixParams =
  { CFiles: Path list
    TargetDir: Path
    ExeFile: Path
    MiloneHome: Path
    Libs: string list

    // Effects
    DirCreate: Path -> unit
    FileWrite: Path -> string -> unit
    ExecuteInto: string -> unit }

let buildOnUnix (p: BuildOnUnixParams) : unit =
  let targetDir = p.TargetDir

  let ninjaFile =
    Path(Path.toString targetDir + "/build.ninja")

  let ninjaScript =
    let p: RenderNinjaFileParams =
      { TargetDir = p.TargetDir
        CFiles = p.CFiles
        ExeFile = p.ExeFile
        MiloneHome = p.MiloneHome
        Libs = p.Libs }

    renderNinjaFile p

  p.DirCreate targetDir
  p.FileWrite ninjaFile ninjaScript

  p.ExecuteInto(
    "ninja -f "
    + quoteShellWord (Path.toString ninjaFile)
    + " "
    + quoteShellWord (Path.toString p.ExeFile)
  )

[<RequireQualifiedAccess; NoEquality; NoComparison>]
type RunOnUnixParams =
  { CFiles: Path list
    TargetDir: Path
    ExeFile: Path
    MiloneHome: Path
    Libs: string list

    Args: string list

    // Effects
    DirCreate: Path -> unit
    FileWrite: Path -> string -> unit
    ExecuteInto: string -> unit }

let runOnUnix (p: RunOnUnixParams) : unit =
  let targetDir = p.TargetDir
  let exeFile = p.ExeFile

  let ninjaFile =
    Path(Path.toString targetDir + "/build.ninja")

  let buildScript =
    let p: RenderNinjaFileParams =
      { TargetDir = p.TargetDir
        CFiles = p.CFiles
        ExeFile = p.ExeFile
        MiloneHome = p.MiloneHome
        Libs = p.Libs }

    renderNinjaFile p

  p.DirCreate targetDir
  p.FileWrite ninjaFile buildScript

  p.ExecuteInto(
    "ninja -f "
    + quoteShellWord (Path.toString ninjaFile)
    + " 1>&2 && "
    + quoteShellWord (Path.toString exeFile)
    + (p.Args
       |> List.map (fun arg -> " " + quoteShellWord arg)
       |> S.concat "")
  )

// -----------------------------------------------
// Templating
// -----------------------------------------------

type private RenderNinjaFileParams =
  { TargetDir: Path
    CFiles: Path list
    ExeFile: Path
    MiloneHome: Path

    Libs: string list }

let private renderNinjaFile (p: RenderNinjaFileParams) : string =
  let miloneHome = Path.toString p.MiloneHome
  let targetDir = Path.toString p.TargetDir
  let exeFile = Path.toString p.ExeFile

  let cFile name =
    let name = Path.toString name
    targetDir + "/" + name

  let objFile name =
    let name = Path.fileStem name |> Path.toString
    targetDir + "/" + name + ".o"

  let rules =
    """# Generated by milone command.

builddir = ${TARGET_DIR}

include_flag = -I${MILONE_HOME}/runtime
milone_h = ${MILONE_HOME}/runtime/milone.h
milone_c = ${MILONE_HOME}/runtime/milone.c
milone_o = ${MILONE_HOME}/runtime/milone.o
milone_platform_c = ${MILONE_HOME}/runtime/milone_platform.c
milone_platform_o = ${MILONE_HOME}/runtime/milone_platform.o
exe_file = ${EXE_FILE}

rule cc
  description = cc $in
  command = $${CC:-gcc} -std=c11 -O1 -g -c $include_flag $in -o $out

rule link
  description = link $out
  command = $${CC:-gcc} $in -o $out ${LINK_FLAGS}

build $milone_o: cc $milone_c | $milone_h
build $milone_platform_o: cc $milone_platform_c | $milone_h

"""

  let build =
    let rules =
      rules
      |> S.replace "${EXE_FILE}" exeFile
      |> S.replace "${MILONE_HOME}" miloneHome
      |> S.replace "${TARGET_DIR}" targetDir
      |> S.replace
           "${LINK_FLAGS}"
           (p.Libs
            |> List.map (fun lib -> "-l" + lib)
            |> S.concat " ")

    [ rules ]

  let build =
    List.fold
      (fun build name ->
        build
        |> cons "build "
        |> cons (objFile name)
        |> cons ": cc "
        |> cons (cFile name)
        |> cons " | $milone_h"
        |> cons "\n\n")
      build
      p.CFiles

  let build =
    build
    |> cons "build $exe_file: link $milone_o $milone_platform_o "
    |> cons (p.CFiles |> List.map objFile |> S.concat " ")
    |> cons "\n"

  build |> List.rev |> S.concat ""
