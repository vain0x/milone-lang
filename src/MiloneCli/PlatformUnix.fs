module rec MiloneCli.PlatformUnix

open MiloneStd.StdPath
open MiloneShared.Util

module S = MiloneStd.StdString

// -----------------------------------------------
// Utils
// -----------------------------------------------

let private escapeShellWord (s: string) : string =
  s
  |> S.replace "\\" "/" // FIXME: path normalization is not a business
  |> S.replace "$" "\\$"
  |> S.replace "'" "\\'"
  |> S.replace "\"" "\\\""
  |> S.replace " " "\\ "

let private quoteShellWord (s: string) : string = "'" + escapeShellWord s + "'"

// -----------------------------------------------
// Interface
// -----------------------------------------------

[<RequireQualifiedAccess; NoEquality; NoComparison>]
type BuildOnUnixParams =
  { CFiles: (Path * string) list
    TargetDir: Path
    ExeFile: Path
    MiloneHome: Path

    // Effects
    DirCreate: Path -> unit
    FileWrite: Path -> string -> unit
    ExecuteInto: string -> unit }

let buildOnUnix (p: BuildOnUnixParams) : unit =
  let targetDir = p.TargetDir

  let ninjaFile =
    Path(Path.toString targetDir + "/build.ninja")

  let ninjaScript =
    let p: RenderNinjaFileParams =
      { TargetDir = p.TargetDir
        CFiles = p.CFiles
        ExeFile = p.ExeFile
        MiloneHome = p.MiloneHome }

    renderNinjaFile p

  p.DirCreate targetDir
  p.FileWrite ninjaFile ninjaScript

[<RequireQualifiedAccess; NoEquality; NoComparison>]
type RunOnUnixParams =
  { CFiles: (Path * string) list
    TargetDir: Path
    ExeFile: Path
    MiloneHome: Path

    Args: string list

    // Effects
    DirCreate: Path -> unit
    FileWrite: Path -> string -> unit
    ExecuteInto: string -> unit }

let runOnUnix (p: RunOnUnixParams) : unit =
  let targetDir = p.TargetDir
  let exeFile = p.ExeFile

  let ninjaFile =
    Path(Path.toString targetDir + "/build.ninja")

  let buildScript =
    let p: RenderNinjaFileParams =
      { TargetDir = p.TargetDir
        CFiles = p.CFiles
        ExeFile = p.ExeFile
        MiloneHome = p.MiloneHome }

    renderNinjaFile p

  p.DirCreate targetDir
  p.FileWrite ninjaFile buildScript

  p.ExecuteInto(
    "ninja -f "
    + quoteShellWord (Path.toString ninjaFile)
    + " 1>&2 && "
    + quoteShellWord (Path.toString exeFile)
    + (p.Args
       |> List.map (fun arg -> " " + quoteShellWord arg)
       |> S.concat " ")
  )

// -----------------------------------------------
// Templating
// -----------------------------------------------

type private RenderNinjaFileParams =
  { TargetDir: Path
    CFiles: (Path * string) list
    ExeFile: Path
    MiloneHome: Path }

let private renderNinjaFile (p: RenderNinjaFileParams) : string =
  let miloneHome = Path.toString p.MiloneHome
  let targetDir = Path.toString p.TargetDir
  let exeFile = Path.toString p.ExeFile

  let miloneObj = miloneHome + "/runtime/milone.o"

  let milonePlatformObj =
    miloneHome + "/runtime/milone_platform.o"

  let miloneHeader = miloneHome + "/runtime/milone.h"

  let cFile name =
    let name = Path.toString name
    targetDir + "/" + name

  let objFile name =
    let name = Path.fileStem name |> Path.toString
    targetDir + "/" + name + ".o"

  let build =
    let rules =
      """
rule false
  description = false $out
  command = false

rule cc
  description = cc $in
  command = $${CC:-gcc} -std=c11 -O1 -g -c $include_flag $in -o $out

rule link
  description = link $out
  command = $${CC:-gcc} $in -o $out"""

    []
    |> cons "# Generated by 'milone build'.\n"
    |> cons "builddir = "
    |> cons targetDir
    |> cons "\n"
    |> cons "include_flag = -I"
    |> cons miloneHome
    |> cons "/runtime\n"
    |> cons rules
    |> cons "\n\n"
    |> cons "build "
    |> cons miloneHome
    |> cons "/runtime/milone.o: cc "
    |> cons miloneHome
    |> cons "/runtime/milone.c | "
    |> cons miloneHome
    |> cons "/runtime/milone.h"
    |> cons "\n\n"
    |> cons "build "
    |> cons miloneHome
    |> cons "/runtime/milone_platform.o: cc "
    |> cons miloneHome
    |> cons "/runtime/milone_platform.c | "
    |> cons miloneHome
    |> cons "/runtime/milone.h"
    |> cons "\n\n"

  let build =
    List.fold
      (fun build (name, _) ->
        // host.FileWriteAllText(targetDir + "/" + name) contents

        build
        |> cons "build "
        |> cons (objFile name)
        |> cons ": cc "
        |> cons (cFile name)
        |> cons " | "
        |> cons miloneHeader
        |> cons "\n\n")
      build
      p.CFiles

  let build =
    build
    |> cons "build "
    |> cons exeFile
    |> cons ": link "
    |> cons miloneObj
    |> cons " "
    |> cons milonePlatformObj
    |> cons " "
    |> cons (
      p.CFiles
      |> List.map (fun (name, _) -> objFile name)
      |> S.concat " "
    )
    |> cons "\n"

  build |> List.rev |> S.concat ""
