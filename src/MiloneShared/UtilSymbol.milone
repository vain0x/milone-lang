module rec MiloneShared.UtilSymbol

__nativeDecl
  """
#include <assert.h>
#include <milone.h>

#include <hashmap.h>

#if defined(_MSC_VER) // On Windows MSVC
#define THREAD_LOCAL __declspec(thread)
#else
#define THREAD_LOCAL _Thread_local
#endif

THREAD_LOCAL bool t_initialized;
THREAD_LOCAL struct hashmap_s t_hashmap;
THREAD_LOCAL struct String t_entries[4000];
THREAD_LOCAL int32_t t_entries_len;
THREAD_LOCAL int32_t t_rank;

static void _initialize(void) {
  if (!t_initialized) {
    hashmap_create(64, &t_hashmap);
    t_entries_len = 1;
    t_initialized = true;
  }
}

static int32_t symbol_intern(struct String s) {
  _initialize();

  void *p = hashmap_get(&t_hashmap, (char const *)s.ptr, (unsigned)s.len);
  if (p == NULL) {
    int32_t id = t_entries_len;
    assert(t_entries_len < 4000);
    t_entries_len++;
    t_entries[id] = s;
    hashmap_put(&t_hashmap, (char const *)s.ptr, (unsigned)s.len, (void *)(uintptr_t)id);
    return id;
  }
  return (int32_t)(uintptr_t)p;
}

static struct String symbol_to_string(int32_t id) {
  // assert(id < t_entries_len && t_entries[id].ptr != NULL);
  return t_entries[id];
}
"""

let private symbolIntern (s: string): int = __nativeExpr ("symbol_intern({0})", s)
let private symbolToString (n: int): string = __nativeExpr ("symbol_to_string({0})", n)

let private compareInt (l: int) r = compare l r

type Symbol =
  private
  | Symbol of int

module Symbol =
  let intern (s: string) = Symbol(symbolIntern s)
  let equals (Symbol l) (Symbol r) = l = r
  let compare (Symbol l) (Symbol r) = compareInt l r
  let toString (Symbol n) : string = symbolToString n
