module rec MiloneCliCore.MiloneOnly

// See milone_libs for implementations.
open Std.StdChar
open Std.StdError
open Std.StdString

open MiloneShared.Util
open MiloneShared.UtilParallel
open MiloneShared.UtilProfiler
open MiloneCliCore.Cli

module Env = Std.StdEnv

let private newGuid () : string = __nativeFun "milone_uuid"

let private profileInit () : Profiler =
  let state: voidptr = __nativeFun "milone_profile_init"
  Profiler state

let private profileLog (msg: string) (Profiler state) : unit =
  __nativeFun ("milone_profile_log", msg, state)

let private fileExists (filePath: string) : bool = __nativeFun ("file_exists", filePath)

let private dirCreate (baseDir: string) (dir: string) : bool =
  __nativeFun ("dir_create", dir, baseDir)

let private fileReadAllText (filePath: string) : string =
  __nativeFun ("file_read_all_text", filePath)

let private fileWriteAllText (filePath: string) (contents: string) : unit =
  __nativeFun ("file_write_all_text", filePath, contents)

let private readStdinAll () : string = __nativeFun "milone_read_stdin_all"

let private writeStdout (contents: string) : unit =
  __nativeStmt ("fwrite({0}.str, sizeof(char), (size_t){0}.len, stdout);", contents)

let private getCwd () : string = __nativeFun "milone_get_cwd"

let private getEnv (name: string) : string = __nativeFun ("milone_get_env", name)

let private runCommand (command: string) (args: string list) : int =
  __nativeFun ("milone_subprocess_run", command, args)

let private executeInto (cmd: string) : Never =
  __nativeFun ("execute_into", cmd)
  unreachable ()

let private readFile filePath =
  if fileExists filePath then
    fileReadAllText filePath |> Some |> Future.just
  else
    None |> Future.just

let private getPlatform () : Platform =
  match __nativeFun "milone_get_platform" with
  | "windows" ->
    let w: WindowsApi =
      { NewGuid = newGuid
        RunCommand = runCommand }

    Platform.Windows w

  | _ ->
    let u: UnixApi = { ExecuteInto = executeInto }
    Platform.Unix u

let miloneCliHost () : CliHost =
  let args = Env.commandLineArgs ()

  let home =
    match getPlatform () with
    | Platform.Unix _ -> getEnv "HOME"
    | Platform.Windows _ -> getEnv "USERPROFILE"

  let miloneHome =
    let s = getEnv "MILONE_HOME"
    if s <> "" then Some s else None

  let host: CliHost =
    { Args = args
      WorkDir = getCwd ()
      Home = home
      MiloneHome = miloneHome
      Platform = getPlatform ()
      ProfileInit = profileInit
      ProfileLog = profileLog
      DirCreate = dirCreate
      FileExists = fileExists
      FileReadAllText = readFile
      FileWriteAllText = fileWriteAllText
      ReadStdinAll = readStdinAll
      WriteStdout = writeStdout }

  host
