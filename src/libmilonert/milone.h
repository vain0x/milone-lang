// Runtime code for C programs generated by the milone-lang compiler.
// Interface is still unstable.

#ifndef MILONE_H_INCLUDED
#define MILONE_H_INCLUDED

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

void milone_start(int argc, char **argv);

// -----------------------------------------------
// memory management
// -----------------------------------------------

void milone_region_enter(void);
void milone_region_leave(void);
void *milone_region_alloc(int count, size_t size);

// -----------------------------------------------
// integers
// -----------------------------------------------

int milone_int32_compare(int32_t l, int32_t r);
int milone_int64_compare(int64_t l, int64_t r);
int milone_uint64_compare(uint64_t l, uint64_t r);

// -----------------------------------------------
// String
// -----------------------------------------------

// This assumes some invariants, see documentation about string type.
struct String {
    char const *ptr;
    int len;
};

// Convert a null-terminated string to a string object by computing its length.
//
// SAFETY: The resulting string is valid until the pointer is valid.
struct String string_borrow(char const *c_str);

// Compare two strings in lexicographical order.
int string_compare(struct String l, struct String r);

// Create a copy of native C string.
struct String string_of_raw_parts(char const *ptr, int len);

// Create a copy of native null-terminated C string.
struct String string_of_c_str(char const *s);

// Create a concatenation of two string.
struct String string_add(struct String l, struct String r);

// Create a slice of string.
struct String string_slice(struct String s, int l, int r);

/// Implementation of `s.[l..r]`; `r` is inclusive.
static struct String string_get_slice(int32_t l, int32_t r, struct String s) {
    return string_slice(s, l, r + 1);
}

struct String string_ensure_null_terminated(struct String s);

// Ensure null-terminated.
char const *string_to_c_str(struct String s);

// Conversion:

int8_t string_to_int8(struct String s);
int16_t string_to_int16(struct String s);
int32_t string_to_int32(struct String s);
int64_t string_to_int64(struct String s);
intptr_t string_to_nativeint(struct String s);

uint8_t string_to_uint8(struct String s);
uint16_t string_to_uint16(struct String s);
uint32_t string_to_uint32(struct String s);
uint64_t string_to_uint64(struct String s);
uintptr_t string_to_unativeint(struct String s);

struct String string_of_int64(int64_t value);
struct String string_of_uint64(uint64_t value);

double string_to_float64(struct String s);
struct String string_of_float64(double value);

struct String string_of_bool(bool value);

char string_to_char(struct String s);
struct String string_of_char(char value);

// Actual name of string list.
struct StringList;

struct String string_concat(struct String sep, struct StringList const *strings);

// Low level operations.

inline char const *string_as_ptr(struct String s) { return s.ptr; }

// -----------------------------------------------
// assertion
// -----------------------------------------------

void milone_assert(bool cond, struct String name, int32_t row, int32_t column);

#endif
